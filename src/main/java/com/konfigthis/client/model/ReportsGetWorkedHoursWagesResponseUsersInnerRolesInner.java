/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ReportsGetWorkedHoursWagesResponseUsersInnerRolesInnerTotal;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner {
  public static final String SERIALIZED_NAME_ROLE_ID = "role_id";
  @SerializedName(SERIALIZED_NAME_ROLE_ID)
  private Double roleId;

  public static final String SERIALIZED_NAME_ROLE_LABEL = "role_label";
  @SerializedName(SERIALIZED_NAME_ROLE_LABEL)
  private String roleLabel;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private ReportsGetWorkedHoursWagesResponseUsersInnerRolesInnerTotal total;

  public static final String SERIALIZED_NAME_LOCATION_LABEL = "location_label";
  @SerializedName(SERIALIZED_NAME_LOCATION_LABEL)
  private String locationLabel;

  public ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner() {
  }

  public ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner roleId(Double roleId) {
    
    
    
    
    this.roleId = roleId;
    return this;
  }

  public ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner roleId(Integer roleId) {
    
    
    
    
    this.roleId = roleId.doubleValue();
    return this;
  }

   /**
   * Role ID
   * @return roleId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "604", value = "Role ID")

  public Double getRoleId() {
    return roleId;
  }


  public void setRoleId(Double roleId) {
    
    
    
    this.roleId = roleId;
  }


  public ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner roleLabel(String roleLabel) {
    
    
    
    
    this.roleLabel = roleLabel;
    return this;
  }

   /**
   * Role name
   * @return roleLabel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Cook", value = "Role name")

  public String getRoleLabel() {
    return roleLabel;
  }


  public void setRoleLabel(String roleLabel) {
    
    
    
    this.roleLabel = roleLabel;
  }


  public ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner total(ReportsGetWorkedHoursWagesResponseUsersInnerRolesInnerTotal total) {
    
    
    
    
    this.total = total;
    return this;
  }

   /**
   * Get total
   * @return total
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReportsGetWorkedHoursWagesResponseUsersInnerRolesInnerTotal getTotal() {
    return total;
  }


  public void setTotal(ReportsGetWorkedHoursWagesResponseUsersInnerRolesInnerTotal total) {
    
    
    
    this.total = total;
  }


  public ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner locationLabel(String locationLabel) {
    
    
    
    
    this.locationLabel = locationLabel;
    return this;
  }

   /**
   * Location name
   * @return locationLabel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Quacker's", value = "Location name")

  public String getLocationLabel() {
    return locationLabel;
  }


  public void setLocationLabel(String locationLabel) {
    
    
    
    this.locationLabel = locationLabel;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner instance itself
   */
  public ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner reportsGetWorkedHoursWagesResponseUsersInnerRolesInner = (ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner) o;
    return Objects.equals(this.roleId, reportsGetWorkedHoursWagesResponseUsersInnerRolesInner.roleId) &&
        Objects.equals(this.roleLabel, reportsGetWorkedHoursWagesResponseUsersInnerRolesInner.roleLabel) &&
        Objects.equals(this.total, reportsGetWorkedHoursWagesResponseUsersInnerRolesInner.total) &&
        Objects.equals(this.locationLabel, reportsGetWorkedHoursWagesResponseUsersInnerRolesInner.locationLabel)&&
        Objects.equals(this.additionalProperties, reportsGetWorkedHoursWagesResponseUsersInnerRolesInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(roleId, roleLabel, total, locationLabel, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner {\n");
    sb.append("    roleId: ").append(toIndentedString(roleId)).append("\n");
    sb.append("    roleLabel: ").append(toIndentedString(roleLabel)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    locationLabel: ").append(toIndentedString(locationLabel)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("role_id");
    openapiFields.add("role_label");
    openapiFields.add("total");
    openapiFields.add("location_label");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner is not found in the empty JSON string", ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("role_label") != null && !jsonObj.get("role_label").isJsonNull()) && !jsonObj.get("role_label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role_label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role_label").toString()));
      }
      // validate the optional field `total`
      if (jsonObj.get("total") != null && !jsonObj.get("total").isJsonNull()) {
        ReportsGetWorkedHoursWagesResponseUsersInnerRolesInnerTotal.validateJsonObject(jsonObj.getAsJsonObject("total"));
      }
      if ((jsonObj.get("location_label") != null && !jsonObj.get("location_label").isJsonNull()) && !jsonObj.get("location_label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_label").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner>() {
           @Override
           public void write(JsonWriter out, ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner
  * @throws IOException if the JSON string is invalid with respect to ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner
  */
  public static ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner.class);
  }

 /**
  * Convert an instance of ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

