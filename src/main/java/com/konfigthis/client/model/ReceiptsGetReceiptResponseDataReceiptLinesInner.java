/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ReceiptsGetReceiptResponseDataReceiptLinesInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ReceiptsGetReceiptResponseDataReceiptLinesInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private Integer locationId;

  public static final String SERIALIZED_NAME_EXTERNAL_ITEM_ID = "external_item_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ITEM_ID)
  private String externalItemId;

  public static final String SERIALIZED_NAME_EXTERNAL_CATEGORY_IDS = "external_category_ids";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_CATEGORY_IDS)
  private List<String> externalCategoryIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Integer price;

  public static final String SERIALIZED_NAME_GROSS_ITEM_PRICE = "gross_item_price";
  @SerializedName(SERIALIZED_NAME_GROSS_ITEM_PRICE)
  private Integer grossItemPrice;

  public static final String SERIALIZED_NAME_NET_ITEM_PRICE = "net_item_price";
  @SerializedName(SERIALIZED_NAME_NET_ITEM_PRICE)
  private Integer netItemPrice;

  public static final String SERIALIZED_NAME_ITEM_DISCOUNT = "item_discount";
  @SerializedName(SERIALIZED_NAME_ITEM_DISCOUNT)
  private Integer itemDiscount;

  public static final String SERIALIZED_NAME_CREATED_DATE = "created_date";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public ReceiptsGetReceiptResponseDataReceiptLinesInner() {
  }

  public ReceiptsGetReceiptResponseDataReceiptLinesInner id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Internal UUID of the receipt
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ABC123", value = "Internal UUID of the receipt")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public ReceiptsGetReceiptResponseDataReceiptLinesInner locationId(Integer locationId) {
    if (locationId != null && locationId < 0) {
      throw new IllegalArgumentException("Invalid value for locationId. Must be greater than or equal to 0.");
    }
    
    
    
    this.locationId = locationId;
    return this;
  }

   /**
   * The id of the location where this receipt was created
   * minimum: 0
   * @return locationId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The id of the location where this receipt was created")

  public Integer getLocationId() {
    return locationId;
  }


  public void setLocationId(Integer locationId) {
    if (locationId != null && locationId < 0) {
      throw new IllegalArgumentException("Invalid value for locationId. Must be greater than or equal to 0.");
    }
    
    
    this.locationId = locationId;
  }


  public ReceiptsGetReceiptResponseDataReceiptLinesInner externalItemId(String externalItemId) {
    
    
    
    
    this.externalItemId = externalItemId;
    return this;
  }

   /**
   * The item ID available to the client
   * @return externalItemId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The item ID available to the client")

  public String getExternalItemId() {
    return externalItemId;
  }


  public void setExternalItemId(String externalItemId) {
    
    
    
    this.externalItemId = externalItemId;
  }


  public ReceiptsGetReceiptResponseDataReceiptLinesInner externalCategoryIds(List<String> externalCategoryIds) {
    
    
    
    
    this.externalCategoryIds = externalCategoryIds;
    return this;
  }

  public ReceiptsGetReceiptResponseDataReceiptLinesInner addExternalCategoryIdsItem(String externalCategoryIdsItem) {
    this.externalCategoryIds.add(externalCategoryIdsItem);
    return this;
  }

   /**
   * The list of category IDs available to the client
   * @return externalCategoryIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The list of category IDs available to the client")

  public List<String> getExternalCategoryIds() {
    return externalCategoryIds;
  }


  public void setExternalCategoryIds(List<String> externalCategoryIds) {
    
    
    
    this.externalCategoryIds = externalCategoryIds;
  }


  public ReceiptsGetReceiptResponseDataReceiptLinesInner quantity(Integer quantity) {
    
    
    
    
    this.quantity = quantity;
    return this;
  }

   /**
   * Quantity of this item
   * @return quantity
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Quantity of this item")

  public Integer getQuantity() {
    return quantity;
  }


  public void setQuantity(Integer quantity) {
    
    
    
    this.quantity = quantity;
  }


  public ReceiptsGetReceiptResponseDataReceiptLinesInner price(Integer price) {
    
    
    
    
    this.price = price;
    return this;
  }

   /**
   * Price in cents
   * @return price
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Price in cents")

  public Integer getPrice() {
    return price;
  }


  public void setPrice(Integer price) {
    
    
    
    this.price = price;
  }


  public ReceiptsGetReceiptResponseDataReceiptLinesInner grossItemPrice(Integer grossItemPrice) {
    
    
    
    
    this.grossItemPrice = grossItemPrice;
    return this;
  }

   /**
   * The item gross price in cents
   * @return grossItemPrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The item gross price in cents")

  public Integer getGrossItemPrice() {
    return grossItemPrice;
  }


  public void setGrossItemPrice(Integer grossItemPrice) {
    
    
    
    this.grossItemPrice = grossItemPrice;
  }


  public ReceiptsGetReceiptResponseDataReceiptLinesInner netItemPrice(Integer netItemPrice) {
    
    
    
    
    this.netItemPrice = netItemPrice;
    return this;
  }

   /**
   * The item net price pre-tax, post-discounts, pre-tips. In cents
   * @return netItemPrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The item net price pre-tax, post-discounts, pre-tips. In cents")

  public Integer getNetItemPrice() {
    return netItemPrice;
  }


  public void setNetItemPrice(Integer netItemPrice) {
    
    
    
    this.netItemPrice = netItemPrice;
  }


  public ReceiptsGetReceiptResponseDataReceiptLinesInner itemDiscount(Integer itemDiscount) {
    if (itemDiscount != null && itemDiscount < 0) {
      throw new IllegalArgumentException("Invalid value for itemDiscount. Must be greater than or equal to 0.");
    }
    
    
    
    this.itemDiscount = itemDiscount;
    return this;
  }

   /**
   * The item discount in cents
   * minimum: 0
   * @return itemDiscount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The item discount in cents")

  public Integer getItemDiscount() {
    return itemDiscount;
  }


  public void setItemDiscount(Integer itemDiscount) {
    if (itemDiscount != null && itemDiscount < 0) {
      throw new IllegalArgumentException("Invalid value for itemDiscount. Must be greater than or equal to 0.");
    }
    
    
    this.itemDiscount = itemDiscount;
  }


  public ReceiptsGetReceiptResponseDataReceiptLinesInner createdDate(OffsetDateTime createdDate) {
    
    
    
    
    this.createdDate = createdDate;
    return this;
  }

   /**
   * ISO8601 date and time in UTC when receipt was created in 7shifts system
   * @return createdDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-01-01T00:00Z", value = "ISO8601 date and time in UTC when receipt was created in 7shifts system")

  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }


  public void setCreatedDate(OffsetDateTime createdDate) {
    
    
    
    this.createdDate = createdDate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReceiptsGetReceiptResponseDataReceiptLinesInner instance itself
   */
  public ReceiptsGetReceiptResponseDataReceiptLinesInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReceiptsGetReceiptResponseDataReceiptLinesInner receiptsGetReceiptResponseDataReceiptLinesInner = (ReceiptsGetReceiptResponseDataReceiptLinesInner) o;
    return Objects.equals(this.id, receiptsGetReceiptResponseDataReceiptLinesInner.id) &&
        Objects.equals(this.locationId, receiptsGetReceiptResponseDataReceiptLinesInner.locationId) &&
        Objects.equals(this.externalItemId, receiptsGetReceiptResponseDataReceiptLinesInner.externalItemId) &&
        Objects.equals(this.externalCategoryIds, receiptsGetReceiptResponseDataReceiptLinesInner.externalCategoryIds) &&
        Objects.equals(this.quantity, receiptsGetReceiptResponseDataReceiptLinesInner.quantity) &&
        Objects.equals(this.price, receiptsGetReceiptResponseDataReceiptLinesInner.price) &&
        Objects.equals(this.grossItemPrice, receiptsGetReceiptResponseDataReceiptLinesInner.grossItemPrice) &&
        Objects.equals(this.netItemPrice, receiptsGetReceiptResponseDataReceiptLinesInner.netItemPrice) &&
        Objects.equals(this.itemDiscount, receiptsGetReceiptResponseDataReceiptLinesInner.itemDiscount) &&
        Objects.equals(this.createdDate, receiptsGetReceiptResponseDataReceiptLinesInner.createdDate)&&
        Objects.equals(this.additionalProperties, receiptsGetReceiptResponseDataReceiptLinesInner.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, locationId, externalItemId, externalCategoryIds, quantity, price, grossItemPrice, netItemPrice, itemDiscount, createdDate, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReceiptsGetReceiptResponseDataReceiptLinesInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    externalItemId: ").append(toIndentedString(externalItemId)).append("\n");
    sb.append("    externalCategoryIds: ").append(toIndentedString(externalCategoryIds)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    grossItemPrice: ").append(toIndentedString(grossItemPrice)).append("\n");
    sb.append("    netItemPrice: ").append(toIndentedString(netItemPrice)).append("\n");
    sb.append("    itemDiscount: ").append(toIndentedString(itemDiscount)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("location_id");
    openapiFields.add("external_item_id");
    openapiFields.add("external_category_ids");
    openapiFields.add("quantity");
    openapiFields.add("price");
    openapiFields.add("gross_item_price");
    openapiFields.add("net_item_price");
    openapiFields.add("item_discount");
    openapiFields.add("created_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("location_id");
    openapiRequiredFields.add("external_item_id");
    openapiRequiredFields.add("external_category_ids");
    openapiRequiredFields.add("quantity");
    openapiRequiredFields.add("price");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReceiptsGetReceiptResponseDataReceiptLinesInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReceiptsGetReceiptResponseDataReceiptLinesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReceiptsGetReceiptResponseDataReceiptLinesInner is not found in the empty JSON string", ReceiptsGetReceiptResponseDataReceiptLinesInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReceiptsGetReceiptResponseDataReceiptLinesInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonNull() && (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("external_item_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_item_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_item_id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("external_category_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("external_category_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_category_ids` to be an array in the JSON string but got `%s`", jsonObj.get("external_category_ids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReceiptsGetReceiptResponseDataReceiptLinesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReceiptsGetReceiptResponseDataReceiptLinesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReceiptsGetReceiptResponseDataReceiptLinesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReceiptsGetReceiptResponseDataReceiptLinesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ReceiptsGetReceiptResponseDataReceiptLinesInner>() {
           @Override
           public void write(JsonWriter out, ReceiptsGetReceiptResponseDataReceiptLinesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReceiptsGetReceiptResponseDataReceiptLinesInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ReceiptsGetReceiptResponseDataReceiptLinesInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReceiptsGetReceiptResponseDataReceiptLinesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReceiptsGetReceiptResponseDataReceiptLinesInner
  * @throws IOException if the JSON string is invalid with respect to ReceiptsGetReceiptResponseDataReceiptLinesInner
  */
  public static ReceiptsGetReceiptResponseDataReceiptLinesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReceiptsGetReceiptResponseDataReceiptLinesInner.class);
  }

 /**
  * Convert an instance of ReceiptsGetReceiptResponseDataReceiptLinesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

