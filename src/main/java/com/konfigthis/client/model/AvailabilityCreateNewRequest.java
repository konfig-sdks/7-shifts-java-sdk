/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AvailabilityCreateNewRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AvailabilityCreateNewRequest {
  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_WEEK = "week";
  @SerializedName(SERIALIZED_NAME_WEEK)
  private String week;

  public static final String SERIALIZED_NAME_WEEK_TO = "week_to";
  @SerializedName(SERIALIZED_NAME_WEEK_TO)
  private String weekTo;

  public static final String SERIALIZED_NAME_REPEAT = "repeat";
  @SerializedName(SERIALIZED_NAME_REPEAT)
  private Boolean repeat;

  public static final String SERIALIZED_NAME_MON = "mon";
  @SerializedName(SERIALIZED_NAME_MON)
  private Integer mon;

  public static final String SERIALIZED_NAME_MON_FROM = "mon_from";
  @SerializedName(SERIALIZED_NAME_MON_FROM)
  private String monFrom;

  public static final String SERIALIZED_NAME_MON_TO = "mon_to";
  @SerializedName(SERIALIZED_NAME_MON_TO)
  private String monTo;

  public static final String SERIALIZED_NAME_MON_COMMENTS = "mon_comments";
  @SerializedName(SERIALIZED_NAME_MON_COMMENTS)
  private String monComments;

  public static final String SERIALIZED_NAME_MON_REASON = "mon_reason";
  @SerializedName(SERIALIZED_NAME_MON_REASON)
  private String monReason;

  public static final String SERIALIZED_NAME_TUE = "tue";
  @SerializedName(SERIALIZED_NAME_TUE)
  private Integer tue;

  public static final String SERIALIZED_NAME_TUE_FROM = "tue_from";
  @SerializedName(SERIALIZED_NAME_TUE_FROM)
  private String tueFrom;

  public static final String SERIALIZED_NAME_TUE_TO = "tue_to";
  @SerializedName(SERIALIZED_NAME_TUE_TO)
  private String tueTo;

  public static final String SERIALIZED_NAME_TUE_COMMENTS = "tue_comments";
  @SerializedName(SERIALIZED_NAME_TUE_COMMENTS)
  private String tueComments;

  public static final String SERIALIZED_NAME_TUE_REASON = "tue_reason";
  @SerializedName(SERIALIZED_NAME_TUE_REASON)
  private String tueReason;

  public static final String SERIALIZED_NAME_WED = "wed";
  @SerializedName(SERIALIZED_NAME_WED)
  private Integer wed;

  public static final String SERIALIZED_NAME_WED_FROM = "wed_from";
  @SerializedName(SERIALIZED_NAME_WED_FROM)
  private String wedFrom;

  public static final String SERIALIZED_NAME_WED_TO = "wed_to";
  @SerializedName(SERIALIZED_NAME_WED_TO)
  private String wedTo;

  public static final String SERIALIZED_NAME_WED_COMMENTS = "wed_comments";
  @SerializedName(SERIALIZED_NAME_WED_COMMENTS)
  private String wedComments;

  public static final String SERIALIZED_NAME_WED_REASON = "wed_reason";
  @SerializedName(SERIALIZED_NAME_WED_REASON)
  private String wedReason;

  public static final String SERIALIZED_NAME_THU = "thu";
  @SerializedName(SERIALIZED_NAME_THU)
  private Integer thu;

  public static final String SERIALIZED_NAME_THU_FROM = "thu_from";
  @SerializedName(SERIALIZED_NAME_THU_FROM)
  private String thuFrom;

  public static final String SERIALIZED_NAME_THU_TO = "thu_to";
  @SerializedName(SERIALIZED_NAME_THU_TO)
  private String thuTo;

  public static final String SERIALIZED_NAME_THU_COMMENTS = "thu_comments";
  @SerializedName(SERIALIZED_NAME_THU_COMMENTS)
  private String thuComments;

  public static final String SERIALIZED_NAME_THU_REASON = "thu_reason";
  @SerializedName(SERIALIZED_NAME_THU_REASON)
  private String thuReason;

  public static final String SERIALIZED_NAME_FRI = "fri";
  @SerializedName(SERIALIZED_NAME_FRI)
  private Integer fri;

  public static final String SERIALIZED_NAME_FRI_FROM = "fri_from";
  @SerializedName(SERIALIZED_NAME_FRI_FROM)
  private String friFrom;

  public static final String SERIALIZED_NAME_FRI_TO = "fri_to";
  @SerializedName(SERIALIZED_NAME_FRI_TO)
  private String friTo;

  public static final String SERIALIZED_NAME_FRI_COMMENTS = "fri_comments";
  @SerializedName(SERIALIZED_NAME_FRI_COMMENTS)
  private String friComments;

  public static final String SERIALIZED_NAME_FRI_REASON = "fri_reason";
  @SerializedName(SERIALIZED_NAME_FRI_REASON)
  private String friReason;

  public static final String SERIALIZED_NAME_SAT = "sat";
  @SerializedName(SERIALIZED_NAME_SAT)
  private Integer sat;

  public static final String SERIALIZED_NAME_SAT_FROM = "sat_from";
  @SerializedName(SERIALIZED_NAME_SAT_FROM)
  private String satFrom;

  public static final String SERIALIZED_NAME_SAT_TO = "sat_to";
  @SerializedName(SERIALIZED_NAME_SAT_TO)
  private String satTo;

  public static final String SERIALIZED_NAME_SAT_COMMENTS = "sat_comments";
  @SerializedName(SERIALIZED_NAME_SAT_COMMENTS)
  private String satComments;

  public static final String SERIALIZED_NAME_SAT_REASON = "sat_reason";
  @SerializedName(SERIALIZED_NAME_SAT_REASON)
  private String satReason;

  public static final String SERIALIZED_NAME_SUN = "sun";
  @SerializedName(SERIALIZED_NAME_SUN)
  private Integer sun;

  public static final String SERIALIZED_NAME_SUN_FROM = "sun_from";
  @SerializedName(SERIALIZED_NAME_SUN_FROM)
  private String sunFrom;

  public static final String SERIALIZED_NAME_SUN_TO = "sun_to";
  @SerializedName(SERIALIZED_NAME_SUN_TO)
  private String sunTo;

  public static final String SERIALIZED_NAME_SUN_COMMENTS = "sun_comments";
  @SerializedName(SERIALIZED_NAME_SUN_COMMENTS)
  private String sunComments;

  public static final String SERIALIZED_NAME_SUN_REASON = "sun_reason";
  @SerializedName(SERIALIZED_NAME_SUN_REASON)
  private String sunReason;

  public AvailabilityCreateNewRequest() {
  }

  public AvailabilityCreateNewRequest userId(Integer userId) {
    
    
    
    
    this.userId = userId;
    return this;
  }

   /**
   * User ID
   * @return userId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "User ID")

  public Integer getUserId() {
    return userId;
  }


  public void setUserId(Integer userId) {
    
    
    
    this.userId = userId;
  }


  public AvailabilityCreateNewRequest week(String week) {
    
    
    
    
    this.week = week;
    return this;
  }

   /**
   * Week date of the availability
   * @return week
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Week date of the availability")

  public String getWeek() {
    return week;
  }


  public void setWeek(String week) {
    
    
    
    this.week = week;
  }


  public AvailabilityCreateNewRequest weekTo(String weekTo) {
    
    
    
    
    this.weekTo = weekTo;
    return this;
  }

   /**
   * Week to date of the availability
   * @return weekTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Week to date of the availability")

  public String getWeekTo() {
    return weekTo;
  }


  public void setWeekTo(String weekTo) {
    
    
    
    this.weekTo = weekTo;
  }


  public AvailabilityCreateNewRequest repeat(Boolean repeat) {
    
    
    
    
    this.repeat = repeat;
    return this;
  }

   /**
   * If true, availability is repeating
   * @return repeat
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "If true, availability is repeating")

  public Boolean getRepeat() {
    return repeat;
  }


  public void setRepeat(Boolean repeat) {
    
    
    
    this.repeat = repeat;
  }


  public AvailabilityCreateNewRequest mon(Integer mon) {
    
    
    
    
    this.mon = mon;
    return this;
  }

   /**
   * The availability status for the day
   * @return mon
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The availability status for the day")

  public Integer getMon() {
    return mon;
  }


  public void setMon(Integer mon) {
    
    
    
    this.mon = mon;
  }


  public AvailabilityCreateNewRequest monFrom(String monFrom) {
    
    
    
    
    this.monFrom = monFrom;
    return this;
  }

   /**
   * The start time of the availability for the day
   * @return monFrom
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The start time of the availability for the day")

  public String getMonFrom() {
    return monFrom;
  }


  public void setMonFrom(String monFrom) {
    
    
    
    this.monFrom = monFrom;
  }


  public AvailabilityCreateNewRequest monTo(String monTo) {
    
    
    
    
    this.monTo = monTo;
    return this;
  }

   /**
   * The end time of the availability for the day
   * @return monTo
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The end time of the availability for the day")

  public String getMonTo() {
    return monTo;
  }


  public void setMonTo(String monTo) {
    
    
    
    this.monTo = monTo;
  }


  public AvailabilityCreateNewRequest monComments(String monComments) {
    
    
    
    
    this.monComments = monComments;
    return this;
  }

   /**
   * Comments included in the days availability
   * @return monComments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "Comments included in the days availability")

  public String getMonComments() {
    return monComments;
  }


  public void setMonComments(String monComments) {
    
    
    
    this.monComments = monComments;
  }


  public AvailabilityCreateNewRequest monReason(String monReason) {
    
    
    
    
    this.monReason = monReason;
    return this;
  }

   /**
   * The reason ID for the day
   * @return monReason
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The reason ID for the day")

  public String getMonReason() {
    return monReason;
  }


  public void setMonReason(String monReason) {
    
    
    
    this.monReason = monReason;
  }


  public AvailabilityCreateNewRequest tue(Integer tue) {
    
    
    
    
    this.tue = tue;
    return this;
  }

   /**
   * The availability status for the day
   * @return tue
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The availability status for the day")

  public Integer getTue() {
    return tue;
  }


  public void setTue(Integer tue) {
    
    
    
    this.tue = tue;
  }


  public AvailabilityCreateNewRequest tueFrom(String tueFrom) {
    
    
    
    
    this.tueFrom = tueFrom;
    return this;
  }

   /**
   * The start time of the availability for the day
   * @return tueFrom
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The start time of the availability for the day")

  public String getTueFrom() {
    return tueFrom;
  }


  public void setTueFrom(String tueFrom) {
    
    
    
    this.tueFrom = tueFrom;
  }


  public AvailabilityCreateNewRequest tueTo(String tueTo) {
    
    
    
    
    this.tueTo = tueTo;
    return this;
  }

   /**
   * The end time of the availability for the day
   * @return tueTo
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The end time of the availability for the day")

  public String getTueTo() {
    return tueTo;
  }


  public void setTueTo(String tueTo) {
    
    
    
    this.tueTo = tueTo;
  }


  public AvailabilityCreateNewRequest tueComments(String tueComments) {
    
    
    
    
    this.tueComments = tueComments;
    return this;
  }

   /**
   * Comments included in the days availability
   * @return tueComments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "Comments included in the days availability")

  public String getTueComments() {
    return tueComments;
  }


  public void setTueComments(String tueComments) {
    
    
    
    this.tueComments = tueComments;
  }


  public AvailabilityCreateNewRequest tueReason(String tueReason) {
    
    
    
    
    this.tueReason = tueReason;
    return this;
  }

   /**
   * The reason ID for the day
   * @return tueReason
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The reason ID for the day")

  public String getTueReason() {
    return tueReason;
  }


  public void setTueReason(String tueReason) {
    
    
    
    this.tueReason = tueReason;
  }


  public AvailabilityCreateNewRequest wed(Integer wed) {
    
    
    
    
    this.wed = wed;
    return this;
  }

   /**
   * The availability status for the day
   * @return wed
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The availability status for the day")

  public Integer getWed() {
    return wed;
  }


  public void setWed(Integer wed) {
    
    
    
    this.wed = wed;
  }


  public AvailabilityCreateNewRequest wedFrom(String wedFrom) {
    
    
    
    
    this.wedFrom = wedFrom;
    return this;
  }

   /**
   * The start time of the availability for the day
   * @return wedFrom
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The start time of the availability for the day")

  public String getWedFrom() {
    return wedFrom;
  }


  public void setWedFrom(String wedFrom) {
    
    
    
    this.wedFrom = wedFrom;
  }


  public AvailabilityCreateNewRequest wedTo(String wedTo) {
    
    
    
    
    this.wedTo = wedTo;
    return this;
  }

   /**
   * The end time of the availability for the day
   * @return wedTo
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The end time of the availability for the day")

  public String getWedTo() {
    return wedTo;
  }


  public void setWedTo(String wedTo) {
    
    
    
    this.wedTo = wedTo;
  }


  public AvailabilityCreateNewRequest wedComments(String wedComments) {
    
    
    
    
    this.wedComments = wedComments;
    return this;
  }

   /**
   * Comments included in the days availability
   * @return wedComments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "Comments included in the days availability")

  public String getWedComments() {
    return wedComments;
  }


  public void setWedComments(String wedComments) {
    
    
    
    this.wedComments = wedComments;
  }


  public AvailabilityCreateNewRequest wedReason(String wedReason) {
    
    
    
    
    this.wedReason = wedReason;
    return this;
  }

   /**
   * The reason ID for the day
   * @return wedReason
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The reason ID for the day")

  public String getWedReason() {
    return wedReason;
  }


  public void setWedReason(String wedReason) {
    
    
    
    this.wedReason = wedReason;
  }


  public AvailabilityCreateNewRequest thu(Integer thu) {
    
    
    
    
    this.thu = thu;
    return this;
  }

   /**
   * The availability status for the day
   * @return thu
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The availability status for the day")

  public Integer getThu() {
    return thu;
  }


  public void setThu(Integer thu) {
    
    
    
    this.thu = thu;
  }


  public AvailabilityCreateNewRequest thuFrom(String thuFrom) {
    
    
    
    
    this.thuFrom = thuFrom;
    return this;
  }

   /**
   * The start time of the availability for the day
   * @return thuFrom
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The start time of the availability for the day")

  public String getThuFrom() {
    return thuFrom;
  }


  public void setThuFrom(String thuFrom) {
    
    
    
    this.thuFrom = thuFrom;
  }


  public AvailabilityCreateNewRequest thuTo(String thuTo) {
    
    
    
    
    this.thuTo = thuTo;
    return this;
  }

   /**
   * The end time of the availability for the day
   * @return thuTo
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The end time of the availability for the day")

  public String getThuTo() {
    return thuTo;
  }


  public void setThuTo(String thuTo) {
    
    
    
    this.thuTo = thuTo;
  }


  public AvailabilityCreateNewRequest thuComments(String thuComments) {
    
    
    
    
    this.thuComments = thuComments;
    return this;
  }

   /**
   * Comments included in the days availability
   * @return thuComments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "Comments included in the days availability")

  public String getThuComments() {
    return thuComments;
  }


  public void setThuComments(String thuComments) {
    
    
    
    this.thuComments = thuComments;
  }


  public AvailabilityCreateNewRequest thuReason(String thuReason) {
    
    
    
    
    this.thuReason = thuReason;
    return this;
  }

   /**
   * The reason ID for the day
   * @return thuReason
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The reason ID for the day")

  public String getThuReason() {
    return thuReason;
  }


  public void setThuReason(String thuReason) {
    
    
    
    this.thuReason = thuReason;
  }


  public AvailabilityCreateNewRequest fri(Integer fri) {
    
    
    
    
    this.fri = fri;
    return this;
  }

   /**
   * The availability status for the day
   * @return fri
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The availability status for the day")

  public Integer getFri() {
    return fri;
  }


  public void setFri(Integer fri) {
    
    
    
    this.fri = fri;
  }


  public AvailabilityCreateNewRequest friFrom(String friFrom) {
    
    
    
    
    this.friFrom = friFrom;
    return this;
  }

   /**
   * The start time of the availability for the day
   * @return friFrom
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The start time of the availability for the day")

  public String getFriFrom() {
    return friFrom;
  }


  public void setFriFrom(String friFrom) {
    
    
    
    this.friFrom = friFrom;
  }


  public AvailabilityCreateNewRequest friTo(String friTo) {
    
    
    
    
    this.friTo = friTo;
    return this;
  }

   /**
   * The end time of the availability for the day
   * @return friTo
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The end time of the availability for the day")

  public String getFriTo() {
    return friTo;
  }


  public void setFriTo(String friTo) {
    
    
    
    this.friTo = friTo;
  }


  public AvailabilityCreateNewRequest friComments(String friComments) {
    
    
    
    
    this.friComments = friComments;
    return this;
  }

   /**
   * Comments included in the days availability
   * @return friComments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "Comments included in the days availability")

  public String getFriComments() {
    return friComments;
  }


  public void setFriComments(String friComments) {
    
    
    
    this.friComments = friComments;
  }


  public AvailabilityCreateNewRequest friReason(String friReason) {
    
    
    
    
    this.friReason = friReason;
    return this;
  }

   /**
   * The reason ID for the day
   * @return friReason
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The reason ID for the day")

  public String getFriReason() {
    return friReason;
  }


  public void setFriReason(String friReason) {
    
    
    
    this.friReason = friReason;
  }


  public AvailabilityCreateNewRequest sat(Integer sat) {
    
    
    
    
    this.sat = sat;
    return this;
  }

   /**
   * The availability status for the day
   * @return sat
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The availability status for the day")

  public Integer getSat() {
    return sat;
  }


  public void setSat(Integer sat) {
    
    
    
    this.sat = sat;
  }


  public AvailabilityCreateNewRequest satFrom(String satFrom) {
    
    
    
    
    this.satFrom = satFrom;
    return this;
  }

   /**
   * The start time of the availability for the day
   * @return satFrom
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The start time of the availability for the day")

  public String getSatFrom() {
    return satFrom;
  }


  public void setSatFrom(String satFrom) {
    
    
    
    this.satFrom = satFrom;
  }


  public AvailabilityCreateNewRequest satTo(String satTo) {
    
    
    
    
    this.satTo = satTo;
    return this;
  }

   /**
   * The end time of the availability for the day
   * @return satTo
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The end time of the availability for the day")

  public String getSatTo() {
    return satTo;
  }


  public void setSatTo(String satTo) {
    
    
    
    this.satTo = satTo;
  }


  public AvailabilityCreateNewRequest satComments(String satComments) {
    
    
    
    
    this.satComments = satComments;
    return this;
  }

   /**
   * Comments included in the days availability
   * @return satComments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "Comments included in the days availability")

  public String getSatComments() {
    return satComments;
  }


  public void setSatComments(String satComments) {
    
    
    
    this.satComments = satComments;
  }


  public AvailabilityCreateNewRequest satReason(String satReason) {
    
    
    
    
    this.satReason = satReason;
    return this;
  }

   /**
   * The reason ID for the day
   * @return satReason
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The reason ID for the day")

  public String getSatReason() {
    return satReason;
  }


  public void setSatReason(String satReason) {
    
    
    
    this.satReason = satReason;
  }


  public AvailabilityCreateNewRequest sun(Integer sun) {
    
    
    
    
    this.sun = sun;
    return this;
  }

   /**
   * The availability status for the day
   * @return sun
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The availability status for the day")

  public Integer getSun() {
    return sun;
  }


  public void setSun(Integer sun) {
    
    
    
    this.sun = sun;
  }


  public AvailabilityCreateNewRequest sunFrom(String sunFrom) {
    
    
    
    
    this.sunFrom = sunFrom;
    return this;
  }

   /**
   * The start time of the availability for the day
   * @return sunFrom
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The start time of the availability for the day")

  public String getSunFrom() {
    return sunFrom;
  }


  public void setSunFrom(String sunFrom) {
    
    
    
    this.sunFrom = sunFrom;
  }


  public AvailabilityCreateNewRequest sunTo(String sunTo) {
    
    
    
    
    this.sunTo = sunTo;
    return this;
  }

   /**
   * The end time of the availability for the day
   * @return sunTo
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The end time of the availability for the day")

  public String getSunTo() {
    return sunTo;
  }


  public void setSunTo(String sunTo) {
    
    
    
    this.sunTo = sunTo;
  }


  public AvailabilityCreateNewRequest sunComments(String sunComments) {
    
    
    
    
    this.sunComments = sunComments;
    return this;
  }

   /**
   * Comments included in the days availability
   * @return sunComments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "Comments included in the days availability")

  public String getSunComments() {
    return sunComments;
  }


  public void setSunComments(String sunComments) {
    
    
    
    this.sunComments = sunComments;
  }


  public AvailabilityCreateNewRequest sunReason(String sunReason) {
    
    
    
    
    this.sunReason = sunReason;
    return this;
  }

   /**
   * The reason ID for the day
   * @return sunReason
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The reason ID for the day")

  public String getSunReason() {
    return sunReason;
  }


  public void setSunReason(String sunReason) {
    
    
    
    this.sunReason = sunReason;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AvailabilityCreateNewRequest instance itself
   */
  public AvailabilityCreateNewRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailabilityCreateNewRequest availabilityCreateNewRequest = (AvailabilityCreateNewRequest) o;
    return Objects.equals(this.userId, availabilityCreateNewRequest.userId) &&
        Objects.equals(this.week, availabilityCreateNewRequest.week) &&
        Objects.equals(this.weekTo, availabilityCreateNewRequest.weekTo) &&
        Objects.equals(this.repeat, availabilityCreateNewRequest.repeat) &&
        Objects.equals(this.mon, availabilityCreateNewRequest.mon) &&
        Objects.equals(this.monFrom, availabilityCreateNewRequest.monFrom) &&
        Objects.equals(this.monTo, availabilityCreateNewRequest.monTo) &&
        Objects.equals(this.monComments, availabilityCreateNewRequest.monComments) &&
        Objects.equals(this.monReason, availabilityCreateNewRequest.monReason) &&
        Objects.equals(this.tue, availabilityCreateNewRequest.tue) &&
        Objects.equals(this.tueFrom, availabilityCreateNewRequest.tueFrom) &&
        Objects.equals(this.tueTo, availabilityCreateNewRequest.tueTo) &&
        Objects.equals(this.tueComments, availabilityCreateNewRequest.tueComments) &&
        Objects.equals(this.tueReason, availabilityCreateNewRequest.tueReason) &&
        Objects.equals(this.wed, availabilityCreateNewRequest.wed) &&
        Objects.equals(this.wedFrom, availabilityCreateNewRequest.wedFrom) &&
        Objects.equals(this.wedTo, availabilityCreateNewRequest.wedTo) &&
        Objects.equals(this.wedComments, availabilityCreateNewRequest.wedComments) &&
        Objects.equals(this.wedReason, availabilityCreateNewRequest.wedReason) &&
        Objects.equals(this.thu, availabilityCreateNewRequest.thu) &&
        Objects.equals(this.thuFrom, availabilityCreateNewRequest.thuFrom) &&
        Objects.equals(this.thuTo, availabilityCreateNewRequest.thuTo) &&
        Objects.equals(this.thuComments, availabilityCreateNewRequest.thuComments) &&
        Objects.equals(this.thuReason, availabilityCreateNewRequest.thuReason) &&
        Objects.equals(this.fri, availabilityCreateNewRequest.fri) &&
        Objects.equals(this.friFrom, availabilityCreateNewRequest.friFrom) &&
        Objects.equals(this.friTo, availabilityCreateNewRequest.friTo) &&
        Objects.equals(this.friComments, availabilityCreateNewRequest.friComments) &&
        Objects.equals(this.friReason, availabilityCreateNewRequest.friReason) &&
        Objects.equals(this.sat, availabilityCreateNewRequest.sat) &&
        Objects.equals(this.satFrom, availabilityCreateNewRequest.satFrom) &&
        Objects.equals(this.satTo, availabilityCreateNewRequest.satTo) &&
        Objects.equals(this.satComments, availabilityCreateNewRequest.satComments) &&
        Objects.equals(this.satReason, availabilityCreateNewRequest.satReason) &&
        Objects.equals(this.sun, availabilityCreateNewRequest.sun) &&
        Objects.equals(this.sunFrom, availabilityCreateNewRequest.sunFrom) &&
        Objects.equals(this.sunTo, availabilityCreateNewRequest.sunTo) &&
        Objects.equals(this.sunComments, availabilityCreateNewRequest.sunComments) &&
        Objects.equals(this.sunReason, availabilityCreateNewRequest.sunReason)&&
        Objects.equals(this.additionalProperties, availabilityCreateNewRequest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(userId, week, weekTo, repeat, mon, monFrom, monTo, monComments, monReason, tue, tueFrom, tueTo, tueComments, tueReason, wed, wedFrom, wedTo, wedComments, wedReason, thu, thuFrom, thuTo, thuComments, thuReason, fri, friFrom, friTo, friComments, friReason, sat, satFrom, satTo, satComments, satReason, sun, sunFrom, sunTo, sunComments, sunReason, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailabilityCreateNewRequest {\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    week: ").append(toIndentedString(week)).append("\n");
    sb.append("    weekTo: ").append(toIndentedString(weekTo)).append("\n");
    sb.append("    repeat: ").append(toIndentedString(repeat)).append("\n");
    sb.append("    mon: ").append(toIndentedString(mon)).append("\n");
    sb.append("    monFrom: ").append(toIndentedString(monFrom)).append("\n");
    sb.append("    monTo: ").append(toIndentedString(monTo)).append("\n");
    sb.append("    monComments: ").append(toIndentedString(monComments)).append("\n");
    sb.append("    monReason: ").append(toIndentedString(monReason)).append("\n");
    sb.append("    tue: ").append(toIndentedString(tue)).append("\n");
    sb.append("    tueFrom: ").append(toIndentedString(tueFrom)).append("\n");
    sb.append("    tueTo: ").append(toIndentedString(tueTo)).append("\n");
    sb.append("    tueComments: ").append(toIndentedString(tueComments)).append("\n");
    sb.append("    tueReason: ").append(toIndentedString(tueReason)).append("\n");
    sb.append("    wed: ").append(toIndentedString(wed)).append("\n");
    sb.append("    wedFrom: ").append(toIndentedString(wedFrom)).append("\n");
    sb.append("    wedTo: ").append(toIndentedString(wedTo)).append("\n");
    sb.append("    wedComments: ").append(toIndentedString(wedComments)).append("\n");
    sb.append("    wedReason: ").append(toIndentedString(wedReason)).append("\n");
    sb.append("    thu: ").append(toIndentedString(thu)).append("\n");
    sb.append("    thuFrom: ").append(toIndentedString(thuFrom)).append("\n");
    sb.append("    thuTo: ").append(toIndentedString(thuTo)).append("\n");
    sb.append("    thuComments: ").append(toIndentedString(thuComments)).append("\n");
    sb.append("    thuReason: ").append(toIndentedString(thuReason)).append("\n");
    sb.append("    fri: ").append(toIndentedString(fri)).append("\n");
    sb.append("    friFrom: ").append(toIndentedString(friFrom)).append("\n");
    sb.append("    friTo: ").append(toIndentedString(friTo)).append("\n");
    sb.append("    friComments: ").append(toIndentedString(friComments)).append("\n");
    sb.append("    friReason: ").append(toIndentedString(friReason)).append("\n");
    sb.append("    sat: ").append(toIndentedString(sat)).append("\n");
    sb.append("    satFrom: ").append(toIndentedString(satFrom)).append("\n");
    sb.append("    satTo: ").append(toIndentedString(satTo)).append("\n");
    sb.append("    satComments: ").append(toIndentedString(satComments)).append("\n");
    sb.append("    satReason: ").append(toIndentedString(satReason)).append("\n");
    sb.append("    sun: ").append(toIndentedString(sun)).append("\n");
    sb.append("    sunFrom: ").append(toIndentedString(sunFrom)).append("\n");
    sb.append("    sunTo: ").append(toIndentedString(sunTo)).append("\n");
    sb.append("    sunComments: ").append(toIndentedString(sunComments)).append("\n");
    sb.append("    sunReason: ").append(toIndentedString(sunReason)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("user_id");
    openapiFields.add("week");
    openapiFields.add("week_to");
    openapiFields.add("repeat");
    openapiFields.add("mon");
    openapiFields.add("mon_from");
    openapiFields.add("mon_to");
    openapiFields.add("mon_comments");
    openapiFields.add("mon_reason");
    openapiFields.add("tue");
    openapiFields.add("tue_from");
    openapiFields.add("tue_to");
    openapiFields.add("tue_comments");
    openapiFields.add("tue_reason");
    openapiFields.add("wed");
    openapiFields.add("wed_from");
    openapiFields.add("wed_to");
    openapiFields.add("wed_comments");
    openapiFields.add("wed_reason");
    openapiFields.add("thu");
    openapiFields.add("thu_from");
    openapiFields.add("thu_to");
    openapiFields.add("thu_comments");
    openapiFields.add("thu_reason");
    openapiFields.add("fri");
    openapiFields.add("fri_from");
    openapiFields.add("fri_to");
    openapiFields.add("fri_comments");
    openapiFields.add("fri_reason");
    openapiFields.add("sat");
    openapiFields.add("sat_from");
    openapiFields.add("sat_to");
    openapiFields.add("sat_comments");
    openapiFields.add("sat_reason");
    openapiFields.add("sun");
    openapiFields.add("sun_from");
    openapiFields.add("sun_to");
    openapiFields.add("sun_comments");
    openapiFields.add("sun_reason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("user_id");
    openapiRequiredFields.add("repeat");
    openapiRequiredFields.add("mon");
    openapiRequiredFields.add("mon_from");
    openapiRequiredFields.add("mon_to");
    openapiRequiredFields.add("mon_comments");
    openapiRequiredFields.add("mon_reason");
    openapiRequiredFields.add("tue");
    openapiRequiredFields.add("tue_from");
    openapiRequiredFields.add("tue_to");
    openapiRequiredFields.add("tue_comments");
    openapiRequiredFields.add("tue_reason");
    openapiRequiredFields.add("wed");
    openapiRequiredFields.add("wed_from");
    openapiRequiredFields.add("wed_to");
    openapiRequiredFields.add("wed_comments");
    openapiRequiredFields.add("wed_reason");
    openapiRequiredFields.add("thu");
    openapiRequiredFields.add("thu_from");
    openapiRequiredFields.add("thu_to");
    openapiRequiredFields.add("thu_comments");
    openapiRequiredFields.add("thu_reason");
    openapiRequiredFields.add("fri");
    openapiRequiredFields.add("fri_from");
    openapiRequiredFields.add("fri_to");
    openapiRequiredFields.add("fri_comments");
    openapiRequiredFields.add("fri_reason");
    openapiRequiredFields.add("sat");
    openapiRequiredFields.add("sat_from");
    openapiRequiredFields.add("sat_to");
    openapiRequiredFields.add("sat_comments");
    openapiRequiredFields.add("sat_reason");
    openapiRequiredFields.add("sun");
    openapiRequiredFields.add("sun_from");
    openapiRequiredFields.add("sun_to");
    openapiRequiredFields.add("sun_comments");
    openapiRequiredFields.add("sun_reason");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AvailabilityCreateNewRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AvailabilityCreateNewRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AvailabilityCreateNewRequest is not found in the empty JSON string", AvailabilityCreateNewRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AvailabilityCreateNewRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("week").isJsonNull() && (jsonObj.get("week") != null && !jsonObj.get("week").isJsonNull()) && !jsonObj.get("week").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `week` to be a primitive type in the JSON string but got `%s`", jsonObj.get("week").toString()));
      }
      if (!jsonObj.get("week_to").isJsonNull() && (jsonObj.get("week_to") != null && !jsonObj.get("week_to").isJsonNull()) && !jsonObj.get("week_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `week_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("week_to").toString()));
      }
      if (!jsonObj.get("mon_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mon_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mon_from").toString()));
      }
      if (!jsonObj.get("mon_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mon_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mon_to").toString()));
      }
      if (!jsonObj.get("mon_comments").isJsonNull() && !jsonObj.get("mon_comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mon_comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mon_comments").toString()));
      }
      if (!jsonObj.get("mon_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mon_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mon_reason").toString()));
      }
      if (!jsonObj.get("tue_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tue_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tue_from").toString()));
      }
      if (!jsonObj.get("tue_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tue_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tue_to").toString()));
      }
      if (!jsonObj.get("tue_comments").isJsonNull() && !jsonObj.get("tue_comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tue_comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tue_comments").toString()));
      }
      if (!jsonObj.get("tue_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tue_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tue_reason").toString()));
      }
      if (!jsonObj.get("wed_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wed_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wed_from").toString()));
      }
      if (!jsonObj.get("wed_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wed_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wed_to").toString()));
      }
      if (!jsonObj.get("wed_comments").isJsonNull() && !jsonObj.get("wed_comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wed_comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wed_comments").toString()));
      }
      if (!jsonObj.get("wed_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wed_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wed_reason").toString()));
      }
      if (!jsonObj.get("thu_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thu_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thu_from").toString()));
      }
      if (!jsonObj.get("thu_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thu_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thu_to").toString()));
      }
      if (!jsonObj.get("thu_comments").isJsonNull() && !jsonObj.get("thu_comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thu_comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thu_comments").toString()));
      }
      if (!jsonObj.get("thu_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thu_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thu_reason").toString()));
      }
      if (!jsonObj.get("fri_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fri_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fri_from").toString()));
      }
      if (!jsonObj.get("fri_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fri_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fri_to").toString()));
      }
      if (!jsonObj.get("fri_comments").isJsonNull() && !jsonObj.get("fri_comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fri_comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fri_comments").toString()));
      }
      if (!jsonObj.get("fri_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fri_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fri_reason").toString()));
      }
      if (!jsonObj.get("sat_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sat_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sat_from").toString()));
      }
      if (!jsonObj.get("sat_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sat_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sat_to").toString()));
      }
      if (!jsonObj.get("sat_comments").isJsonNull() && !jsonObj.get("sat_comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sat_comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sat_comments").toString()));
      }
      if (!jsonObj.get("sat_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sat_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sat_reason").toString()));
      }
      if (!jsonObj.get("sun_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sun_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sun_from").toString()));
      }
      if (!jsonObj.get("sun_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sun_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sun_to").toString()));
      }
      if (!jsonObj.get("sun_comments").isJsonNull() && !jsonObj.get("sun_comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sun_comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sun_comments").toString()));
      }
      if (!jsonObj.get("sun_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sun_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sun_reason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AvailabilityCreateNewRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AvailabilityCreateNewRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AvailabilityCreateNewRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AvailabilityCreateNewRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AvailabilityCreateNewRequest>() {
           @Override
           public void write(JsonWriter out, AvailabilityCreateNewRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AvailabilityCreateNewRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AvailabilityCreateNewRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AvailabilityCreateNewRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AvailabilityCreateNewRequest
  * @throws IOException if the JSON string is invalid with respect to AvailabilityCreateNewRequest
  */
  public static AvailabilityCreateNewRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AvailabilityCreateNewRequest.class);
  }

 /**
  * Convert an instance of AvailabilityCreateNewRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

