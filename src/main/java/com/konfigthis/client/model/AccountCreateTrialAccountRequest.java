/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AccountCreateTrialAccountRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AccountCreateTrialAccountRequest {
  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRSTNAME = "firstname";
  @SerializedName(SERIALIZED_NAME_FIRSTNAME)
  private String firstname;

  public static final String SERIALIZED_NAME_LASTNAME = "lastname";
  @SerializedName(SERIALIZED_NAME_LASTNAME)
  private String lastname;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "company_name";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  /**
   * The company&#39;s country
   */
  @JsonAdapter(CountryEnum.Adapter.class)
 public enum CountryEnum {
    CA("CA"),
    
    US("US");

    private String value;

    CountryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CountryEnum fromValue(String value) {
      for (CountryEnum b : CountryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CountryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CountryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CountryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CountryEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private CountryEnum country;

  public static final String SERIALIZED_NAME_MOBILE_PHONE = "mobile_phone";
  @SerializedName(SERIALIZED_NAME_MOBILE_PHONE)
  private String mobilePhone;

  public static final String SERIALIZED_NAME_UTM_CAMPAIGN = "utm_campaign";
  @SerializedName(SERIALIZED_NAME_UTM_CAMPAIGN)
  private String utmCampaign;

  public static final String SERIALIZED_NAME_UTM_CONTENT = "utm_content";
  @SerializedName(SERIALIZED_NAME_UTM_CONTENT)
  private String utmContent;

  public static final String SERIALIZED_NAME_UTM_MEDIUM = "utm_medium";
  @SerializedName(SERIALIZED_NAME_UTM_MEDIUM)
  private String utmMedium;

  public static final String SERIALIZED_NAME_UTM_SOURCE = "utm_source";
  @SerializedName(SERIALIZED_NAME_UTM_SOURCE)
  private String utmSource;

  public static final String SERIALIZED_NAME_UTM_TERM = "utm_term";
  @SerializedName(SERIALIZED_NAME_UTM_TERM)
  private String utmTerm;

  public AccountCreateTrialAccountRequest() {
  }

  public AccountCreateTrialAccountRequest email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * The user&#39;s email
   * @return email
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The user's email")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public AccountCreateTrialAccountRequest firstname(String firstname) {
    
    
    
    
    this.firstname = firstname;
    return this;
  }

   /**
   * The user&#39;s first name
   * @return firstname
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The user's first name")

  public String getFirstname() {
    return firstname;
  }


  public void setFirstname(String firstname) {
    
    
    
    this.firstname = firstname;
  }


  public AccountCreateTrialAccountRequest lastname(String lastname) {
    
    
    
    
    this.lastname = lastname;
    return this;
  }

   /**
   * The user&#39;s last name
   * @return lastname
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The user's last name")

  public String getLastname() {
    return lastname;
  }


  public void setLastname(String lastname) {
    
    
    
    this.lastname = lastname;
  }


  public AccountCreateTrialAccountRequest companyName(String companyName) {
    
    
    
    
    this.companyName = companyName;
    return this;
  }

   /**
   * The company&#39;s name
   * @return companyName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The company's name")

  public String getCompanyName() {
    return companyName;
  }


  public void setCompanyName(String companyName) {
    
    
    
    this.companyName = companyName;
  }


  public AccountCreateTrialAccountRequest country(CountryEnum country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * The company&#39;s country
   * @return country
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The company's country")

  public CountryEnum getCountry() {
    return country;
  }


  public void setCountry(CountryEnum country) {
    
    
    
    this.country = country;
  }


  public AccountCreateTrialAccountRequest mobilePhone(String mobilePhone) {
    
    
    
    
    this.mobilePhone = mobilePhone;
    return this;
  }

   /**
   * The user&#39;s mobile phone
   * @return mobilePhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user's mobile phone")

  public String getMobilePhone() {
    return mobilePhone;
  }


  public void setMobilePhone(String mobilePhone) {
    
    
    
    this.mobilePhone = mobilePhone;
  }


  public AccountCreateTrialAccountRequest utmCampaign(String utmCampaign) {
    
    
    
    
    this.utmCampaign = utmCampaign;
    return this;
  }

   /**
   * The UTM campaign
   * @return utmCampaign
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The UTM campaign")

  public String getUtmCampaign() {
    return utmCampaign;
  }


  public void setUtmCampaign(String utmCampaign) {
    
    
    
    this.utmCampaign = utmCampaign;
  }


  public AccountCreateTrialAccountRequest utmContent(String utmContent) {
    
    
    
    
    this.utmContent = utmContent;
    return this;
  }

   /**
   * The UTM content
   * @return utmContent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The UTM content")

  public String getUtmContent() {
    return utmContent;
  }


  public void setUtmContent(String utmContent) {
    
    
    
    this.utmContent = utmContent;
  }


  public AccountCreateTrialAccountRequest utmMedium(String utmMedium) {
    
    
    
    
    this.utmMedium = utmMedium;
    return this;
  }

   /**
   * The UTM medium
   * @return utmMedium
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The UTM medium")

  public String getUtmMedium() {
    return utmMedium;
  }


  public void setUtmMedium(String utmMedium) {
    
    
    
    this.utmMedium = utmMedium;
  }


  public AccountCreateTrialAccountRequest utmSource(String utmSource) {
    
    
    
    
    this.utmSource = utmSource;
    return this;
  }

   /**
   * The UTM source
   * @return utmSource
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The UTM source")

  public String getUtmSource() {
    return utmSource;
  }


  public void setUtmSource(String utmSource) {
    
    
    
    this.utmSource = utmSource;
  }


  public AccountCreateTrialAccountRequest utmTerm(String utmTerm) {
    
    
    
    
    this.utmTerm = utmTerm;
    return this;
  }

   /**
   * The UTM term
   * @return utmTerm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The UTM term")

  public String getUtmTerm() {
    return utmTerm;
  }


  public void setUtmTerm(String utmTerm) {
    
    
    
    this.utmTerm = utmTerm;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AccountCreateTrialAccountRequest instance itself
   */
  public AccountCreateTrialAccountRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountCreateTrialAccountRequest accountCreateTrialAccountRequest = (AccountCreateTrialAccountRequest) o;
    return Objects.equals(this.email, accountCreateTrialAccountRequest.email) &&
        Objects.equals(this.firstname, accountCreateTrialAccountRequest.firstname) &&
        Objects.equals(this.lastname, accountCreateTrialAccountRequest.lastname) &&
        Objects.equals(this.companyName, accountCreateTrialAccountRequest.companyName) &&
        Objects.equals(this.country, accountCreateTrialAccountRequest.country) &&
        Objects.equals(this.mobilePhone, accountCreateTrialAccountRequest.mobilePhone) &&
        Objects.equals(this.utmCampaign, accountCreateTrialAccountRequest.utmCampaign) &&
        Objects.equals(this.utmContent, accountCreateTrialAccountRequest.utmContent) &&
        Objects.equals(this.utmMedium, accountCreateTrialAccountRequest.utmMedium) &&
        Objects.equals(this.utmSource, accountCreateTrialAccountRequest.utmSource) &&
        Objects.equals(this.utmTerm, accountCreateTrialAccountRequest.utmTerm)&&
        Objects.equals(this.additionalProperties, accountCreateTrialAccountRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, firstname, lastname, companyName, country, mobilePhone, utmCampaign, utmContent, utmMedium, utmSource, utmTerm, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountCreateTrialAccountRequest {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstname: ").append(toIndentedString(firstname)).append("\n");
    sb.append("    lastname: ").append(toIndentedString(lastname)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    mobilePhone: ").append(toIndentedString(mobilePhone)).append("\n");
    sb.append("    utmCampaign: ").append(toIndentedString(utmCampaign)).append("\n");
    sb.append("    utmContent: ").append(toIndentedString(utmContent)).append("\n");
    sb.append("    utmMedium: ").append(toIndentedString(utmMedium)).append("\n");
    sb.append("    utmSource: ").append(toIndentedString(utmSource)).append("\n");
    sb.append("    utmTerm: ").append(toIndentedString(utmTerm)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email");
    openapiFields.add("firstname");
    openapiFields.add("lastname");
    openapiFields.add("company_name");
    openapiFields.add("country");
    openapiFields.add("mobile_phone");
    openapiFields.add("utm_campaign");
    openapiFields.add("utm_content");
    openapiFields.add("utm_medium");
    openapiFields.add("utm_source");
    openapiFields.add("utm_term");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("firstname");
    openapiRequiredFields.add("lastname");
    openapiRequiredFields.add("company_name");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("utm_source");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AccountCreateTrialAccountRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AccountCreateTrialAccountRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountCreateTrialAccountRequest is not found in the empty JSON string", AccountCreateTrialAccountRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccountCreateTrialAccountRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("firstname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstname").toString()));
      }
      if (!jsonObj.get("lastname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastname").toString()));
      }
      if (!jsonObj.get("company_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_name").toString()));
      }
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("mobile_phone") != null && !jsonObj.get("mobile_phone").isJsonNull()) && !jsonObj.get("mobile_phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobile_phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobile_phone").toString()));
      }
      if ((jsonObj.get("utm_campaign") != null && !jsonObj.get("utm_campaign").isJsonNull()) && !jsonObj.get("utm_campaign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `utm_campaign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("utm_campaign").toString()));
      }
      if ((jsonObj.get("utm_content") != null && !jsonObj.get("utm_content").isJsonNull()) && !jsonObj.get("utm_content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `utm_content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("utm_content").toString()));
      }
      if ((jsonObj.get("utm_medium") != null && !jsonObj.get("utm_medium").isJsonNull()) && !jsonObj.get("utm_medium").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `utm_medium` to be a primitive type in the JSON string but got `%s`", jsonObj.get("utm_medium").toString()));
      }
      if (!jsonObj.get("utm_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `utm_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("utm_source").toString()));
      }
      if ((jsonObj.get("utm_term") != null && !jsonObj.get("utm_term").isJsonNull()) && !jsonObj.get("utm_term").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `utm_term` to be a primitive type in the JSON string but got `%s`", jsonObj.get("utm_term").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountCreateTrialAccountRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountCreateTrialAccountRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountCreateTrialAccountRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountCreateTrialAccountRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountCreateTrialAccountRequest>() {
           @Override
           public void write(JsonWriter out, AccountCreateTrialAccountRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountCreateTrialAccountRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AccountCreateTrialAccountRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccountCreateTrialAccountRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccountCreateTrialAccountRequest
  * @throws IOException if the JSON string is invalid with respect to AccountCreateTrialAccountRequest
  */
  public static AccountCreateTrialAccountRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountCreateTrialAccountRequest.class);
  }

 /**
  * Convert an instance of AccountCreateTrialAccountRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

