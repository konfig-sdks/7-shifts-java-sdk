/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UserWagesCreateResponseData
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UserWagesCreateResponseData {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effective_date";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private String effectiveDate;

  public static final String SERIALIZED_NAME_ROLE_ID = "role_id";
  @SerializedName(SERIALIZED_NAME_ROLE_ID)
  private Integer roleId;

  /**
   * The wage type
   */
  @JsonAdapter(WageTypeEnum.Adapter.class)
 public enum WageTypeEnum {
    HOURLY("hourly"),
    
    WEEKLY_SALARY("weekly_salary");

    private String value;

    WageTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WageTypeEnum fromValue(String value) {
      for (WageTypeEnum b : WageTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WageTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WageTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WageTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_WAGE_TYPE = "wage_type";
  @SerializedName(SERIALIZED_NAME_WAGE_TYPE)
  private WageTypeEnum wageType;

  public static final String SERIALIZED_NAME_WAGE_CENTS = "wage_cents";
  @SerializedName(SERIALIZED_NAME_WAGE_CENTS)
  private Integer wageCents;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public UserWagesCreateResponseData() {
  }

  public UserWagesCreateResponseData id(Integer id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Wage ID
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Wage ID")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    
    
    
    this.id = id;
  }


  public UserWagesCreateResponseData effectiveDate(String effectiveDate) {
    
    
    
    
    this.effectiveDate = effectiveDate;
    return this;
  }

   /**
   * The wage effective date. Format YYYY-MM-DD
   * @return effectiveDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-01-01", required = true, value = "The wage effective date. Format YYYY-MM-DD")

  public String getEffectiveDate() {
    return effectiveDate;
  }


  public void setEffectiveDate(String effectiveDate) {
    
    
    
    this.effectiveDate = effectiveDate;
  }


  public UserWagesCreateResponseData roleId(Integer roleId) {
    
    
    
    
    this.roleId = roleId;
    return this;
  }

   /**
   * Role ID
   * @return roleId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "Role ID")

  public Integer getRoleId() {
    return roleId;
  }


  public void setRoleId(Integer roleId) {
    
    
    
    this.roleId = roleId;
  }


  public UserWagesCreateResponseData wageType(WageTypeEnum wageType) {
    
    
    
    
    this.wageType = wageType;
    return this;
  }

   /**
   * The wage type
   * @return wageType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The wage type")

  public WageTypeEnum getWageType() {
    return wageType;
  }


  public void setWageType(WageTypeEnum wageType) {
    
    
    
    this.wageType = wageType;
  }


  public UserWagesCreateResponseData wageCents(Integer wageCents) {
    
    
    
    
    this.wageCents = wageCents;
    return this;
  }

   /**
   * The wage value. In cents
   * @return wageCents
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The wage value. In cents")

  public Integer getWageCents() {
    return wageCents;
  }


  public void setWageCents(Integer wageCents) {
    
    
    
    this.wageCents = wageCents;
  }


  public UserWagesCreateResponseData created(OffsetDateTime created) {
    
    
    
    
    this.created = created;
    return this;
  }

   /**
   * The created date and time of the wage. Formatted as ISO8601 datetime in UTC timezone.
   * @return created
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-01-20T12:00Z", required = true, value = "The created date and time of the wage. Formatted as ISO8601 datetime in UTC timezone.")

  public OffsetDateTime getCreated() {
    return created;
  }


  public void setCreated(OffsetDateTime created) {
    
    
    
    this.created = created;
  }


  public UserWagesCreateResponseData modified(OffsetDateTime modified) {
    
    
    
    
    this.modified = modified;
    return this;
  }

   /**
   * The modified date and time of the wage. Formatted as ISO8601 datetime in UTC timezone.
   * @return modified
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-01-20T12:00Z", required = true, value = "The modified date and time of the wage. Formatted as ISO8601 datetime in UTC timezone.")

  public OffsetDateTime getModified() {
    return modified;
  }


  public void setModified(OffsetDateTime modified) {
    
    
    
    this.modified = modified;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UserWagesCreateResponseData instance itself
   */
  public UserWagesCreateResponseData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserWagesCreateResponseData userWagesCreateResponseData = (UserWagesCreateResponseData) o;
    return Objects.equals(this.id, userWagesCreateResponseData.id) &&
        Objects.equals(this.effectiveDate, userWagesCreateResponseData.effectiveDate) &&
        Objects.equals(this.roleId, userWagesCreateResponseData.roleId) &&
        Objects.equals(this.wageType, userWagesCreateResponseData.wageType) &&
        Objects.equals(this.wageCents, userWagesCreateResponseData.wageCents) &&
        Objects.equals(this.created, userWagesCreateResponseData.created) &&
        Objects.equals(this.modified, userWagesCreateResponseData.modified)&&
        Objects.equals(this.additionalProperties, userWagesCreateResponseData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, effectiveDate, roleId, wageType, wageCents, created, modified, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserWagesCreateResponseData {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    roleId: ").append(toIndentedString(roleId)).append("\n");
    sb.append("    wageType: ").append(toIndentedString(wageType)).append("\n");
    sb.append("    wageCents: ").append(toIndentedString(wageCents)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("effective_date");
    openapiFields.add("role_id");
    openapiFields.add("wage_type");
    openapiFields.add("wage_cents");
    openapiFields.add("created");
    openapiFields.add("modified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("effective_date");
    openapiRequiredFields.add("role_id");
    openapiRequiredFields.add("wage_type");
    openapiRequiredFields.add("wage_cents");
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("modified");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UserWagesCreateResponseData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UserWagesCreateResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserWagesCreateResponseData is not found in the empty JSON string", UserWagesCreateResponseData.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserWagesCreateResponseData.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("effective_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effective_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effective_date").toString()));
      }
      if (!jsonObj.get("wage_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wage_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wage_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserWagesCreateResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserWagesCreateResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserWagesCreateResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserWagesCreateResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<UserWagesCreateResponseData>() {
           @Override
           public void write(JsonWriter out, UserWagesCreateResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UserWagesCreateResponseData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UserWagesCreateResponseData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UserWagesCreateResponseData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UserWagesCreateResponseData
  * @throws IOException if the JSON string is invalid with respect to UserWagesCreateResponseData
  */
  public static UserWagesCreateResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserWagesCreateResponseData.class);
  }

 /**
  * Convert an instance of UserWagesCreateResponseData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

