/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ShiftFeedbackListResponseDataInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ShiftFeedbackListResponseDataInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private Integer locationId;

  public static final String SERIALIZED_NAME_DEPARTMENT_ID = "department_id";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_ID)
  private Integer departmentId;

  public static final String SERIALIZED_NAME_ROLE_ID = "role_id";
  @SerializedName(SERIALIZED_NAME_ROLE_ID)
  private Integer roleId;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private OffsetDateTime start;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private OffsetDateTime end;

  public static final String SERIALIZED_NAME_SHIFT_ID = "shift_id";
  @SerializedName(SERIALIZED_NAME_SHIFT_ID)
  private Integer shiftId;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_NOTIFIED = "notified";
  @SerializedName(SERIALIZED_NAME_NOTIFIED)
  private Boolean notified;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private Integer rating;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_DISMISSED = "dismissed";
  @SerializedName(SERIALIZED_NAME_DISMISSED)
  private Boolean dismissed;

  public static final String SERIALIZED_NAME_STATION_NAME = "station_name";
  @SerializedName(SERIALIZED_NAME_STATION_NAME)
  private String stationName;

  public ShiftFeedbackListResponseDataInner() {
  }

  public ShiftFeedbackListResponseDataInner id(Integer id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * ID for the shift feedback
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "ID for the shift feedback")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    
    
    
    this.id = id;
  }


  public ShiftFeedbackListResponseDataInner locationId(Integer locationId) {
    
    
    
    
    this.locationId = locationId;
    return this;
  }

   /**
   * Location ID
   * @return locationId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Location ID")

  public Integer getLocationId() {
    return locationId;
  }


  public void setLocationId(Integer locationId) {
    
    
    
    this.locationId = locationId;
  }


  public ShiftFeedbackListResponseDataInner departmentId(Integer departmentId) {
    
    
    
    
    this.departmentId = departmentId;
    return this;
  }

   /**
   * Department ID
   * @return departmentId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Department ID")

  public Integer getDepartmentId() {
    return departmentId;
  }


  public void setDepartmentId(Integer departmentId) {
    
    
    
    this.departmentId = departmentId;
  }


  public ShiftFeedbackListResponseDataInner roleId(Integer roleId) {
    
    
    
    
    this.roleId = roleId;
    return this;
  }

   /**
   * Role ID
   * @return roleId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Role ID")

  public Integer getRoleId() {
    return roleId;
  }


  public void setRoleId(Integer roleId) {
    
    
    
    this.roleId = roleId;
  }


  public ShiftFeedbackListResponseDataInner start(OffsetDateTime start) {
    
    
    
    
    this.start = start;
    return this;
  }

   /**
   * Shift start time
   * @return start
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Shift start time")

  public OffsetDateTime getStart() {
    return start;
  }


  public void setStart(OffsetDateTime start) {
    
    
    
    this.start = start;
  }


  public ShiftFeedbackListResponseDataInner end(OffsetDateTime end) {
    
    
    
    
    this.end = end;
    return this;
  }

   /**
   * Shift end time
   * @return end
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Shift end time")

  public OffsetDateTime getEnd() {
    return end;
  }


  public void setEnd(OffsetDateTime end) {
    
    
    
    this.end = end;
  }


  public ShiftFeedbackListResponseDataInner shiftId(Integer shiftId) {
    
    
    
    
    this.shiftId = shiftId;
    return this;
  }

   /**
   * Shift ID
   * @return shiftId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Shift ID")

  public Integer getShiftId() {
    return shiftId;
  }


  public void setShiftId(Integer shiftId) {
    
    
    
    this.shiftId = shiftId;
  }


  public ShiftFeedbackListResponseDataInner userId(Integer userId) {
    
    
    
    
    this.userId = userId;
    return this;
  }

   /**
   * User ID
   * @return userId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "User ID")

  public Integer getUserId() {
    return userId;
  }


  public void setUserId(Integer userId) {
    
    
    
    this.userId = userId;
  }


  public ShiftFeedbackListResponseDataInner notified(Boolean notified) {
    
    
    
    
    this.notified = notified;
    return this;
  }

   /**
   * If the user was notified to provide shift feedback
   * @return notified
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "If the user was notified to provide shift feedback")

  public Boolean getNotified() {
    return notified;
  }


  public void setNotified(Boolean notified) {
    
    
    
    this.notified = notified;
  }


  public ShiftFeedbackListResponseDataInner rating(Integer rating) {
    
    
    
    
    this.rating = rating;
    return this;
  }

   /**
   * Rating of the shift
   * @return rating
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Rating of the shift")

  public Integer getRating() {
    return rating;
  }


  public void setRating(Integer rating) {
    
    
    
    this.rating = rating;
  }


  public ShiftFeedbackListResponseDataInner comments(String comments) {
    
    
    
    
    this.comments = comments;
    return this;
  }

   /**
   * Comments about the shift
   * @return comments
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Comments about the shift")

  public String getComments() {
    return comments;
  }


  public void setComments(String comments) {
    
    
    
    this.comments = comments;
  }


  public ShiftFeedbackListResponseDataInner dismissed(Boolean dismissed) {
    
    
    
    
    this.dismissed = dismissed;
    return this;
  }

   /**
   * If the shift feedback request was dismissed
   * @return dismissed
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "If the shift feedback request was dismissed")

  public Boolean getDismissed() {
    return dismissed;
  }


  public void setDismissed(Boolean dismissed) {
    
    
    
    this.dismissed = dismissed;
  }


  public ShiftFeedbackListResponseDataInner stationName(String stationName) {
    
    
    
    
    this.stationName = stationName;
    return this;
  }

   /**
   * Station name
   * @return stationName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Station name")

  public String getStationName() {
    return stationName;
  }


  public void setStationName(String stationName) {
    
    
    
    this.stationName = stationName;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ShiftFeedbackListResponseDataInner instance itself
   */
  public ShiftFeedbackListResponseDataInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShiftFeedbackListResponseDataInner shiftFeedbackListResponseDataInner = (ShiftFeedbackListResponseDataInner) o;
    return Objects.equals(this.id, shiftFeedbackListResponseDataInner.id) &&
        Objects.equals(this.locationId, shiftFeedbackListResponseDataInner.locationId) &&
        Objects.equals(this.departmentId, shiftFeedbackListResponseDataInner.departmentId) &&
        Objects.equals(this.roleId, shiftFeedbackListResponseDataInner.roleId) &&
        Objects.equals(this.start, shiftFeedbackListResponseDataInner.start) &&
        Objects.equals(this.end, shiftFeedbackListResponseDataInner.end) &&
        Objects.equals(this.shiftId, shiftFeedbackListResponseDataInner.shiftId) &&
        Objects.equals(this.userId, shiftFeedbackListResponseDataInner.userId) &&
        Objects.equals(this.notified, shiftFeedbackListResponseDataInner.notified) &&
        Objects.equals(this.rating, shiftFeedbackListResponseDataInner.rating) &&
        Objects.equals(this.comments, shiftFeedbackListResponseDataInner.comments) &&
        Objects.equals(this.dismissed, shiftFeedbackListResponseDataInner.dismissed) &&
        Objects.equals(this.stationName, shiftFeedbackListResponseDataInner.stationName)&&
        Objects.equals(this.additionalProperties, shiftFeedbackListResponseDataInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, locationId, departmentId, roleId, start, end, shiftId, userId, notified, rating, comments, dismissed, stationName, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShiftFeedbackListResponseDataInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    departmentId: ").append(toIndentedString(departmentId)).append("\n");
    sb.append("    roleId: ").append(toIndentedString(roleId)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    shiftId: ").append(toIndentedString(shiftId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    notified: ").append(toIndentedString(notified)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    dismissed: ").append(toIndentedString(dismissed)).append("\n");
    sb.append("    stationName: ").append(toIndentedString(stationName)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("location_id");
    openapiFields.add("department_id");
    openapiFields.add("role_id");
    openapiFields.add("start");
    openapiFields.add("end");
    openapiFields.add("shift_id");
    openapiFields.add("user_id");
    openapiFields.add("notified");
    openapiFields.add("rating");
    openapiFields.add("comments");
    openapiFields.add("dismissed");
    openapiFields.add("station_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("location_id");
    openapiRequiredFields.add("department_id");
    openapiRequiredFields.add("role_id");
    openapiRequiredFields.add("start");
    openapiRequiredFields.add("end");
    openapiRequiredFields.add("shift_id");
    openapiRequiredFields.add("user_id");
    openapiRequiredFields.add("notified");
    openapiRequiredFields.add("rating");
    openapiRequiredFields.add("comments");
    openapiRequiredFields.add("dismissed");
    openapiRequiredFields.add("station_name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ShiftFeedbackListResponseDataInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ShiftFeedbackListResponseDataInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShiftFeedbackListResponseDataInner is not found in the empty JSON string", ShiftFeedbackListResponseDataInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ShiftFeedbackListResponseDataInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      if (!jsonObj.get("station_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `station_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("station_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShiftFeedbackListResponseDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShiftFeedbackListResponseDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShiftFeedbackListResponseDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShiftFeedbackListResponseDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ShiftFeedbackListResponseDataInner>() {
           @Override
           public void write(JsonWriter out, ShiftFeedbackListResponseDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ShiftFeedbackListResponseDataInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ShiftFeedbackListResponseDataInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ShiftFeedbackListResponseDataInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ShiftFeedbackListResponseDataInner
  * @throws IOException if the JSON string is invalid with respect to ShiftFeedbackListResponseDataInner
  */
  public static ShiftFeedbackListResponseDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShiftFeedbackListResponseDataInner.class);
  }

 /**
  * Convert an instance of ShiftFeedbackListResponseDataInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

