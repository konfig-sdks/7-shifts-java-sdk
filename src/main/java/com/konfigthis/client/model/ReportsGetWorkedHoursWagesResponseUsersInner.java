/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner;
import com.konfigthis.client.model.ReportsGetWorkedHoursWagesResponseUsersInnerTotal;
import com.konfigthis.client.model.ReportsGetWorkedHoursWagesResponseUsersInnerUser;
import com.konfigthis.client.model.ReportsGetWorkedHoursWagesResponseUsersInnerWeeksInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ReportsGetWorkedHoursWagesResponseUsersInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ReportsGetWorkedHoursWagesResponseUsersInner {
  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private ReportsGetWorkedHoursWagesResponseUsersInnerUser user;

  public static final String SERIALIZED_NAME_WEEKS = "weeks";
  @SerializedName(SERIALIZED_NAME_WEEKS)
  private List<ReportsGetWorkedHoursWagesResponseUsersInnerWeeksInner> weeks = null;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner> roles = null;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private ReportsGetWorkedHoursWagesResponseUsersInnerTotal total;

  public static final String SERIALIZED_NAME_SALARIED = "salaried";
  @SerializedName(SERIALIZED_NAME_SALARIED)
  private Boolean salaried;

  public ReportsGetWorkedHoursWagesResponseUsersInner() {
  }

  public ReportsGetWorkedHoursWagesResponseUsersInner user(ReportsGetWorkedHoursWagesResponseUsersInnerUser user) {
    
    
    
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReportsGetWorkedHoursWagesResponseUsersInnerUser getUser() {
    return user;
  }


  public void setUser(ReportsGetWorkedHoursWagesResponseUsersInnerUser user) {
    
    
    
    this.user = user;
  }


  public ReportsGetWorkedHoursWagesResponseUsersInner weeks(List<ReportsGetWorkedHoursWagesResponseUsersInnerWeeksInner> weeks) {
    
    
    
    
    this.weeks = weeks;
    return this;
  }

  public ReportsGetWorkedHoursWagesResponseUsersInner addWeeksItem(ReportsGetWorkedHoursWagesResponseUsersInnerWeeksInner weeksItem) {
    if (this.weeks == null) {
      this.weeks = new ArrayList<>();
    }
    this.weeks.add(weeksItem);
    return this;
  }

   /**
   * Report data for each work week
   * @return weeks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Report data for each work week")

  public List<ReportsGetWorkedHoursWagesResponseUsersInnerWeeksInner> getWeeks() {
    return weeks;
  }


  public void setWeeks(List<ReportsGetWorkedHoursWagesResponseUsersInnerWeeksInner> weeks) {
    
    
    
    this.weeks = weeks;
  }


  public ReportsGetWorkedHoursWagesResponseUsersInner roles(List<ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner> roles) {
    
    
    
    
    this.roles = roles;
    return this;
  }

  public ReportsGetWorkedHoursWagesResponseUsersInner addRolesItem(ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

   /**
   * Hours and pay totals for each role the employee worked
   * @return roles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Hours and pay totals for each role the employee worked")

  public List<ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner> getRoles() {
    return roles;
  }


  public void setRoles(List<ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner> roles) {
    
    
    
    this.roles = roles;
  }


  public ReportsGetWorkedHoursWagesResponseUsersInner total(ReportsGetWorkedHoursWagesResponseUsersInnerTotal total) {
    
    
    
    
    this.total = total;
    return this;
  }

   /**
   * Get total
   * @return total
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReportsGetWorkedHoursWagesResponseUsersInnerTotal getTotal() {
    return total;
  }


  public void setTotal(ReportsGetWorkedHoursWagesResponseUsersInnerTotal total) {
    
    
    
    this.total = total;
  }


  public ReportsGetWorkedHoursWagesResponseUsersInner salaried(Boolean salaried) {
    
    
    
    
    this.salaried = salaried;
    return this;
  }

   /**
   * Whether employee is salaried during the entire date range of the report
   * @return salaried
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether employee is salaried during the entire date range of the report")

  public Boolean getSalaried() {
    return salaried;
  }


  public void setSalaried(Boolean salaried) {
    
    
    
    this.salaried = salaried;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReportsGetWorkedHoursWagesResponseUsersInner instance itself
   */
  public ReportsGetWorkedHoursWagesResponseUsersInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportsGetWorkedHoursWagesResponseUsersInner reportsGetWorkedHoursWagesResponseUsersInner = (ReportsGetWorkedHoursWagesResponseUsersInner) o;
    return Objects.equals(this.user, reportsGetWorkedHoursWagesResponseUsersInner.user) &&
        Objects.equals(this.weeks, reportsGetWorkedHoursWagesResponseUsersInner.weeks) &&
        Objects.equals(this.roles, reportsGetWorkedHoursWagesResponseUsersInner.roles) &&
        Objects.equals(this.total, reportsGetWorkedHoursWagesResponseUsersInner.total) &&
        Objects.equals(this.salaried, reportsGetWorkedHoursWagesResponseUsersInner.salaried)&&
        Objects.equals(this.additionalProperties, reportsGetWorkedHoursWagesResponseUsersInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(user, weeks, roles, total, salaried, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportsGetWorkedHoursWagesResponseUsersInner {\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    weeks: ").append(toIndentedString(weeks)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    salaried: ").append(toIndentedString(salaried)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("user");
    openapiFields.add("weeks");
    openapiFields.add("roles");
    openapiFields.add("total");
    openapiFields.add("salaried");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportsGetWorkedHoursWagesResponseUsersInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReportsGetWorkedHoursWagesResponseUsersInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportsGetWorkedHoursWagesResponseUsersInner is not found in the empty JSON string", ReportsGetWorkedHoursWagesResponseUsersInner.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        ReportsGetWorkedHoursWagesResponseUsersInnerUser.validateJsonObject(jsonObj.getAsJsonObject("user"));
      }
      if (jsonObj.get("weeks") != null && !jsonObj.get("weeks").isJsonNull()) {
        JsonArray jsonArrayweeks = jsonObj.getAsJsonArray("weeks");
        if (jsonArrayweeks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("weeks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `weeks` to be an array in the JSON string but got `%s`", jsonObj.get("weeks").toString()));
          }

          // validate the optional field `weeks` (array)
          for (int i = 0; i < jsonArrayweeks.size(); i++) {
            ReportsGetWorkedHoursWagesResponseUsersInnerWeeksInner.validateJsonObject(jsonArrayweeks.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull()) {
        JsonArray jsonArrayroles = jsonObj.getAsJsonArray("roles");
        if (jsonArrayroles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("roles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
          }

          // validate the optional field `roles` (array)
          for (int i = 0; i < jsonArrayroles.size(); i++) {
            ReportsGetWorkedHoursWagesResponseUsersInnerRolesInner.validateJsonObject(jsonArrayroles.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `total`
      if (jsonObj.get("total") != null && !jsonObj.get("total").isJsonNull()) {
        ReportsGetWorkedHoursWagesResponseUsersInnerTotal.validateJsonObject(jsonObj.getAsJsonObject("total"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportsGetWorkedHoursWagesResponseUsersInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportsGetWorkedHoursWagesResponseUsersInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportsGetWorkedHoursWagesResponseUsersInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportsGetWorkedHoursWagesResponseUsersInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportsGetWorkedHoursWagesResponseUsersInner>() {
           @Override
           public void write(JsonWriter out, ReportsGetWorkedHoursWagesResponseUsersInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportsGetWorkedHoursWagesResponseUsersInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ReportsGetWorkedHoursWagesResponseUsersInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportsGetWorkedHoursWagesResponseUsersInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportsGetWorkedHoursWagesResponseUsersInner
  * @throws IOException if the JSON string is invalid with respect to ReportsGetWorkedHoursWagesResponseUsersInner
  */
  public static ReportsGetWorkedHoursWagesResponseUsersInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportsGetWorkedHoursWagesResponseUsersInner.class);
  }

 /**
  * Convert an instance of ReportsGetWorkedHoursWagesResponseUsersInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

