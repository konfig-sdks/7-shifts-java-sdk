/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TimePunchesUpdateByIdRequestBreaksInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TimePunchesUpdateByIdRequestBreaksInner {
  public static final String SERIALIZED_NAME_PAID = "paid";
  @SerializedName(SERIALIZED_NAME_PAID)
  private Boolean paid;

  public static final String SERIALIZED_NAME_IN = "in";
  @SerializedName(SERIALIZED_NAME_IN)
  private OffsetDateTime in;

  public static final String SERIALIZED_NAME_OUT = "out";
  @SerializedName(SERIALIZED_NAME_OUT)
  private OffsetDateTime out;

  public static final String SERIALIZED_NAME_CUSTOM_BREAK_ID = "custom_break_id";
  @SerializedName(SERIALIZED_NAME_CUSTOM_BREAK_ID)
  private Integer customBreakId;

  public TimePunchesUpdateByIdRequestBreaksInner() {
  }

  public TimePunchesUpdateByIdRequestBreaksInner paid(Boolean paid) {
    
    
    
    
    this.paid = paid;
    return this;
  }

   /**
   * Specifies whether the break is paid or unpaid. Default true when no existing setting is found.
   * @return paid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies whether the break is paid or unpaid. Default true when no existing setting is found.")

  public Boolean getPaid() {
    return paid;
  }


  public void setPaid(Boolean paid) {
    
    
    
    this.paid = paid;
  }


  public TimePunchesUpdateByIdRequestBreaksInner in(OffsetDateTime in) {
    
    
    
    
    this.in = in;
    return this;
  }

   /**
   * The start date and time of the break. Formatted as ISO8601 datetime in UTC timezone.
   * @return in
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2021-01-01T00:00Z", required = true, value = "The start date and time of the break. Formatted as ISO8601 datetime in UTC timezone.")

  public OffsetDateTime getIn() {
    return in;
  }


  public void setIn(OffsetDateTime in) {
    
    
    
    this.in = in;
  }


  public TimePunchesUpdateByIdRequestBreaksInner out(OffsetDateTime out) {
    
    
    
    
    this.out = out;
    return this;
  }

   /**
   * The end date and time of the break. Formatted as ISO8601 datetime in UTC timezone.
   * @return out
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-01-01T00:00Z", value = "The end date and time of the break. Formatted as ISO8601 datetime in UTC timezone.")

  public OffsetDateTime getOut() {
    return out;
  }


  public void setOut(OffsetDateTime out) {
    
    
    
    this.out = out;
  }


  public TimePunchesUpdateByIdRequestBreaksInner customBreakId(Integer customBreakId) {
    
    
    
    
    this.customBreakId = customBreakId;
    return this;
  }

   /**
   * The custom break id belonging to the break if the break is a custom break.
   * @return customBreakId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1234", value = "The custom break id belonging to the break if the break is a custom break.")

  public Integer getCustomBreakId() {
    return customBreakId;
  }


  public void setCustomBreakId(Integer customBreakId) {
    
    
    
    this.customBreakId = customBreakId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TimePunchesUpdateByIdRequestBreaksInner instance itself
   */
  public TimePunchesUpdateByIdRequestBreaksInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimePunchesUpdateByIdRequestBreaksInner timePunchesUpdateByIdRequestBreaksInner = (TimePunchesUpdateByIdRequestBreaksInner) o;
    return Objects.equals(this.paid, timePunchesUpdateByIdRequestBreaksInner.paid) &&
        Objects.equals(this.in, timePunchesUpdateByIdRequestBreaksInner.in) &&
        Objects.equals(this.out, timePunchesUpdateByIdRequestBreaksInner.out) &&
        Objects.equals(this.customBreakId, timePunchesUpdateByIdRequestBreaksInner.customBreakId)&&
        Objects.equals(this.additionalProperties, timePunchesUpdateByIdRequestBreaksInner.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(paid, in, out, customBreakId, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimePunchesUpdateByIdRequestBreaksInner {\n");
    sb.append("    paid: ").append(toIndentedString(paid)).append("\n");
    sb.append("    in: ").append(toIndentedString(in)).append("\n");
    sb.append("    out: ").append(toIndentedString(out)).append("\n");
    sb.append("    customBreakId: ").append(toIndentedString(customBreakId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("paid");
    openapiFields.add("in");
    openapiFields.add("out");
    openapiFields.add("custom_break_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("paid");
    openapiRequiredFields.add("in");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TimePunchesUpdateByIdRequestBreaksInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TimePunchesUpdateByIdRequestBreaksInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimePunchesUpdateByIdRequestBreaksInner is not found in the empty JSON string", TimePunchesUpdateByIdRequestBreaksInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TimePunchesUpdateByIdRequestBreaksInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimePunchesUpdateByIdRequestBreaksInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimePunchesUpdateByIdRequestBreaksInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimePunchesUpdateByIdRequestBreaksInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimePunchesUpdateByIdRequestBreaksInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TimePunchesUpdateByIdRequestBreaksInner>() {
           @Override
           public void write(JsonWriter out, TimePunchesUpdateByIdRequestBreaksInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TimePunchesUpdateByIdRequestBreaksInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TimePunchesUpdateByIdRequestBreaksInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TimePunchesUpdateByIdRequestBreaksInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TimePunchesUpdateByIdRequestBreaksInner
  * @throws IOException if the JSON string is invalid with respect to TimePunchesUpdateByIdRequestBreaksInner
  */
  public static TimePunchesUpdateByIdRequestBreaksInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimePunchesUpdateByIdRequestBreaksInner.class);
  }

 /**
  * Convert an instance of TimePunchesUpdateByIdRequestBreaksInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

