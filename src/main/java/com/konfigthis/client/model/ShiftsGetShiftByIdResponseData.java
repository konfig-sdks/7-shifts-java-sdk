/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ShiftsListResponseDataInnerBreaksInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ShiftsGetShiftByIdResponseData
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ShiftsGetShiftByIdResponseData {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private OffsetDateTime start;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private OffsetDateTime end;

  public static final String SERIALIZED_NAME_CLOSE = "close";
  @SerializedName(SERIALIZED_NAME_CLOSE)
  private Boolean close;

  public static final String SERIALIZED_NAME_BUSINESS_DECLINE = "business_decline";
  @SerializedName(SERIALIZED_NAME_BUSINESS_DECLINE)
  private Boolean businessDecline;

  public static final String SERIALIZED_NAME_HOURLY_WAGE = "hourly_wage";
  @SerializedName(SERIALIZED_NAME_HOURLY_WAGE)
  private Double hourlyWage;

  public static final String SERIALIZED_NAME_DEPARTMENT_ID = "department_id";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_ID)
  private Integer departmentId;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private Integer locationId;

  public static final String SERIALIZED_NAME_ROLE_ID = "role_id";
  @SerializedName(SERIALIZED_NAME_ROLE_ID)
  private Integer roleId;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_DRAFT = "draft";
  @SerializedName(SERIALIZED_NAME_DRAFT)
  private Boolean draft;

  public static final String SERIALIZED_NAME_NOTIFIED = "notified";
  @SerializedName(SERIALIZED_NAME_NOTIFIED)
  private Boolean notified;

  public static final String SERIALIZED_NAME_OPEN = "open";
  @SerializedName(SERIALIZED_NAME_OPEN)
  private Boolean open;

  public static final String SERIALIZED_NAME_UNASSIGNED = "unassigned";
  @SerializedName(SERIALIZED_NAME_UNASSIGNED)
  private Boolean unassigned;

  public static final String SERIALIZED_NAME_UNASSIGNED_SKILL_LEVEL = "unassigned_skill_level";
  @SerializedName(SERIALIZED_NAME_UNASSIGNED_SKILL_LEVEL)
  private Integer unassignedSkillLevel = 2;

  /**
   * Specifies the scope of who can pick up the shift.
   */
  @JsonAdapter(OpenOfferTypeEnum.Adapter.class)
 public enum OpenOfferTypeEnum {
    ALL_LOCATION_MEMBERS("all_location_members"),
    
    ALL_ROLE_MEMBERS("all_role_members"),
    
    SET_OF_LOCATION_MEMBERS("set_of_location_members"),
    
    ALL_COMPANY_EMPLOYEES("all_company_employees");

    private String value;

    OpenOfferTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OpenOfferTypeEnum fromValue(String value) {
      for (OpenOfferTypeEnum b : OpenOfferTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OpenOfferTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OpenOfferTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OpenOfferTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OpenOfferTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPEN_OFFER_TYPE = "open_offer_type";
  @SerializedName(SERIALIZED_NAME_OPEN_OFFER_TYPE)
  private OpenOfferTypeEnum openOfferType;

  /**
   * Specified shift flags to track employee attendance
   */
  @JsonAdapter(AttendanceStatusEnum.Adapter.class)
 public enum AttendanceStatusEnum {
    NONE("none"),
    
    SICK("sick"),
    
    NO_SHOW("no_show"),
    
    LATE("late");

    private String value;

    AttendanceStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AttendanceStatusEnum fromValue(String value) {
      for (AttendanceStatusEnum b : AttendanceStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AttendanceStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AttendanceStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AttendanceStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AttendanceStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ATTENDANCE_STATUS = "attendance_status";
  @SerializedName(SERIALIZED_NAME_ATTENDANCE_STATUS)
  private AttendanceStatusEnum attendanceStatus = AttendanceStatusEnum.NONE;

  /**
   * Current publication status of the shift
   */
  @JsonAdapter(PublishStatusEnum.Adapter.class)
 public enum PublishStatusEnum {
    DRAFT("draft"),
    
    PUBLISHED("published"),
    
    DRAFT_DELETED("draft_deleted"),
    
    PUBLISHED_DELETED("published_deleted");

    private String value;

    PublishStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PublishStatusEnum fromValue(String value) {
      for (PublishStatusEnum b : PublishStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PublishStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PublishStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PublishStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PublishStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PUBLISH_STATUS = "publish_status";
  @SerializedName(SERIALIZED_NAME_PUBLISH_STATUS)
  private PublishStatusEnum publishStatus;

  public static final String SERIALIZED_NAME_LATE_MINUETS = "late_minuets";
  @SerializedName(SERIALIZED_NAME_LATE_MINUETS)
  private Integer lateMinuets;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted = false;

  public static final String SERIALIZED_NAME_SOFT_DELETED = "soft_deleted";
  @SerializedName(SERIALIZED_NAME_SOFT_DELETED)
  private String softDeleted;

  public static final String SERIALIZED_NAME_STATION = "station";
  @SerializedName(SERIALIZED_NAME_STATION)
  private Integer station;

  public static final String SERIALIZED_NAME_STATION_NAME = "station_name";
  @SerializedName(SERIALIZED_NAME_STATION_NAME)
  private String stationName;

  public static final String SERIALIZED_NAME_STATION_ID = "station_id";
  @SerializedName(SERIALIZED_NAME_STATION_ID)
  private Integer stationId;

  public static final String SERIALIZED_NAME_BREAKS = "breaks";
  @SerializedName(SERIALIZED_NAME_BREAKS)
  private List<ShiftsListResponseDataInnerBreaksInner> breaks = null;

  public ShiftsGetShiftByIdResponseData() {
  }

  
  public ShiftsGetShiftByIdResponseData(
     Double hourlyWage
  ) {
    this();
    this.hourlyWage = hourlyWage;
  }

  public ShiftsGetShiftByIdResponseData id(Integer id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Shift ID
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Shift ID")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    
    
    
    this.id = id;
  }


  public ShiftsGetShiftByIdResponseData userId(Integer userId) {
    
    
    
    
    this.userId = userId;
    return this;
  }

   /**
   * User ID
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "User ID")

  public Integer getUserId() {
    return userId;
  }


  public void setUserId(Integer userId) {
    
    
    
    this.userId = userId;
  }


  public ShiftsGetShiftByIdResponseData start(OffsetDateTime start) {
    
    
    
    
    this.start = start;
    return this;
  }

   /**
   * Start date time of the shift. UTC in ISO8601 format
   * @return start
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Start date time of the shift. UTC in ISO8601 format")

  public OffsetDateTime getStart() {
    return start;
  }


  public void setStart(OffsetDateTime start) {
    
    
    
    this.start = start;
  }


  public ShiftsGetShiftByIdResponseData end(OffsetDateTime end) {
    
    
    
    
    this.end = end;
    return this;
  }

   /**
   * End date time of the shift. UTC in ISO8601 format
   * @return end
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "End date time of the shift. UTC in ISO8601 format")

  public OffsetDateTime getEnd() {
    return end;
  }


  public void setEnd(OffsetDateTime end) {
    
    
    
    this.end = end;
  }


  public ShiftsGetShiftByIdResponseData close(Boolean close) {
    
    
    
    
    this.close = close;
    return this;
  }

   /**
   * If true the shift ends at closing time. If set end is not used.
   * @return close
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "If true the shift ends at closing time. If set end is not used.")

  public Boolean getClose() {
    return close;
  }


  public void setClose(Boolean close) {
    
    
    
    this.close = close;
  }


  public ShiftsGetShiftByIdResponseData businessDecline(Boolean businessDecline) {
    
    
    
    
    this.businessDecline = businessDecline;
    return this;
  }

   /**
   * If true the shift ends at business decline.
   * @return businessDecline
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "If true the shift ends at business decline.")

  public Boolean getBusinessDecline() {
    return businessDecline;
  }


  public void setBusinessDecline(Boolean businessDecline) {
    
    
    
    this.businessDecline = businessDecline;
  }


   /**
   * Read Only. The hourly wage for this shift. In cents.
   * @return hourlyWage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Read Only. The hourly wage for this shift. In cents.")

  public Double getHourlyWage() {
    return hourlyWage;
  }




  public ShiftsGetShiftByIdResponseData departmentId(Integer departmentId) {
    
    
    
    
    this.departmentId = departmentId;
    return this;
  }

   /**
   * Department ID. Required if the location uses departments.
   * @return departmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "Department ID. Required if the location uses departments.")

  public Integer getDepartmentId() {
    return departmentId;
  }


  public void setDepartmentId(Integer departmentId) {
    
    
    
    this.departmentId = departmentId;
  }


  public ShiftsGetShiftByIdResponseData locationId(Integer locationId) {
    
    
    
    
    this.locationId = locationId;
    return this;
  }

   /**
   * The ID of the location that the shift is assigned to.
   * @return locationId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ID of the location that the shift is assigned to.")

  public Integer getLocationId() {
    return locationId;
  }


  public void setLocationId(Integer locationId) {
    
    
    
    this.locationId = locationId;
  }


  public ShiftsGetShiftByIdResponseData roleId(Integer roleId) {
    
    
    
    
    this.roleId = roleId;
    return this;
  }

   /**
   * Role ID. Required if the location uses roles.
   * @return roleId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "Role ID. Required if the location uses roles.")

  public Integer getRoleId() {
    return roleId;
  }


  public void setRoleId(Integer roleId) {
    
    
    
    this.roleId = roleId;
  }


  public ShiftsGetShiftByIdResponseData notes(String notes) {
    
    
    
    
    this.notes = notes;
    return this;
  }

   /**
   * Notes displayed on a shift
   * @return notes
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Notes displayed on a shift")

  public String getNotes() {
    return notes;
  }


  public void setNotes(String notes) {
    
    
    
    this.notes = notes;
  }


  public ShiftsGetShiftByIdResponseData draft(Boolean draft) {
    
    
    
    
    this.draft = draft;
    return this;
  }

   /**
   * Whether or not the shift is a draft shift. Draft shifts are shifts that have not yet been published.
   * @return draft
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether or not the shift is a draft shift. Draft shifts are shifts that have not yet been published.")

  public Boolean getDraft() {
    return draft;
  }


  public void setDraft(Boolean draft) {
    
    
    
    this.draft = draft;
  }


  public ShiftsGetShiftByIdResponseData notified(Boolean notified) {
    
    
    
    
    this.notified = notified;
    return this;
  }

   /**
   * Whether or not the individual assigned to the shift has been notified of the shifts existence.
   * @return notified
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether or not the individual assigned to the shift has been notified of the shifts existence.")

  public Boolean getNotified() {
    return notified;
  }


  public void setNotified(Boolean notified) {
    
    
    
    this.notified = notified;
  }


  public ShiftsGetShiftByIdResponseData open(Boolean open) {
    
    
    
    
    this.open = open;
    return this;
  }

   /**
   * If true the shift is not assigned to any user. Open shifts can be requested by users.
   * @return open
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "If true the shift is not assigned to any user. Open shifts can be requested by users.")

  public Boolean getOpen() {
    return open;
  }


  public void setOpen(Boolean open) {
    
    
    
    this.open = open;
  }


  public ShiftsGetShiftByIdResponseData unassigned(Boolean unassigned) {
    
    
    
    
    this.unassigned = unassigned;
    return this;
  }

   /**
   * Shifts in a template that could not be assigned to any eligible employees.
   * @return unassigned
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Shifts in a template that could not be assigned to any eligible employees.")

  public Boolean getUnassigned() {
    return unassigned;
  }


  public void setUnassigned(Boolean unassigned) {
    
    
    
    this.unassigned = unassigned;
  }


  public ShiftsGetShiftByIdResponseData unassignedSkillLevel(Integer unassignedSkillLevel) {
    
    
    
    
    this.unassignedSkillLevel = unassignedSkillLevel;
    return this;
  }

   /**
   * Specify the minimum user skill level required for the shift. Levels 1 - beginner, 2 - intermediate, 3 - Experienced.
   * @return unassignedSkillLevel
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2", required = true, value = "Specify the minimum user skill level required for the shift. Levels 1 - beginner, 2 - intermediate, 3 - Experienced.")

  public Integer getUnassignedSkillLevel() {
    return unassignedSkillLevel;
  }


  public void setUnassignedSkillLevel(Integer unassignedSkillLevel) {
    
    
    
    this.unassignedSkillLevel = unassignedSkillLevel;
  }


  public ShiftsGetShiftByIdResponseData openOfferType(OpenOfferTypeEnum openOfferType) {
    
    
    
    
    this.openOfferType = openOfferType;
    return this;
  }

   /**
   * Specifies the scope of who can pick up the shift.
   * @return openOfferType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "Specifies the scope of who can pick up the shift.")

  public OpenOfferTypeEnum getOpenOfferType() {
    return openOfferType;
  }


  public void setOpenOfferType(OpenOfferTypeEnum openOfferType) {
    
    
    
    this.openOfferType = openOfferType;
  }


  public ShiftsGetShiftByIdResponseData attendanceStatus(AttendanceStatusEnum attendanceStatus) {
    
    
    
    
    this.attendanceStatus = attendanceStatus;
    return this;
  }

   /**
   * Specified shift flags to track employee attendance
   * @return attendanceStatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "NONE", required = true, value = "Specified shift flags to track employee attendance")

  public AttendanceStatusEnum getAttendanceStatus() {
    return attendanceStatus;
  }


  public void setAttendanceStatus(AttendanceStatusEnum attendanceStatus) {
    
    
    
    this.attendanceStatus = attendanceStatus;
  }


  public ShiftsGetShiftByIdResponseData publishStatus(PublishStatusEnum publishStatus) {
    
    
    
    
    this.publishStatus = publishStatus;
    return this;
  }

   /**
   * Current publication status of the shift
   * @return publishStatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Current publication status of the shift")

  public PublishStatusEnum getPublishStatus() {
    return publishStatus;
  }


  public void setPublishStatus(PublishStatusEnum publishStatus) {
    
    
    
    this.publishStatus = publishStatus;
  }


  public ShiftsGetShiftByIdResponseData lateMinuets(Integer lateMinuets) {
    
    
    
    
    this.lateMinuets = lateMinuets;
    return this;
  }

   /**
   * Specify the grace minutes they can clock-in late.
   * @return lateMinuets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specify the grace minutes they can clock-in late.")

  public Integer getLateMinuets() {
    return lateMinuets;
  }


  public void setLateMinuets(Integer lateMinuets) {
    
    
    
    this.lateMinuets = lateMinuets;
  }


  public ShiftsGetShiftByIdResponseData created(OffsetDateTime created) {
    
    
    
    
    this.created = created;
    return this;
  }

   /**
   * The created date of the shift in UTC
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The created date of the shift in UTC")

  public OffsetDateTime getCreated() {
    return created;
  }


  public void setCreated(OffsetDateTime created) {
    
    
    
    this.created = created;
  }


  public ShiftsGetShiftByIdResponseData modified(OffsetDateTime modified) {
    
    
    
    
    this.modified = modified;
    return this;
  }

   /**
   * The last modified date of the shift in UTC
   * @return modified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The last modified date of the shift in UTC")

  public OffsetDateTime getModified() {
    return modified;
  }


  public void setModified(OffsetDateTime modified) {
    
    
    
    this.modified = modified;
  }


  public ShiftsGetShiftByIdResponseData deleted(Boolean deleted) {
    
    
    
    
    this.deleted = deleted;
    return this;
  }

   /**
   * Whether or not this shift is deleted.
   * @return deleted
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Whether or not this shift is deleted.")

  public Boolean getDeleted() {
    return deleted;
  }


  public void setDeleted(Boolean deleted) {
    
    
    
    this.deleted = deleted;
  }


  public ShiftsGetShiftByIdResponseData softDeleted(String softDeleted) {
    
    
    
    
    this.softDeleted = softDeleted;
    return this;
  }

   /**
   * Whether or not this shift is soft-deleted.
   * @return softDeleted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "Whether or not this shift is soft-deleted.")

  public String getSoftDeleted() {
    return softDeleted;
  }


  public void setSoftDeleted(String softDeleted) {
    
    
    
    this.softDeleted = softDeleted;
  }


  public ShiftsGetShiftByIdResponseData station(Integer station) {
    
    
    
    
    this.station = station;
    return this;
  }

   /**
   * Station Number
   * @return station
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Station Number")

  public Integer getStation() {
    return station;
  }


  public void setStation(Integer station) {
    
    
    
    this.station = station;
  }


  public ShiftsGetShiftByIdResponseData stationName(String stationName) {
    
    
    
    
    this.stationName = stationName;
    return this;
  }

   /**
   * Station name
   * @return stationName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "Station name")

  public String getStationName() {
    return stationName;
  }


  public void setStationName(String stationName) {
    
    
    
    this.stationName = stationName;
  }


  public ShiftsGetShiftByIdResponseData stationId(Integer stationId) {
    
    
    
    
    this.stationId = stationId;
    return this;
  }

   /**
   * Station id
   * @return stationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "Station id")

  public Integer getStationId() {
    return stationId;
  }


  public void setStationId(Integer stationId) {
    
    
    
    this.stationId = stationId;
  }


  public ShiftsGetShiftByIdResponseData breaks(List<ShiftsListResponseDataInnerBreaksInner> breaks) {
    
    
    
    
    this.breaks = breaks;
    return this;
  }

  public ShiftsGetShiftByIdResponseData addBreaksItem(ShiftsListResponseDataInnerBreaksInner breaksItem) {
    if (this.breaks == null) {
      this.breaks = new ArrayList<>();
    }
    this.breaks.add(breaksItem);
    return this;
  }

   /**
   * Breaks on the shift
   * @return breaks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Breaks on the shift")

  public List<ShiftsListResponseDataInnerBreaksInner> getBreaks() {
    return breaks;
  }


  public void setBreaks(List<ShiftsListResponseDataInnerBreaksInner> breaks) {
    
    
    
    this.breaks = breaks;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ShiftsGetShiftByIdResponseData instance itself
   */
  public ShiftsGetShiftByIdResponseData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShiftsGetShiftByIdResponseData shiftsGetShiftByIdResponseData = (ShiftsGetShiftByIdResponseData) o;
    return Objects.equals(this.id, shiftsGetShiftByIdResponseData.id) &&
        Objects.equals(this.userId, shiftsGetShiftByIdResponseData.userId) &&
        Objects.equals(this.start, shiftsGetShiftByIdResponseData.start) &&
        Objects.equals(this.end, shiftsGetShiftByIdResponseData.end) &&
        Objects.equals(this.close, shiftsGetShiftByIdResponseData.close) &&
        Objects.equals(this.businessDecline, shiftsGetShiftByIdResponseData.businessDecline) &&
        Objects.equals(this.hourlyWage, shiftsGetShiftByIdResponseData.hourlyWage) &&
        Objects.equals(this.departmentId, shiftsGetShiftByIdResponseData.departmentId) &&
        Objects.equals(this.locationId, shiftsGetShiftByIdResponseData.locationId) &&
        Objects.equals(this.roleId, shiftsGetShiftByIdResponseData.roleId) &&
        Objects.equals(this.notes, shiftsGetShiftByIdResponseData.notes) &&
        Objects.equals(this.draft, shiftsGetShiftByIdResponseData.draft) &&
        Objects.equals(this.notified, shiftsGetShiftByIdResponseData.notified) &&
        Objects.equals(this.open, shiftsGetShiftByIdResponseData.open) &&
        Objects.equals(this.unassigned, shiftsGetShiftByIdResponseData.unassigned) &&
        Objects.equals(this.unassignedSkillLevel, shiftsGetShiftByIdResponseData.unassignedSkillLevel) &&
        Objects.equals(this.openOfferType, shiftsGetShiftByIdResponseData.openOfferType) &&
        Objects.equals(this.attendanceStatus, shiftsGetShiftByIdResponseData.attendanceStatus) &&
        Objects.equals(this.publishStatus, shiftsGetShiftByIdResponseData.publishStatus) &&
        Objects.equals(this.lateMinuets, shiftsGetShiftByIdResponseData.lateMinuets) &&
        Objects.equals(this.created, shiftsGetShiftByIdResponseData.created) &&
        Objects.equals(this.modified, shiftsGetShiftByIdResponseData.modified) &&
        Objects.equals(this.deleted, shiftsGetShiftByIdResponseData.deleted) &&
        Objects.equals(this.softDeleted, shiftsGetShiftByIdResponseData.softDeleted) &&
        Objects.equals(this.station, shiftsGetShiftByIdResponseData.station) &&
        Objects.equals(this.stationName, shiftsGetShiftByIdResponseData.stationName) &&
        Objects.equals(this.stationId, shiftsGetShiftByIdResponseData.stationId) &&
        Objects.equals(this.breaks, shiftsGetShiftByIdResponseData.breaks)&&
        Objects.equals(this.additionalProperties, shiftsGetShiftByIdResponseData.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, start, end, close, businessDecline, hourlyWage, departmentId, locationId, roleId, notes, draft, notified, open, unassigned, unassignedSkillLevel, openOfferType, attendanceStatus, publishStatus, lateMinuets, created, modified, deleted, softDeleted, station, stationName, stationId, breaks, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShiftsGetShiftByIdResponseData {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    close: ").append(toIndentedString(close)).append("\n");
    sb.append("    businessDecline: ").append(toIndentedString(businessDecline)).append("\n");
    sb.append("    hourlyWage: ").append(toIndentedString(hourlyWage)).append("\n");
    sb.append("    departmentId: ").append(toIndentedString(departmentId)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    roleId: ").append(toIndentedString(roleId)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    draft: ").append(toIndentedString(draft)).append("\n");
    sb.append("    notified: ").append(toIndentedString(notified)).append("\n");
    sb.append("    open: ").append(toIndentedString(open)).append("\n");
    sb.append("    unassigned: ").append(toIndentedString(unassigned)).append("\n");
    sb.append("    unassignedSkillLevel: ").append(toIndentedString(unassignedSkillLevel)).append("\n");
    sb.append("    openOfferType: ").append(toIndentedString(openOfferType)).append("\n");
    sb.append("    attendanceStatus: ").append(toIndentedString(attendanceStatus)).append("\n");
    sb.append("    publishStatus: ").append(toIndentedString(publishStatus)).append("\n");
    sb.append("    lateMinuets: ").append(toIndentedString(lateMinuets)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    softDeleted: ").append(toIndentedString(softDeleted)).append("\n");
    sb.append("    station: ").append(toIndentedString(station)).append("\n");
    sb.append("    stationName: ").append(toIndentedString(stationName)).append("\n");
    sb.append("    stationId: ").append(toIndentedString(stationId)).append("\n");
    sb.append("    breaks: ").append(toIndentedString(breaks)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("user_id");
    openapiFields.add("start");
    openapiFields.add("end");
    openapiFields.add("close");
    openapiFields.add("business_decline");
    openapiFields.add("hourly_wage");
    openapiFields.add("department_id");
    openapiFields.add("location_id");
    openapiFields.add("role_id");
    openapiFields.add("notes");
    openapiFields.add("draft");
    openapiFields.add("notified");
    openapiFields.add("open");
    openapiFields.add("unassigned");
    openapiFields.add("unassigned_skill_level");
    openapiFields.add("open_offer_type");
    openapiFields.add("attendance_status");
    openapiFields.add("publish_status");
    openapiFields.add("late_minuets");
    openapiFields.add("created");
    openapiFields.add("modified");
    openapiFields.add("deleted");
    openapiFields.add("soft_deleted");
    openapiFields.add("station");
    openapiFields.add("station_name");
    openapiFields.add("station_id");
    openapiFields.add("breaks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("user_id");
    openapiRequiredFields.add("start");
    openapiRequiredFields.add("end");
    openapiRequiredFields.add("close");
    openapiRequiredFields.add("business_decline");
    openapiRequiredFields.add("department_id");
    openapiRequiredFields.add("location_id");
    openapiRequiredFields.add("role_id");
    openapiRequiredFields.add("notes");
    openapiRequiredFields.add("draft");
    openapiRequiredFields.add("notified");
    openapiRequiredFields.add("open");
    openapiRequiredFields.add("unassigned");
    openapiRequiredFields.add("unassigned_skill_level");
    openapiRequiredFields.add("open_offer_type");
    openapiRequiredFields.add("attendance_status");
    openapiRequiredFields.add("publish_status");
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("modified");
    openapiRequiredFields.add("deleted");
    openapiRequiredFields.add("soft_deleted");
    openapiRequiredFields.add("station");
    openapiRequiredFields.add("station_name");
    openapiRequiredFields.add("station_id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ShiftsGetShiftByIdResponseData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ShiftsGetShiftByIdResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShiftsGetShiftByIdResponseData is not found in the empty JSON string", ShiftsGetShiftByIdResponseData.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ShiftsGetShiftByIdResponseData.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if (!jsonObj.get("open_offer_type").isJsonNull() && !jsonObj.get("open_offer_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `open_offer_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("open_offer_type").toString()));
      }
      if (!jsonObj.get("attendance_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attendance_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attendance_status").toString()));
      }
      if (!jsonObj.get("publish_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publish_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publish_status").toString()));
      }
      if (!jsonObj.get("soft_deleted").isJsonNull() && !jsonObj.get("soft_deleted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `soft_deleted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("soft_deleted").toString()));
      }
      if (!jsonObj.get("station_name").isJsonNull() && !jsonObj.get("station_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `station_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("station_name").toString()));
      }
      if (jsonObj.get("breaks") != null && !jsonObj.get("breaks").isJsonNull()) {
        JsonArray jsonArraybreaks = jsonObj.getAsJsonArray("breaks");
        if (jsonArraybreaks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("breaks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `breaks` to be an array in the JSON string but got `%s`", jsonObj.get("breaks").toString()));
          }

          // validate the optional field `breaks` (array)
          for (int i = 0; i < jsonArraybreaks.size(); i++) {
            ShiftsListResponseDataInnerBreaksInner.validateJsonObject(jsonArraybreaks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShiftsGetShiftByIdResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShiftsGetShiftByIdResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShiftsGetShiftByIdResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShiftsGetShiftByIdResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<ShiftsGetShiftByIdResponseData>() {
           @Override
           public void write(JsonWriter out, ShiftsGetShiftByIdResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ShiftsGetShiftByIdResponseData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ShiftsGetShiftByIdResponseData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ShiftsGetShiftByIdResponseData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ShiftsGetShiftByIdResponseData
  * @throws IOException if the JSON string is invalid with respect to ShiftsGetShiftByIdResponseData
  */
  public static ShiftsGetShiftByIdResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShiftsGetShiftByIdResponseData.class);
  }

 /**
  * Convert an instance of ShiftsGetShiftByIdResponseData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

