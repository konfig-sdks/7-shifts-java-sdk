/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ReceiptsGetSummaryResponseDataInnerClosed;
import com.konfigthis.client.model.ReceiptsGetSummaryResponseDataInnerDeleted;
import com.konfigthis.client.model.ReceiptsGetSummaryResponseDataInnerOpen;
import com.konfigthis.client.model.ReceiptsGetSummaryResponseDataInnerVoided;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ReceiptsGetSummaryResponseDataInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ReceiptsGetSummaryResponseDataInner {
  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private LocalDate date;

  public static final String SERIALIZED_NAME_OPEN = "open";
  @SerializedName(SERIALIZED_NAME_OPEN)
  private ReceiptsGetSummaryResponseDataInnerOpen open;

  public static final String SERIALIZED_NAME_CLOSED = "closed";
  @SerializedName(SERIALIZED_NAME_CLOSED)
  private ReceiptsGetSummaryResponseDataInnerClosed closed;

  public static final String SERIALIZED_NAME_VOIDED = "voided";
  @SerializedName(SERIALIZED_NAME_VOIDED)
  private ReceiptsGetSummaryResponseDataInnerVoided voided;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private ReceiptsGetSummaryResponseDataInnerDeleted deleted;

  public ReceiptsGetSummaryResponseDataInner() {
  }

  public ReceiptsGetSummaryResponseDataInner date(LocalDate date) {
    
    
    
    
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LocalDate getDate() {
    return date;
  }


  public void setDate(LocalDate date) {
    
    
    
    this.date = date;
  }


  public ReceiptsGetSummaryResponseDataInner open(ReceiptsGetSummaryResponseDataInnerOpen open) {
    
    
    
    
    this.open = open;
    return this;
  }

   /**
   * Get open
   * @return open
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReceiptsGetSummaryResponseDataInnerOpen getOpen() {
    return open;
  }


  public void setOpen(ReceiptsGetSummaryResponseDataInnerOpen open) {
    
    
    
    this.open = open;
  }


  public ReceiptsGetSummaryResponseDataInner closed(ReceiptsGetSummaryResponseDataInnerClosed closed) {
    
    
    
    
    this.closed = closed;
    return this;
  }

   /**
   * Get closed
   * @return closed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReceiptsGetSummaryResponseDataInnerClosed getClosed() {
    return closed;
  }


  public void setClosed(ReceiptsGetSummaryResponseDataInnerClosed closed) {
    
    
    
    this.closed = closed;
  }


  public ReceiptsGetSummaryResponseDataInner voided(ReceiptsGetSummaryResponseDataInnerVoided voided) {
    
    
    
    
    this.voided = voided;
    return this;
  }

   /**
   * Get voided
   * @return voided
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReceiptsGetSummaryResponseDataInnerVoided getVoided() {
    return voided;
  }


  public void setVoided(ReceiptsGetSummaryResponseDataInnerVoided voided) {
    
    
    
    this.voided = voided;
  }


  public ReceiptsGetSummaryResponseDataInner deleted(ReceiptsGetSummaryResponseDataInnerDeleted deleted) {
    
    
    
    
    this.deleted = deleted;
    return this;
  }

   /**
   * Get deleted
   * @return deleted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReceiptsGetSummaryResponseDataInnerDeleted getDeleted() {
    return deleted;
  }


  public void setDeleted(ReceiptsGetSummaryResponseDataInnerDeleted deleted) {
    
    
    
    this.deleted = deleted;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReceiptsGetSummaryResponseDataInner instance itself
   */
  public ReceiptsGetSummaryResponseDataInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReceiptsGetSummaryResponseDataInner receiptsGetSummaryResponseDataInner = (ReceiptsGetSummaryResponseDataInner) o;
    return Objects.equals(this.date, receiptsGetSummaryResponseDataInner.date) &&
        Objects.equals(this.open, receiptsGetSummaryResponseDataInner.open) &&
        Objects.equals(this.closed, receiptsGetSummaryResponseDataInner.closed) &&
        Objects.equals(this.voided, receiptsGetSummaryResponseDataInner.voided) &&
        Objects.equals(this.deleted, receiptsGetSummaryResponseDataInner.deleted)&&
        Objects.equals(this.additionalProperties, receiptsGetSummaryResponseDataInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, open, closed, voided, deleted, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReceiptsGetSummaryResponseDataInner {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    open: ").append(toIndentedString(open)).append("\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    voided: ").append(toIndentedString(voided)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date");
    openapiFields.add("open");
    openapiFields.add("closed");
    openapiFields.add("voided");
    openapiFields.add("deleted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReceiptsGetSummaryResponseDataInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReceiptsGetSummaryResponseDataInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReceiptsGetSummaryResponseDataInner is not found in the empty JSON string", ReceiptsGetSummaryResponseDataInner.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `open`
      if (jsonObj.get("open") != null && !jsonObj.get("open").isJsonNull()) {
        ReceiptsGetSummaryResponseDataInnerOpen.validateJsonObject(jsonObj.getAsJsonObject("open"));
      }
      // validate the optional field `closed`
      if (jsonObj.get("closed") != null && !jsonObj.get("closed").isJsonNull()) {
        ReceiptsGetSummaryResponseDataInnerClosed.validateJsonObject(jsonObj.getAsJsonObject("closed"));
      }
      // validate the optional field `voided`
      if (jsonObj.get("voided") != null && !jsonObj.get("voided").isJsonNull()) {
        ReceiptsGetSummaryResponseDataInnerVoided.validateJsonObject(jsonObj.getAsJsonObject("voided"));
      }
      // validate the optional field `deleted`
      if (jsonObj.get("deleted") != null && !jsonObj.get("deleted").isJsonNull()) {
        ReceiptsGetSummaryResponseDataInnerDeleted.validateJsonObject(jsonObj.getAsJsonObject("deleted"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReceiptsGetSummaryResponseDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReceiptsGetSummaryResponseDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReceiptsGetSummaryResponseDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReceiptsGetSummaryResponseDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ReceiptsGetSummaryResponseDataInner>() {
           @Override
           public void write(JsonWriter out, ReceiptsGetSummaryResponseDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReceiptsGetSummaryResponseDataInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ReceiptsGetSummaryResponseDataInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReceiptsGetSummaryResponseDataInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReceiptsGetSummaryResponseDataInner
  * @throws IOException if the JSON string is invalid with respect to ReceiptsGetSummaryResponseDataInner
  */
  public static ReceiptsGetSummaryResponseDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReceiptsGetSummaryResponseDataInner.class);
  }

 /**
  * Convert an instance of ReceiptsGetSummaryResponseDataInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

