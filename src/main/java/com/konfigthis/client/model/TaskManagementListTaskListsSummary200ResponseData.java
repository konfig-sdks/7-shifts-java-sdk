/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TaskManagementListTaskListsSummary200ResponseDataTaskListsInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TaskManagementListTaskListsSummary200ResponseData
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TaskManagementListTaskListsSummary200ResponseData {
  public static final String SERIALIZED_NAME_TOTAL_COMPLETED_PERCENTAGE = "total_completed_percentage";
  @SerializedName(SERIALIZED_NAME_TOTAL_COMPLETED_PERCENTAGE)
  private Integer totalCompletedPercentage;

  public static final String SERIALIZED_NAME_TOTAL_IN_PROGRESS_PERCENTAGE = "total_in_progress_percentage";
  @SerializedName(SERIALIZED_NAME_TOTAL_IN_PROGRESS_PERCENTAGE)
  private Integer totalInProgressPercentage;

  public static final String SERIALIZED_NAME_TOTAL_INCOMPLETE_PERCENTAGE = "total_incomplete_percentage";
  @SerializedName(SERIALIZED_NAME_TOTAL_INCOMPLETE_PERCENTAGE)
  private Integer totalIncompletePercentage;

  public static final String SERIALIZED_NAME_REPORT_TIME = "report_time";
  @SerializedName(SERIALIZED_NAME_REPORT_TIME)
  private OffsetDateTime reportTime;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_HAS_RECENT_TASK_COMPLETED = "has_recent_task_completed";
  @SerializedName(SERIALIZED_NAME_HAS_RECENT_TASK_COMPLETED)
  private Boolean hasRecentTaskCompleted;

  public static final String SERIALIZED_NAME_TASK_LISTS = "task_lists";
  @SerializedName(SERIALIZED_NAME_TASK_LISTS)
  private List<TaskManagementListTaskListsSummary200ResponseDataTaskListsInner> taskLists = new ArrayList<>();

  public TaskManagementListTaskListsSummary200ResponseData() {
  }

  public TaskManagementListTaskListsSummary200ResponseData totalCompletedPercentage(Integer totalCompletedPercentage) {
    
    
    
    
    this.totalCompletedPercentage = totalCompletedPercentage;
    return this;
  }

   /**
   * Get totalCompletedPercentage
   * @return totalCompletedPercentage
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getTotalCompletedPercentage() {
    return totalCompletedPercentage;
  }


  public void setTotalCompletedPercentage(Integer totalCompletedPercentage) {
    
    
    
    this.totalCompletedPercentage = totalCompletedPercentage;
  }


  public TaskManagementListTaskListsSummary200ResponseData totalInProgressPercentage(Integer totalInProgressPercentage) {
    
    
    
    
    this.totalInProgressPercentage = totalInProgressPercentage;
    return this;
  }

   /**
   * Get totalInProgressPercentage
   * @return totalInProgressPercentage
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getTotalInProgressPercentage() {
    return totalInProgressPercentage;
  }


  public void setTotalInProgressPercentage(Integer totalInProgressPercentage) {
    
    
    
    this.totalInProgressPercentage = totalInProgressPercentage;
  }


  public TaskManagementListTaskListsSummary200ResponseData totalIncompletePercentage(Integer totalIncompletePercentage) {
    
    
    
    
    this.totalIncompletePercentage = totalIncompletePercentage;
    return this;
  }

   /**
   * Get totalIncompletePercentage
   * @return totalIncompletePercentage
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getTotalIncompletePercentage() {
    return totalIncompletePercentage;
  }


  public void setTotalIncompletePercentage(Integer totalIncompletePercentage) {
    
    
    
    this.totalIncompletePercentage = totalIncompletePercentage;
  }


  public TaskManagementListTaskListsSummary200ResponseData reportTime(OffsetDateTime reportTime) {
    
    
    
    
    this.reportTime = reportTime;
    return this;
  }

   /**
   * Get reportTime
   * @return reportTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2022-06-24T13:00Z", required = true, value = "")

  public OffsetDateTime getReportTime() {
    return reportTime;
  }


  public void setReportTime(OffsetDateTime reportTime) {
    
    
    
    this.reportTime = reportTime;
  }


  public TaskManagementListTaskListsSummary200ResponseData date(String date) {
    
    
    
    
    this.date = date;
    return this;
  }

   /**
   * A date with YYYY-MM-DD format
   * @return date
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-01-01", required = true, value = "A date with YYYY-MM-DD format")

  public String getDate() {
    return date;
  }


  public void setDate(String date) {
    
    
    
    this.date = date;
  }


  public TaskManagementListTaskListsSummary200ResponseData hasRecentTaskCompleted(Boolean hasRecentTaskCompleted) {
    
    
    
    
    this.hasRecentTaskCompleted = hasRecentTaskCompleted;
    return this;
  }

   /**
   * Get hasRecentTaskCompleted
   * @return hasRecentTaskCompleted
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getHasRecentTaskCompleted() {
    return hasRecentTaskCompleted;
  }


  public void setHasRecentTaskCompleted(Boolean hasRecentTaskCompleted) {
    
    
    
    this.hasRecentTaskCompleted = hasRecentTaskCompleted;
  }


  public TaskManagementListTaskListsSummary200ResponseData taskLists(List<TaskManagementListTaskListsSummary200ResponseDataTaskListsInner> taskLists) {
    
    
    
    
    this.taskLists = taskLists;
    return this;
  }

  public TaskManagementListTaskListsSummary200ResponseData addTaskListsItem(TaskManagementListTaskListsSummary200ResponseDataTaskListsInner taskListsItem) {
    this.taskLists.add(taskListsItem);
    return this;
  }

   /**
   * Get taskLists
   * @return taskLists
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<TaskManagementListTaskListsSummary200ResponseDataTaskListsInner> getTaskLists() {
    return taskLists;
  }


  public void setTaskLists(List<TaskManagementListTaskListsSummary200ResponseDataTaskListsInner> taskLists) {
    
    
    
    this.taskLists = taskLists;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TaskManagementListTaskListsSummary200ResponseData instance itself
   */
  public TaskManagementListTaskListsSummary200ResponseData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskManagementListTaskListsSummary200ResponseData taskManagementListTaskListsSummary200ResponseData = (TaskManagementListTaskListsSummary200ResponseData) o;
    return Objects.equals(this.totalCompletedPercentage, taskManagementListTaskListsSummary200ResponseData.totalCompletedPercentage) &&
        Objects.equals(this.totalInProgressPercentage, taskManagementListTaskListsSummary200ResponseData.totalInProgressPercentage) &&
        Objects.equals(this.totalIncompletePercentage, taskManagementListTaskListsSummary200ResponseData.totalIncompletePercentage) &&
        Objects.equals(this.reportTime, taskManagementListTaskListsSummary200ResponseData.reportTime) &&
        Objects.equals(this.date, taskManagementListTaskListsSummary200ResponseData.date) &&
        Objects.equals(this.hasRecentTaskCompleted, taskManagementListTaskListsSummary200ResponseData.hasRecentTaskCompleted) &&
        Objects.equals(this.taskLists, taskManagementListTaskListsSummary200ResponseData.taskLists)&&
        Objects.equals(this.additionalProperties, taskManagementListTaskListsSummary200ResponseData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalCompletedPercentage, totalInProgressPercentage, totalIncompletePercentage, reportTime, date, hasRecentTaskCompleted, taskLists, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskManagementListTaskListsSummary200ResponseData {\n");
    sb.append("    totalCompletedPercentage: ").append(toIndentedString(totalCompletedPercentage)).append("\n");
    sb.append("    totalInProgressPercentage: ").append(toIndentedString(totalInProgressPercentage)).append("\n");
    sb.append("    totalIncompletePercentage: ").append(toIndentedString(totalIncompletePercentage)).append("\n");
    sb.append("    reportTime: ").append(toIndentedString(reportTime)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    hasRecentTaskCompleted: ").append(toIndentedString(hasRecentTaskCompleted)).append("\n");
    sb.append("    taskLists: ").append(toIndentedString(taskLists)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("total_completed_percentage");
    openapiFields.add("total_in_progress_percentage");
    openapiFields.add("total_incomplete_percentage");
    openapiFields.add("report_time");
    openapiFields.add("date");
    openapiFields.add("has_recent_task_completed");
    openapiFields.add("task_lists");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("total_completed_percentage");
    openapiRequiredFields.add("total_in_progress_percentage");
    openapiRequiredFields.add("total_incomplete_percentage");
    openapiRequiredFields.add("report_time");
    openapiRequiredFields.add("date");
    openapiRequiredFields.add("has_recent_task_completed");
    openapiRequiredFields.add("task_lists");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TaskManagementListTaskListsSummary200ResponseData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TaskManagementListTaskListsSummary200ResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskManagementListTaskListsSummary200ResponseData is not found in the empty JSON string", TaskManagementListTaskListsSummary200ResponseData.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TaskManagementListTaskListsSummary200ResponseData.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("task_lists").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `task_lists` to be an array in the JSON string but got `%s`", jsonObj.get("task_lists").toString()));
      }

      JsonArray jsonArraytaskLists = jsonObj.getAsJsonArray("task_lists");
      // validate the required field `task_lists` (array)
      for (int i = 0; i < jsonArraytaskLists.size(); i++) {
        TaskManagementListTaskListsSummary200ResponseDataTaskListsInner.validateJsonObject(jsonArraytaskLists.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskManagementListTaskListsSummary200ResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskManagementListTaskListsSummary200ResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskManagementListTaskListsSummary200ResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskManagementListTaskListsSummary200ResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskManagementListTaskListsSummary200ResponseData>() {
           @Override
           public void write(JsonWriter out, TaskManagementListTaskListsSummary200ResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskManagementListTaskListsSummary200ResponseData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TaskManagementListTaskListsSummary200ResponseData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TaskManagementListTaskListsSummary200ResponseData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TaskManagementListTaskListsSummary200ResponseData
  * @throws IOException if the JSON string is invalid with respect to TaskManagementListTaskListsSummary200ResponseData
  */
  public static TaskManagementListTaskListsSummary200ResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskManagementListTaskListsSummary200ResponseData.class);
  }

 /**
  * Convert an instance of TaskManagementListTaskListsSummary200ResponseData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

