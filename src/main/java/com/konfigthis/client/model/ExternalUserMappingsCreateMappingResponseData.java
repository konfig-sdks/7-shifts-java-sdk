/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ExternalUserMappingsCreateMappingResponseData
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ExternalUserMappingsCreateMappingResponseData {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_EXTERNAL_USER_ID = "external_user_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_USER_ID)
  private String externalUserId;

  public static final String SERIALIZED_NAME_COMPANY_ID = "company_id";
  @SerializedName(SERIALIZED_NAME_COMPANY_ID)
  private Integer companyId;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private Integer locationId;

  public static final String SERIALIZED_NAME_APPLICATION_NAME = "application_name";
  @SerializedName(SERIALIZED_NAME_APPLICATION_NAME)
  private String applicationName;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_USER_ACTIVE = "user_active";
  @SerializedName(SERIALIZED_NAME_USER_ACTIVE)
  private Boolean userActive;

  public ExternalUserMappingsCreateMappingResponseData() {
  }

  public ExternalUserMappingsCreateMappingResponseData id(Integer id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Mapping ID
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Mapping ID")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    
    
    
    this.id = id;
  }


  public ExternalUserMappingsCreateMappingResponseData userId(Integer userId) {
    
    
    
    
    this.userId = userId;
    return this;
  }

   /**
   * User ID in 7Shifts
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "User ID in 7Shifts")

  public Integer getUserId() {
    return userId;
  }


  public void setUserId(Integer userId) {
    
    
    
    this.userId = userId;
  }


  public ExternalUserMappingsCreateMappingResponseData externalUserId(String externalUserId) {
    
    
    
    
    this.externalUserId = externalUserId;
    return this;
  }

   /**
   * User ID in External System
   * @return externalUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "User ID in External System")

  public String getExternalUserId() {
    return externalUserId;
  }


  public void setExternalUserId(String externalUserId) {
    
    
    
    this.externalUserId = externalUserId;
  }


  public ExternalUserMappingsCreateMappingResponseData companyId(Integer companyId) {
    
    
    
    
    this.companyId = companyId;
    return this;
  }

   /**
   * Company ID
   * @return companyId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "Company ID")

  public Integer getCompanyId() {
    return companyId;
  }


  public void setCompanyId(Integer companyId) {
    
    
    
    this.companyId = companyId;
  }


  public ExternalUserMappingsCreateMappingResponseData locationId(Integer locationId) {
    
    
    
    
    this.locationId = locationId;
    return this;
  }

   /**
   * Location ID
   * @return locationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "Location ID")

  public Integer getLocationId() {
    return locationId;
  }


  public void setLocationId(Integer locationId) {
    
    
    
    this.locationId = locationId;
  }


  public ExternalUserMappingsCreateMappingResponseData applicationName(String applicationName) {
    
    
    
    
    this.applicationName = applicationName;
    return this;
  }

   /**
   * Name key of the application this mapping is connected with
   * @return applicationName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name key of the application this mapping is connected with")

  public String getApplicationName() {
    return applicationName;
  }


  public void setApplicationName(String applicationName) {
    
    
    
    this.applicationName = applicationName;
  }


  public ExternalUserMappingsCreateMappingResponseData created(OffsetDateTime created) {
    
    
    
    
    this.created = created;
    return this;
  }

   /**
   * The ISO8601 date and time in UTC when the mapping was created
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-01-01T00:00Z", required = true, value = "The ISO8601 date and time in UTC when the mapping was created")

  public OffsetDateTime getCreated() {
    return created;
  }


  public void setCreated(OffsetDateTime created) {
    
    
    
    this.created = created;
  }


  public ExternalUserMappingsCreateMappingResponseData modified(OffsetDateTime modified) {
    
    
    
    
    this.modified = modified;
    return this;
  }

   /**
   * The ISO8601 date and time in UTC when the mapping was modified
   * @return modified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-01-01T00:00Z", required = true, value = "The ISO8601 date and time in UTC when the mapping was modified")

  public OffsetDateTime getModified() {
    return modified;
  }


  public void setModified(OffsetDateTime modified) {
    
    
    
    this.modified = modified;
  }


  public ExternalUserMappingsCreateMappingResponseData userActive(Boolean userActive) {
    
    
    
    
    this.userActive = userActive;
    return this;
  }

   /**
   * Boolean indicating whether the mapped 7Shift user is currently active
   * @return userActive
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Boolean indicating whether the mapped 7Shift user is currently active")

  public Boolean getUserActive() {
    return userActive;
  }


  public void setUserActive(Boolean userActive) {
    
    
    
    this.userActive = userActive;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ExternalUserMappingsCreateMappingResponseData instance itself
   */
  public ExternalUserMappingsCreateMappingResponseData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalUserMappingsCreateMappingResponseData externalUserMappingsCreateMappingResponseData = (ExternalUserMappingsCreateMappingResponseData) o;
    return Objects.equals(this.id, externalUserMappingsCreateMappingResponseData.id) &&
        Objects.equals(this.userId, externalUserMappingsCreateMappingResponseData.userId) &&
        Objects.equals(this.externalUserId, externalUserMappingsCreateMappingResponseData.externalUserId) &&
        Objects.equals(this.companyId, externalUserMappingsCreateMappingResponseData.companyId) &&
        Objects.equals(this.locationId, externalUserMappingsCreateMappingResponseData.locationId) &&
        Objects.equals(this.applicationName, externalUserMappingsCreateMappingResponseData.applicationName) &&
        Objects.equals(this.created, externalUserMappingsCreateMappingResponseData.created) &&
        Objects.equals(this.modified, externalUserMappingsCreateMappingResponseData.modified) &&
        Objects.equals(this.userActive, externalUserMappingsCreateMappingResponseData.userActive)&&
        Objects.equals(this.additionalProperties, externalUserMappingsCreateMappingResponseData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, externalUserId, companyId, locationId, applicationName, created, modified, userActive, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalUserMappingsCreateMappingResponseData {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    externalUserId: ").append(toIndentedString(externalUserId)).append("\n");
    sb.append("    companyId: ").append(toIndentedString(companyId)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    userActive: ").append(toIndentedString(userActive)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("user_id");
    openapiFields.add("external_user_id");
    openapiFields.add("company_id");
    openapiFields.add("location_id");
    openapiFields.add("application_name");
    openapiFields.add("created");
    openapiFields.add("modified");
    openapiFields.add("user_active");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("user_id");
    openapiRequiredFields.add("external_user_id");
    openapiRequiredFields.add("company_id");
    openapiRequiredFields.add("location_id");
    openapiRequiredFields.add("application_name");
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("modified");
    openapiRequiredFields.add("user_active");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExternalUserMappingsCreateMappingResponseData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExternalUserMappingsCreateMappingResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExternalUserMappingsCreateMappingResponseData is not found in the empty JSON string", ExternalUserMappingsCreateMappingResponseData.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExternalUserMappingsCreateMappingResponseData.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("external_user_id").isJsonNull() && !jsonObj.get("external_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_user_id").toString()));
      }
      if (!jsonObj.get("application_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `application_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("application_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExternalUserMappingsCreateMappingResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExternalUserMappingsCreateMappingResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExternalUserMappingsCreateMappingResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExternalUserMappingsCreateMappingResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<ExternalUserMappingsCreateMappingResponseData>() {
           @Override
           public void write(JsonWriter out, ExternalUserMappingsCreateMappingResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ExternalUserMappingsCreateMappingResponseData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ExternalUserMappingsCreateMappingResponseData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExternalUserMappingsCreateMappingResponseData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExternalUserMappingsCreateMappingResponseData
  * @throws IOException if the JSON string is invalid with respect to ExternalUserMappingsCreateMappingResponseData
  */
  public static ExternalUserMappingsCreateMappingResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExternalUserMappingsCreateMappingResponseData.class);
  }

 /**
  * Convert an instance of ExternalUserMappingsCreateMappingResponseData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

