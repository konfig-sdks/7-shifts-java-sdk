/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ReceiptsGetSummaryResponseDataInnerVoided
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ReceiptsGetSummaryResponseDataInnerVoided {
  public static final String SERIALIZED_NAME_RECEIPT_COUNT = "receipt_count";
  @SerializedName(SERIALIZED_NAME_RECEIPT_COUNT)
  private Long receiptCount;

  public static final String SERIALIZED_NAME_NET_TOTAL = "net_total";
  @SerializedName(SERIALIZED_NAME_NET_TOTAL)
  private Long netTotal;

  public static final String SERIALIZED_NAME_GROSS_TOTAL = "gross_total";
  @SerializedName(SERIALIZED_NAME_GROSS_TOTAL)
  private Long grossTotal;

  public static final String SERIALIZED_NAME_TIP_TOTAL = "tip_total";
  @SerializedName(SERIALIZED_NAME_TIP_TOTAL)
  private Long tipTotal;

  public static final String SERIALIZED_NAME_RECEIPT_DISCOUNTS = "receipt_discounts";
  @SerializedName(SERIALIZED_NAME_RECEIPT_DISCOUNTS)
  private Long receiptDiscounts;

  public ReceiptsGetSummaryResponseDataInnerVoided() {
  }

  public ReceiptsGetSummaryResponseDataInnerVoided receiptCount(Long receiptCount) {
    
    
    
    
    this.receiptCount = receiptCount;
    return this;
  }

   /**
   * Get receiptCount
   * @return receiptCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "")

  public Long getReceiptCount() {
    return receiptCount;
  }


  public void setReceiptCount(Long receiptCount) {
    
    
    
    this.receiptCount = receiptCount;
  }


  public ReceiptsGetSummaryResponseDataInnerVoided netTotal(Long netTotal) {
    
    
    
    
    this.netTotal = netTotal;
    return this;
  }

   /**
   * Get netTotal
   * @return netTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "")

  public Long getNetTotal() {
    return netTotal;
  }


  public void setNetTotal(Long netTotal) {
    
    
    
    this.netTotal = netTotal;
  }


  public ReceiptsGetSummaryResponseDataInnerVoided grossTotal(Long grossTotal) {
    
    
    
    
    this.grossTotal = grossTotal;
    return this;
  }

   /**
   * Get grossTotal
   * @return grossTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "")

  public Long getGrossTotal() {
    return grossTotal;
  }


  public void setGrossTotal(Long grossTotal) {
    
    
    
    this.grossTotal = grossTotal;
  }


  public ReceiptsGetSummaryResponseDataInnerVoided tipTotal(Long tipTotal) {
    
    
    
    
    this.tipTotal = tipTotal;
    return this;
  }

   /**
   * Get tipTotal
   * @return tipTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "")

  public Long getTipTotal() {
    return tipTotal;
  }


  public void setTipTotal(Long tipTotal) {
    
    
    
    this.tipTotal = tipTotal;
  }


  public ReceiptsGetSummaryResponseDataInnerVoided receiptDiscounts(Long receiptDiscounts) {
    
    
    
    
    this.receiptDiscounts = receiptDiscounts;
    return this;
  }

   /**
   * Get receiptDiscounts
   * @return receiptDiscounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "")

  public Long getReceiptDiscounts() {
    return receiptDiscounts;
  }


  public void setReceiptDiscounts(Long receiptDiscounts) {
    
    
    
    this.receiptDiscounts = receiptDiscounts;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReceiptsGetSummaryResponseDataInnerVoided instance itself
   */
  public ReceiptsGetSummaryResponseDataInnerVoided putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReceiptsGetSummaryResponseDataInnerVoided receiptsGetSummaryResponseDataInnerVoided = (ReceiptsGetSummaryResponseDataInnerVoided) o;
    return Objects.equals(this.receiptCount, receiptsGetSummaryResponseDataInnerVoided.receiptCount) &&
        Objects.equals(this.netTotal, receiptsGetSummaryResponseDataInnerVoided.netTotal) &&
        Objects.equals(this.grossTotal, receiptsGetSummaryResponseDataInnerVoided.grossTotal) &&
        Objects.equals(this.tipTotal, receiptsGetSummaryResponseDataInnerVoided.tipTotal) &&
        Objects.equals(this.receiptDiscounts, receiptsGetSummaryResponseDataInnerVoided.receiptDiscounts)&&
        Objects.equals(this.additionalProperties, receiptsGetSummaryResponseDataInnerVoided.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(receiptCount, netTotal, grossTotal, tipTotal, receiptDiscounts, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReceiptsGetSummaryResponseDataInnerVoided {\n");
    sb.append("    receiptCount: ").append(toIndentedString(receiptCount)).append("\n");
    sb.append("    netTotal: ").append(toIndentedString(netTotal)).append("\n");
    sb.append("    grossTotal: ").append(toIndentedString(grossTotal)).append("\n");
    sb.append("    tipTotal: ").append(toIndentedString(tipTotal)).append("\n");
    sb.append("    receiptDiscounts: ").append(toIndentedString(receiptDiscounts)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("receipt_count");
    openapiFields.add("net_total");
    openapiFields.add("gross_total");
    openapiFields.add("tip_total");
    openapiFields.add("receipt_discounts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReceiptsGetSummaryResponseDataInnerVoided
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReceiptsGetSummaryResponseDataInnerVoided.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReceiptsGetSummaryResponseDataInnerVoided is not found in the empty JSON string", ReceiptsGetSummaryResponseDataInnerVoided.openapiRequiredFields.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReceiptsGetSummaryResponseDataInnerVoided.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReceiptsGetSummaryResponseDataInnerVoided' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReceiptsGetSummaryResponseDataInnerVoided> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReceiptsGetSummaryResponseDataInnerVoided.class));

       return (TypeAdapter<T>) new TypeAdapter<ReceiptsGetSummaryResponseDataInnerVoided>() {
           @Override
           public void write(JsonWriter out, ReceiptsGetSummaryResponseDataInnerVoided value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReceiptsGetSummaryResponseDataInnerVoided read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ReceiptsGetSummaryResponseDataInnerVoided instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReceiptsGetSummaryResponseDataInnerVoided given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReceiptsGetSummaryResponseDataInnerVoided
  * @throws IOException if the JSON string is invalid with respect to ReceiptsGetSummaryResponseDataInnerVoided
  */
  public static ReceiptsGetSummaryResponseDataInnerVoided fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReceiptsGetSummaryResponseDataInnerVoided.class);
  }

 /**
  * Convert an instance of ReceiptsGetSummaryResponseDataInnerVoided to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

