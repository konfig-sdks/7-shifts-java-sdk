/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInnerFiltersInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Tip pool stakeholders (contributors and receivers)
 */
@ApiModel(description = "Tip pool stakeholders (contributors and receivers)")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner {
  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private UUID uuid;

  public static final String SERIALIZED_NAME_TIP_POOL_SETTINGS_UUID = "tip_pool_settings_uuid";
  @SerializedName(SERIALIZED_NAME_TIP_POOL_SETTINGS_UUID)
  private UUID tipPoolSettingsUuid;

  /**
   * Whether this is a contributor or a receiver
   */
  @JsonAdapter(StakeholderTypeEnum.Adapter.class)
 public enum StakeholderTypeEnum {
    CONTRIBUTION("CONTRIBUTION"),
    
    DISTRIBUTION("DISTRIBUTION");

    private String value;

    StakeholderTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StakeholderTypeEnum fromValue(String value) {
      for (StakeholderTypeEnum b : StakeholderTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StakeholderTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StakeholderTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StakeholderTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StakeholderTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STAKEHOLDER_TYPE = "stakeholder_type";
  @SerializedName(SERIALIZED_NAME_STAKEHOLDER_TYPE)
  private StakeholderTypeEnum stakeholderType;

  /**
   * Whether this stakeholder represents a role or a department
   */
  @JsonAdapter(StakeholderSubtypeEnum.Adapter.class)
 public enum StakeholderSubtypeEnum {
    ROLE("ROLE"),
    
    DEPARTMENT("DEPARTMENT");

    private String value;

    StakeholderSubtypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StakeholderSubtypeEnum fromValue(String value) {
      for (StakeholderSubtypeEnum b : StakeholderSubtypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StakeholderSubtypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StakeholderSubtypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StakeholderSubtypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StakeholderSubtypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STAKEHOLDER_SUBTYPE = "stakeholder_subtype";
  @SerializedName(SERIALIZED_NAME_STAKEHOLDER_SUBTYPE)
  private StakeholderSubtypeEnum stakeholderSubtype;

  public static final String SERIALIZED_NAME_ROLE_ID = "role_id";
  @SerializedName(SERIALIZED_NAME_ROLE_ID)
  private Long roleId;

  public static final String SERIALIZED_NAME_DEPARTMENT_ID = "department_id";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_ID)
  private Long departmentId;

  public static final String SERIALIZED_NAME_STAKE_AMOUNT = "stake_amount";
  @SerializedName(SERIALIZED_NAME_STAKE_AMOUNT)
  private Float stakeAmount;

  public static final String SERIALIZED_NAME_CONTRIBUTION_METHOD = "contribution_method";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTION_METHOD)
  private String contributionMethod;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInnerFiltersInner> filters = null;

  public TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner() {
  }

  public TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner uuid(UUID uuid) {
    
    
    
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Tip pool stakeholder UUID
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tip pool stakeholder UUID")

  public UUID getUuid() {
    return uuid;
  }


  public void setUuid(UUID uuid) {
    
    
    
    this.uuid = uuid;
  }


  public TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner tipPoolSettingsUuid(UUID tipPoolSettingsUuid) {
    
    
    
    
    this.tipPoolSettingsUuid = tipPoolSettingsUuid;
    return this;
  }

   /**
   * Tip pool settings UUID
   * @return tipPoolSettingsUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tip pool settings UUID")

  public UUID getTipPoolSettingsUuid() {
    return tipPoolSettingsUuid;
  }


  public void setTipPoolSettingsUuid(UUID tipPoolSettingsUuid) {
    
    
    
    this.tipPoolSettingsUuid = tipPoolSettingsUuid;
  }


  public TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner stakeholderType(StakeholderTypeEnum stakeholderType) {
    
    
    
    
    this.stakeholderType = stakeholderType;
    return this;
  }

   /**
   * Whether this is a contributor or a receiver
   * @return stakeholderType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CONTRIBUTION", required = true, value = "Whether this is a contributor or a receiver")

  public StakeholderTypeEnum getStakeholderType() {
    return stakeholderType;
  }


  public void setStakeholderType(StakeholderTypeEnum stakeholderType) {
    
    
    
    this.stakeholderType = stakeholderType;
  }


  public TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner stakeholderSubtype(StakeholderSubtypeEnum stakeholderSubtype) {
    
    
    
    
    this.stakeholderSubtype = stakeholderSubtype;
    return this;
  }

   /**
   * Whether this stakeholder represents a role or a department
   * @return stakeholderSubtype
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ROLE", required = true, value = "Whether this stakeholder represents a role or a department")

  public StakeholderSubtypeEnum getStakeholderSubtype() {
    return stakeholderSubtype;
  }


  public void setStakeholderSubtype(StakeholderSubtypeEnum stakeholderSubtype) {
    
    
    
    this.stakeholderSubtype = stakeholderSubtype;
  }


  public TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner roleId(Long roleId) {
    
    
    
    
    this.roleId = roleId;
    return this;
  }

   /**
   * Role ID (null if stakeholder subtype is not &#39;ROLE&#39;)
   * @return roleId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1234", required = true, value = "Role ID (null if stakeholder subtype is not 'ROLE')")

  public Long getRoleId() {
    return roleId;
  }


  public void setRoleId(Long roleId) {
    
    
    
    this.roleId = roleId;
  }


  public TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner departmentId(Long departmentId) {
    
    
    
    
    this.departmentId = departmentId;
    return this;
  }

   /**
   * Department ID (null if stakeholder subtype is not &#39;DEPARTMENT&#39;)
   * @return departmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1234", required = true, value = "Department ID (null if stakeholder subtype is not 'DEPARTMENT')")

  public Long getDepartmentId() {
    return departmentId;
  }


  public void setDepartmentId(Long departmentId) {
    
    
    
    this.departmentId = departmentId;
  }


  public TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner stakeAmount(Float stakeAmount) {
    
    
    
    
    this.stakeAmount = stakeAmount;
    return this;
  }

   /**
   * Amount of tips they contribute or receive (may be a percentage, number of points, or null, depending on stakeholder type and tip pool distribution type)
   * @return stakeAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5.5", required = true, value = "Amount of tips they contribute or receive (may be a percentage, number of points, or null, depending on stakeholder type and tip pool distribution type)")

  public Float getStakeAmount() {
    return stakeAmount;
  }


  public void setStakeAmount(Float stakeAmount) {
    
    
    
    this.stakeAmount = stakeAmount;
  }


  public TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner contributionMethod(String contributionMethod) {
    
    
    
    
    this.contributionMethod = contributionMethod;
    return this;
  }

   /**
   * If the stakeholder is a contribution stakeholder, this field represents whether they contribute based on percent tips, percent sales or percent remaining tips
   * @return contributionMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "PERCENT_TIPS", required = true, value = "If the stakeholder is a contribution stakeholder, this field represents whether they contribute based on percent tips, percent sales or percent remaining tips")

  public String getContributionMethod() {
    return contributionMethod;
  }


  public void setContributionMethod(String contributionMethod) {
    
    
    
    this.contributionMethod = contributionMethod;
  }


  public TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner filters(List<TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInnerFiltersInner> filters) {
    
    
    
    
    this.filters = filters;
    return this;
  }

  public TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner addFiltersItem(TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInnerFiltersInner filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInnerFiltersInner> getFilters() {
    return filters;
  }


  public void setFilters(List<TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInnerFiltersInner> filters) {
    
    
    
    this.filters = filters;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner instance itself
   */
  public TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner tipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner = (TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner) o;
    return Objects.equals(this.uuid, tipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner.uuid) &&
        Objects.equals(this.tipPoolSettingsUuid, tipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner.tipPoolSettingsUuid) &&
        Objects.equals(this.stakeholderType, tipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner.stakeholderType) &&
        Objects.equals(this.stakeholderSubtype, tipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner.stakeholderSubtype) &&
        Objects.equals(this.roleId, tipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner.roleId) &&
        Objects.equals(this.departmentId, tipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner.departmentId) &&
        Objects.equals(this.stakeAmount, tipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner.stakeAmount) &&
        Objects.equals(this.contributionMethod, tipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner.contributionMethod) &&
        Objects.equals(this.filters, tipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner.filters)&&
        Objects.equals(this.additionalProperties, tipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, tipPoolSettingsUuid, stakeholderType, stakeholderSubtype, roleId, departmentId, stakeAmount, contributionMethod, filters, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner {\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    tipPoolSettingsUuid: ").append(toIndentedString(tipPoolSettingsUuid)).append("\n");
    sb.append("    stakeholderType: ").append(toIndentedString(stakeholderType)).append("\n");
    sb.append("    stakeholderSubtype: ").append(toIndentedString(stakeholderSubtype)).append("\n");
    sb.append("    roleId: ").append(toIndentedString(roleId)).append("\n");
    sb.append("    departmentId: ").append(toIndentedString(departmentId)).append("\n");
    sb.append("    stakeAmount: ").append(toIndentedString(stakeAmount)).append("\n");
    sb.append("    contributionMethod: ").append(toIndentedString(contributionMethod)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("uuid");
    openapiFields.add("tip_pool_settings_uuid");
    openapiFields.add("stakeholder_type");
    openapiFields.add("stakeholder_subtype");
    openapiFields.add("role_id");
    openapiFields.add("department_id");
    openapiFields.add("stake_amount");
    openapiFields.add("contribution_method");
    openapiFields.add("filters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("stakeholder_type");
    openapiRequiredFields.add("stakeholder_subtype");
    openapiRequiredFields.add("role_id");
    openapiRequiredFields.add("department_id");
    openapiRequiredFields.add("stake_amount");
    openapiRequiredFields.add("contribution_method");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner is not found in the empty JSON string", TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("uuid").isJsonNull() && (jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if (!jsonObj.get("tip_pool_settings_uuid").isJsonNull() && (jsonObj.get("tip_pool_settings_uuid") != null && !jsonObj.get("tip_pool_settings_uuid").isJsonNull()) && !jsonObj.get("tip_pool_settings_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tip_pool_settings_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tip_pool_settings_uuid").toString()));
      }
      if (!jsonObj.get("stakeholder_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stakeholder_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stakeholder_type").toString()));
      }
      if (!jsonObj.get("stakeholder_subtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stakeholder_subtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stakeholder_subtype").toString()));
      }
      if (!jsonObj.get("contribution_method").isJsonNull() && !jsonObj.get("contribution_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contribution_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contribution_method").toString()));
      }
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
        if (jsonArrayfilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
          }

          // validate the optional field `filters` (array)
          for (int i = 0; i < jsonArrayfilters.size(); i++) {
            TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInnerFiltersInner.validateJsonObject(jsonArrayfilters.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner>() {
           @Override
           public void write(JsonWriter out, TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner
  * @throws IOException if the JSON string is invalid with respect to TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner
  */
  public static TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner.class);
  }

 /**
  * Convert an instance of TipPoolGetSettingsResponseDataInnerTipPoolStakeholdersInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

