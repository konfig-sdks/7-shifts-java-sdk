/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EngageOverviewByLocationIdResponseDataEmployeeStats;
import com.konfigthis.client.model.EngageOverviewByLocationIdResponseDataEngagementScores;
import com.konfigthis.client.model.EngageOverviewByLocationIdResponseDataLocationStats;
import com.konfigthis.client.model.EngageOverviewByLocationIdResponseDataShiftFeedback;
import com.konfigthis.client.model.EngageOverviewByLocationIdResponseDataTenure;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EngageOverviewByLocationIdResponseData
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EngageOverviewByLocationIdResponseData {
  public static final String SERIALIZED_NAME_LOCATION_STATS = "location_stats";
  @SerializedName(SERIALIZED_NAME_LOCATION_STATS)
  private EngageOverviewByLocationIdResponseDataLocationStats locationStats;

  public static final String SERIALIZED_NAME_EMPLOYEE_STATS = "employee_stats";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_STATS)
  private EngageOverviewByLocationIdResponseDataEmployeeStats employeeStats;

  public static final String SERIALIZED_NAME_ENGAGEMENT_SCORES = "engagement_scores";
  @SerializedName(SERIALIZED_NAME_ENGAGEMENT_SCORES)
  private EngageOverviewByLocationIdResponseDataEngagementScores engagementScores;

  public static final String SERIALIZED_NAME_SHIFT_FEEDBACK = "shift_feedback";
  @SerializedName(SERIALIZED_NAME_SHIFT_FEEDBACK)
  private EngageOverviewByLocationIdResponseDataShiftFeedback shiftFeedback;

  public static final String SERIALIZED_NAME_TENURE = "tenure";
  @SerializedName(SERIALIZED_NAME_TENURE)
  private EngageOverviewByLocationIdResponseDataTenure tenure;

  public EngageOverviewByLocationIdResponseData() {
  }

  public EngageOverviewByLocationIdResponseData locationStats(EngageOverviewByLocationIdResponseDataLocationStats locationStats) {
    
    
    
    
    this.locationStats = locationStats;
    return this;
  }

   /**
   * Get locationStats
   * @return locationStats
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EngageOverviewByLocationIdResponseDataLocationStats getLocationStats() {
    return locationStats;
  }


  public void setLocationStats(EngageOverviewByLocationIdResponseDataLocationStats locationStats) {
    
    
    
    this.locationStats = locationStats;
  }


  public EngageOverviewByLocationIdResponseData employeeStats(EngageOverviewByLocationIdResponseDataEmployeeStats employeeStats) {
    
    
    
    
    this.employeeStats = employeeStats;
    return this;
  }

   /**
   * Get employeeStats
   * @return employeeStats
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EngageOverviewByLocationIdResponseDataEmployeeStats getEmployeeStats() {
    return employeeStats;
  }


  public void setEmployeeStats(EngageOverviewByLocationIdResponseDataEmployeeStats employeeStats) {
    
    
    
    this.employeeStats = employeeStats;
  }


  public EngageOverviewByLocationIdResponseData engagementScores(EngageOverviewByLocationIdResponseDataEngagementScores engagementScores) {
    
    
    
    
    this.engagementScores = engagementScores;
    return this;
  }

   /**
   * Get engagementScores
   * @return engagementScores
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EngageOverviewByLocationIdResponseDataEngagementScores getEngagementScores() {
    return engagementScores;
  }


  public void setEngagementScores(EngageOverviewByLocationIdResponseDataEngagementScores engagementScores) {
    
    
    
    this.engagementScores = engagementScores;
  }


  public EngageOverviewByLocationIdResponseData shiftFeedback(EngageOverviewByLocationIdResponseDataShiftFeedback shiftFeedback) {
    
    
    
    
    this.shiftFeedback = shiftFeedback;
    return this;
  }

   /**
   * Get shiftFeedback
   * @return shiftFeedback
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EngageOverviewByLocationIdResponseDataShiftFeedback getShiftFeedback() {
    return shiftFeedback;
  }


  public void setShiftFeedback(EngageOverviewByLocationIdResponseDataShiftFeedback shiftFeedback) {
    
    
    
    this.shiftFeedback = shiftFeedback;
  }


  public EngageOverviewByLocationIdResponseData tenure(EngageOverviewByLocationIdResponseDataTenure tenure) {
    
    
    
    
    this.tenure = tenure;
    return this;
  }

   /**
   * Get tenure
   * @return tenure
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EngageOverviewByLocationIdResponseDataTenure getTenure() {
    return tenure;
  }


  public void setTenure(EngageOverviewByLocationIdResponseDataTenure tenure) {
    
    
    
    this.tenure = tenure;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EngageOverviewByLocationIdResponseData instance itself
   */
  public EngageOverviewByLocationIdResponseData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EngageOverviewByLocationIdResponseData engageOverviewByLocationIdResponseData = (EngageOverviewByLocationIdResponseData) o;
    return Objects.equals(this.locationStats, engageOverviewByLocationIdResponseData.locationStats) &&
        Objects.equals(this.employeeStats, engageOverviewByLocationIdResponseData.employeeStats) &&
        Objects.equals(this.engagementScores, engageOverviewByLocationIdResponseData.engagementScores) &&
        Objects.equals(this.shiftFeedback, engageOverviewByLocationIdResponseData.shiftFeedback) &&
        Objects.equals(this.tenure, engageOverviewByLocationIdResponseData.tenure)&&
        Objects.equals(this.additionalProperties, engageOverviewByLocationIdResponseData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(locationStats, employeeStats, engagementScores, shiftFeedback, tenure, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EngageOverviewByLocationIdResponseData {\n");
    sb.append("    locationStats: ").append(toIndentedString(locationStats)).append("\n");
    sb.append("    employeeStats: ").append(toIndentedString(employeeStats)).append("\n");
    sb.append("    engagementScores: ").append(toIndentedString(engagementScores)).append("\n");
    sb.append("    shiftFeedback: ").append(toIndentedString(shiftFeedback)).append("\n");
    sb.append("    tenure: ").append(toIndentedString(tenure)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("location_stats");
    openapiFields.add("employee_stats");
    openapiFields.add("engagement_scores");
    openapiFields.add("shift_feedback");
    openapiFields.add("tenure");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("location_stats");
    openapiRequiredFields.add("employee_stats");
    openapiRequiredFields.add("engagement_scores");
    openapiRequiredFields.add("shift_feedback");
    openapiRequiredFields.add("tenure");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EngageOverviewByLocationIdResponseData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EngageOverviewByLocationIdResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EngageOverviewByLocationIdResponseData is not found in the empty JSON string", EngageOverviewByLocationIdResponseData.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EngageOverviewByLocationIdResponseData.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `location_stats`
      EngageOverviewByLocationIdResponseDataLocationStats.validateJsonObject(jsonObj.getAsJsonObject("location_stats"));
      // validate the required field `employee_stats`
      EngageOverviewByLocationIdResponseDataEmployeeStats.validateJsonObject(jsonObj.getAsJsonObject("employee_stats"));
      // validate the required field `engagement_scores`
      EngageOverviewByLocationIdResponseDataEngagementScores.validateJsonObject(jsonObj.getAsJsonObject("engagement_scores"));
      // validate the required field `shift_feedback`
      EngageOverviewByLocationIdResponseDataShiftFeedback.validateJsonObject(jsonObj.getAsJsonObject("shift_feedback"));
      // validate the required field `tenure`
      EngageOverviewByLocationIdResponseDataTenure.validateJsonObject(jsonObj.getAsJsonObject("tenure"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EngageOverviewByLocationIdResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EngageOverviewByLocationIdResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EngageOverviewByLocationIdResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EngageOverviewByLocationIdResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<EngageOverviewByLocationIdResponseData>() {
           @Override
           public void write(JsonWriter out, EngageOverviewByLocationIdResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EngageOverviewByLocationIdResponseData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EngageOverviewByLocationIdResponseData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EngageOverviewByLocationIdResponseData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EngageOverviewByLocationIdResponseData
  * @throws IOException if the JSON string is invalid with respect to EngageOverviewByLocationIdResponseData
  */
  public static EngageOverviewByLocationIdResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EngageOverviewByLocationIdResponseData.class);
  }

 /**
  * Convert an instance of EngageOverviewByLocationIdResponseData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

