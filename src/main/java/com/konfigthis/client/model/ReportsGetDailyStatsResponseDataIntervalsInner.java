/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ReportsGetDailyStatsResponseDataIntervalsInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ReportsGetDailyStatsResponseDataIntervalsInner {
  public static final String SERIALIZED_NAME_DAY = "day";
  @SerializedName(SERIALIZED_NAME_DAY)
  private LocalDate day;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private OffsetDateTime start;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private OffsetDateTime end;

  public static final String SERIALIZED_NAME_ACTUAL_SALES = "actual_sales";
  @SerializedName(SERIALIZED_NAME_ACTUAL_SALES)
  private Integer actualSales;

  public static final String SERIALIZED_NAME_PROJECTED_SALES = "projected_sales";
  @SerializedName(SERIALIZED_NAME_PROJECTED_SALES)
  private Integer projectedSales;

  public static final String SERIALIZED_NAME_PAST_ACTUAL_SALES = "past_actual_sales";
  @SerializedName(SERIALIZED_NAME_PAST_ACTUAL_SALES)
  private Integer pastActualSales;

  public static final String SERIALIZED_NAME_PAST_PROJECTED_SALES = "past_projected_sales";
  @SerializedName(SERIALIZED_NAME_PAST_PROJECTED_SALES)
  private Integer pastProjectedSales;

  public static final String SERIALIZED_NAME_ACTUAL_LABOR = "actual_labor";
  @SerializedName(SERIALIZED_NAME_ACTUAL_LABOR)
  private Integer actualLabor;

  public static final String SERIALIZED_NAME_PROJECTED_LABOR = "projected_labor";
  @SerializedName(SERIALIZED_NAME_PROJECTED_LABOR)
  private Integer projectedLabor;

  public static final String SERIALIZED_NAME_PROJECTED_LABOR_MINUTES = "projected_labor_minutes";
  @SerializedName(SERIALIZED_NAME_PROJECTED_LABOR_MINUTES)
  private Double projectedLaborMinutes;

  public static final String SERIALIZED_NAME_LABOR_RATIO = "labor_ratio";
  @SerializedName(SERIALIZED_NAME_LABOR_RATIO)
  private Double laborRatio;

  public static final String SERIALIZED_NAME_PROJECTED_LABOR_RATIO = "projected_labor_ratio";
  @SerializedName(SERIALIZED_NAME_PROJECTED_LABOR_RATIO)
  private Double projectedLaborRatio;

  public static final String SERIALIZED_NAME_ACTUAL_SPMH = "actual_spmh";
  @SerializedName(SERIALIZED_NAME_ACTUAL_SPMH)
  private Double actualSpmh;

  public static final String SERIALIZED_NAME_PROJECTED_SPMH = "projected_spmh";
  @SerializedName(SERIALIZED_NAME_PROJECTED_SPMH)
  private Double projectedSpmh;

  public ReportsGetDailyStatsResponseDataIntervalsInner() {
  }

  public ReportsGetDailyStatsResponseDataIntervalsInner day(LocalDate day) {
    
    
    
    
    this.day = day;
    return this;
  }

   /**
   * Get day
   * @return day
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LocalDate getDay() {
    return day;
  }


  public void setDay(LocalDate day) {
    
    
    
    this.day = day;
  }


  public ReportsGetDailyStatsResponseDataIntervalsInner start(OffsetDateTime start) {
    
    
    
    
    this.start = start;
    return this;
  }

   /**
   * Get start
   * @return start
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getStart() {
    return start;
  }


  public void setStart(OffsetDateTime start) {
    
    
    
    this.start = start;
  }


  public ReportsGetDailyStatsResponseDataIntervalsInner end(OffsetDateTime end) {
    
    
    
    
    this.end = end;
    return this;
  }

   /**
   * Get end
   * @return end
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getEnd() {
    return end;
  }


  public void setEnd(OffsetDateTime end) {
    
    
    
    this.end = end;
  }


  public ReportsGetDailyStatsResponseDataIntervalsInner actualSales(Integer actualSales) {
    
    
    
    
    this.actualSales = actualSales;
    return this;
  }

   /**
   * The actual sales in cents
   * @return actualSales
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The actual sales in cents")

  public Integer getActualSales() {
    return actualSales;
  }


  public void setActualSales(Integer actualSales) {
    
    
    
    this.actualSales = actualSales;
  }


  public ReportsGetDailyStatsResponseDataIntervalsInner projectedSales(Integer projectedSales) {
    
    
    
    
    this.projectedSales = projectedSales;
    return this;
  }

   /**
   * The projected sales in cents
   * @return projectedSales
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The projected sales in cents")

  public Integer getProjectedSales() {
    return projectedSales;
  }


  public void setProjectedSales(Integer projectedSales) {
    
    
    
    this.projectedSales = projectedSales;
  }


  public ReportsGetDailyStatsResponseDataIntervalsInner pastActualSales(Integer pastActualSales) {
    
    
    
    
    this.pastActualSales = pastActualSales;
    return this;
  }

   /**
   * The past actual sales in cents
   * @return pastActualSales
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The past actual sales in cents")

  public Integer getPastActualSales() {
    return pastActualSales;
  }


  public void setPastActualSales(Integer pastActualSales) {
    
    
    
    this.pastActualSales = pastActualSales;
  }


  public ReportsGetDailyStatsResponseDataIntervalsInner pastProjectedSales(Integer pastProjectedSales) {
    
    
    
    
    this.pastProjectedSales = pastProjectedSales;
    return this;
  }

   /**
   * The past projected sales in cents
   * @return pastProjectedSales
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The past projected sales in cents")

  public Integer getPastProjectedSales() {
    return pastProjectedSales;
  }


  public void setPastProjectedSales(Integer pastProjectedSales) {
    
    
    
    this.pastProjectedSales = pastProjectedSales;
  }


  public ReportsGetDailyStatsResponseDataIntervalsInner actualLabor(Integer actualLabor) {
    
    
    
    
    this.actualLabor = actualLabor;
    return this;
  }

   /**
   * The actual labor in cents
   * @return actualLabor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The actual labor in cents")

  public Integer getActualLabor() {
    return actualLabor;
  }


  public void setActualLabor(Integer actualLabor) {
    
    
    
    this.actualLabor = actualLabor;
  }


  public ReportsGetDailyStatsResponseDataIntervalsInner projectedLabor(Integer projectedLabor) {
    
    
    
    
    this.projectedLabor = projectedLabor;
    return this;
  }

   /**
   * The projected labor in cents
   * @return projectedLabor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The projected labor in cents")

  public Integer getProjectedLabor() {
    return projectedLabor;
  }


  public void setProjectedLabor(Integer projectedLabor) {
    
    
    
    this.projectedLabor = projectedLabor;
  }


  public ReportsGetDailyStatsResponseDataIntervalsInner projectedLaborMinutes(Double projectedLaborMinutes) {
    
    
    
    
    this.projectedLaborMinutes = projectedLaborMinutes;
    return this;
  }

  public ReportsGetDailyStatsResponseDataIntervalsInner projectedLaborMinutes(Integer projectedLaborMinutes) {
    
    
    
    
    this.projectedLaborMinutes = projectedLaborMinutes.doubleValue();
    return this;
  }

   /**
   * The projected labor minutes
   * @return projectedLaborMinutes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The projected labor minutes")

  public Double getProjectedLaborMinutes() {
    return projectedLaborMinutes;
  }


  public void setProjectedLaborMinutes(Double projectedLaborMinutes) {
    
    
    
    this.projectedLaborMinutes = projectedLaborMinutes;
  }


  public ReportsGetDailyStatsResponseDataIntervalsInner laborRatio(Double laborRatio) {
    
    
    
    
    this.laborRatio = laborRatio;
    return this;
  }

  public ReportsGetDailyStatsResponseDataIntervalsInner laborRatio(Integer laborRatio) {
    
    
    
    
    this.laborRatio = laborRatio.doubleValue();
    return this;
  }

   /**
   * The current labor ratio
   * @return laborRatio
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The current labor ratio")

  public Double getLaborRatio() {
    return laborRatio;
  }


  public void setLaborRatio(Double laborRatio) {
    
    
    
    this.laborRatio = laborRatio;
  }


  public ReportsGetDailyStatsResponseDataIntervalsInner projectedLaborRatio(Double projectedLaborRatio) {
    
    
    
    
    this.projectedLaborRatio = projectedLaborRatio;
    return this;
  }

  public ReportsGetDailyStatsResponseDataIntervalsInner projectedLaborRatio(Integer projectedLaborRatio) {
    
    
    
    
    this.projectedLaborRatio = projectedLaborRatio.doubleValue();
    return this;
  }

   /**
   * The projected labor ratio
   * @return projectedLaborRatio
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The projected labor ratio")

  public Double getProjectedLaborRatio() {
    return projectedLaborRatio;
  }


  public void setProjectedLaborRatio(Double projectedLaborRatio) {
    
    
    
    this.projectedLaborRatio = projectedLaborRatio;
  }


  public ReportsGetDailyStatsResponseDataIntervalsInner actualSpmh(Double actualSpmh) {
    
    
    
    
    this.actualSpmh = actualSpmh;
    return this;
  }

  public ReportsGetDailyStatsResponseDataIntervalsInner actualSpmh(Integer actualSpmh) {
    
    
    
    
    this.actualSpmh = actualSpmh.doubleValue();
    return this;
  }

   /**
   * The actual sales per man hour
   * @return actualSpmh
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The actual sales per man hour")

  public Double getActualSpmh() {
    return actualSpmh;
  }


  public void setActualSpmh(Double actualSpmh) {
    
    
    
    this.actualSpmh = actualSpmh;
  }


  public ReportsGetDailyStatsResponseDataIntervalsInner projectedSpmh(Double projectedSpmh) {
    
    
    
    
    this.projectedSpmh = projectedSpmh;
    return this;
  }

  public ReportsGetDailyStatsResponseDataIntervalsInner projectedSpmh(Integer projectedSpmh) {
    
    
    
    
    this.projectedSpmh = projectedSpmh.doubleValue();
    return this;
  }

   /**
   * The projected sales per man hour
   * @return projectedSpmh
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The projected sales per man hour")

  public Double getProjectedSpmh() {
    return projectedSpmh;
  }


  public void setProjectedSpmh(Double projectedSpmh) {
    
    
    
    this.projectedSpmh = projectedSpmh;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReportsGetDailyStatsResponseDataIntervalsInner instance itself
   */
  public ReportsGetDailyStatsResponseDataIntervalsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportsGetDailyStatsResponseDataIntervalsInner reportsGetDailyStatsResponseDataIntervalsInner = (ReportsGetDailyStatsResponseDataIntervalsInner) o;
    return Objects.equals(this.day, reportsGetDailyStatsResponseDataIntervalsInner.day) &&
        Objects.equals(this.start, reportsGetDailyStatsResponseDataIntervalsInner.start) &&
        Objects.equals(this.end, reportsGetDailyStatsResponseDataIntervalsInner.end) &&
        Objects.equals(this.actualSales, reportsGetDailyStatsResponseDataIntervalsInner.actualSales) &&
        Objects.equals(this.projectedSales, reportsGetDailyStatsResponseDataIntervalsInner.projectedSales) &&
        Objects.equals(this.pastActualSales, reportsGetDailyStatsResponseDataIntervalsInner.pastActualSales) &&
        Objects.equals(this.pastProjectedSales, reportsGetDailyStatsResponseDataIntervalsInner.pastProjectedSales) &&
        Objects.equals(this.actualLabor, reportsGetDailyStatsResponseDataIntervalsInner.actualLabor) &&
        Objects.equals(this.projectedLabor, reportsGetDailyStatsResponseDataIntervalsInner.projectedLabor) &&
        Objects.equals(this.projectedLaborMinutes, reportsGetDailyStatsResponseDataIntervalsInner.projectedLaborMinutes) &&
        Objects.equals(this.laborRatio, reportsGetDailyStatsResponseDataIntervalsInner.laborRatio) &&
        Objects.equals(this.projectedLaborRatio, reportsGetDailyStatsResponseDataIntervalsInner.projectedLaborRatio) &&
        Objects.equals(this.actualSpmh, reportsGetDailyStatsResponseDataIntervalsInner.actualSpmh) &&
        Objects.equals(this.projectedSpmh, reportsGetDailyStatsResponseDataIntervalsInner.projectedSpmh)&&
        Objects.equals(this.additionalProperties, reportsGetDailyStatsResponseDataIntervalsInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(day, start, end, actualSales, projectedSales, pastActualSales, pastProjectedSales, actualLabor, projectedLabor, projectedLaborMinutes, laborRatio, projectedLaborRatio, actualSpmh, projectedSpmh, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportsGetDailyStatsResponseDataIntervalsInner {\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    actualSales: ").append(toIndentedString(actualSales)).append("\n");
    sb.append("    projectedSales: ").append(toIndentedString(projectedSales)).append("\n");
    sb.append("    pastActualSales: ").append(toIndentedString(pastActualSales)).append("\n");
    sb.append("    pastProjectedSales: ").append(toIndentedString(pastProjectedSales)).append("\n");
    sb.append("    actualLabor: ").append(toIndentedString(actualLabor)).append("\n");
    sb.append("    projectedLabor: ").append(toIndentedString(projectedLabor)).append("\n");
    sb.append("    projectedLaborMinutes: ").append(toIndentedString(projectedLaborMinutes)).append("\n");
    sb.append("    laborRatio: ").append(toIndentedString(laborRatio)).append("\n");
    sb.append("    projectedLaborRatio: ").append(toIndentedString(projectedLaborRatio)).append("\n");
    sb.append("    actualSpmh: ").append(toIndentedString(actualSpmh)).append("\n");
    sb.append("    projectedSpmh: ").append(toIndentedString(projectedSpmh)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("day");
    openapiFields.add("start");
    openapiFields.add("end");
    openapiFields.add("actual_sales");
    openapiFields.add("projected_sales");
    openapiFields.add("past_actual_sales");
    openapiFields.add("past_projected_sales");
    openapiFields.add("actual_labor");
    openapiFields.add("projected_labor");
    openapiFields.add("projected_labor_minutes");
    openapiFields.add("labor_ratio");
    openapiFields.add("projected_labor_ratio");
    openapiFields.add("actual_spmh");
    openapiFields.add("projected_spmh");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportsGetDailyStatsResponseDataIntervalsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReportsGetDailyStatsResponseDataIntervalsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportsGetDailyStatsResponseDataIntervalsInner is not found in the empty JSON string", ReportsGetDailyStatsResponseDataIntervalsInner.openapiRequiredFields.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportsGetDailyStatsResponseDataIntervalsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportsGetDailyStatsResponseDataIntervalsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportsGetDailyStatsResponseDataIntervalsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportsGetDailyStatsResponseDataIntervalsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportsGetDailyStatsResponseDataIntervalsInner>() {
           @Override
           public void write(JsonWriter out, ReportsGetDailyStatsResponseDataIntervalsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportsGetDailyStatsResponseDataIntervalsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ReportsGetDailyStatsResponseDataIntervalsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportsGetDailyStatsResponseDataIntervalsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportsGetDailyStatsResponseDataIntervalsInner
  * @throws IOException if the JSON string is invalid with respect to ReportsGetDailyStatsResponseDataIntervalsInner
  */
  public static ReportsGetDailyStatsResponseDataIntervalsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportsGetDailyStatsResponseDataIntervalsInner.class);
  }

 /**
  * Convert an instance of ReportsGetDailyStatsResponseDataIntervalsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

