/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DayPartGetSettingsResponseDataInnerSegmentsInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DayPartGetSettingsResponseDataInnerSegmentsInner {
  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private UUID uuid;

  public static final String SERIALIZED_NAME_DAY_PART_UUID = "day_part_uuid";
  @SerializedName(SERIALIZED_NAME_DAY_PART_UUID)
  private UUID dayPartUuid;

  /**
   * Gets or Sets dayOfWeek
   */
  @JsonAdapter(DayOfWeekEnum.Adapter.class)
 public enum DayOfWeekEnum {
    SUNDAY("Sunday"),
    
    MONDAY("Monday"),
    
    TUESDAY("Tuesday"),
    
    WEDNESDAY("Wednesday"),
    
    THURSDAY("Thursday"),
    
    FRIDAY("Friday"),
    
    SATURDAY("Saturday");

    private String value;

    DayOfWeekEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DayOfWeekEnum fromValue(String value) {
      for (DayOfWeekEnum b : DayOfWeekEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DayOfWeekEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DayOfWeekEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DayOfWeekEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DayOfWeekEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DAY_OF_WEEK = "day_of_week";
  @SerializedName(SERIALIZED_NAME_DAY_OF_WEEK)
  private DayOfWeekEnum dayOfWeek;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_END_TIME = "end_time";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public DayPartGetSettingsResponseDataInnerSegmentsInner() {
  }

  public DayPartGetSettingsResponseDataInnerSegmentsInner uuid(UUID uuid) {
    
    
    
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getUuid() {
    return uuid;
  }


  public void setUuid(UUID uuid) {
    
    
    
    this.uuid = uuid;
  }


  public DayPartGetSettingsResponseDataInnerSegmentsInner dayPartUuid(UUID dayPartUuid) {
    
    
    
    
    this.dayPartUuid = dayPartUuid;
    return this;
  }

   /**
   * Get dayPartUuid
   * @return dayPartUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getDayPartUuid() {
    return dayPartUuid;
  }


  public void setDayPartUuid(UUID dayPartUuid) {
    
    
    
    this.dayPartUuid = dayPartUuid;
  }


  public DayPartGetSettingsResponseDataInnerSegmentsInner dayOfWeek(DayOfWeekEnum dayOfWeek) {
    
    
    
    
    this.dayOfWeek = dayOfWeek;
    return this;
  }

   /**
   * Get dayOfWeek
   * @return dayOfWeek
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "SUNDAY", required = true, value = "")

  public DayOfWeekEnum getDayOfWeek() {
    return dayOfWeek;
  }


  public void setDayOfWeek(DayOfWeekEnum dayOfWeek) {
    
    
    
    this.dayOfWeek = dayOfWeek;
  }


  public DayPartGetSettingsResponseDataInnerSegmentsInner startTime(String startTime) {
    
    
    
    
    this.startTime = startTime;
    return this;
  }

   /**
   * Get startTime
   * @return startTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "09:00:00", required = true, value = "")

  public String getStartTime() {
    return startTime;
  }


  public void setStartTime(String startTime) {
    
    
    
    this.startTime = startTime;
  }


  public DayPartGetSettingsResponseDataInnerSegmentsInner endTime(String endTime) {
    
    
    
    
    this.endTime = endTime;
    return this;
  }

   /**
   * Get endTime
   * @return endTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "61200", required = true, value = "")

  public String getEndTime() {
    return endTime;
  }


  public void setEndTime(String endTime) {
    
    
    
    this.endTime = endTime;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DayPartGetSettingsResponseDataInnerSegmentsInner instance itself
   */
  public DayPartGetSettingsResponseDataInnerSegmentsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DayPartGetSettingsResponseDataInnerSegmentsInner dayPartGetSettingsResponseDataInnerSegmentsInner = (DayPartGetSettingsResponseDataInnerSegmentsInner) o;
    return Objects.equals(this.uuid, dayPartGetSettingsResponseDataInnerSegmentsInner.uuid) &&
        Objects.equals(this.dayPartUuid, dayPartGetSettingsResponseDataInnerSegmentsInner.dayPartUuid) &&
        Objects.equals(this.dayOfWeek, dayPartGetSettingsResponseDataInnerSegmentsInner.dayOfWeek) &&
        Objects.equals(this.startTime, dayPartGetSettingsResponseDataInnerSegmentsInner.startTime) &&
        Objects.equals(this.endTime, dayPartGetSettingsResponseDataInnerSegmentsInner.endTime)&&
        Objects.equals(this.additionalProperties, dayPartGetSettingsResponseDataInnerSegmentsInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, dayPartUuid, dayOfWeek, startTime, endTime, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DayPartGetSettingsResponseDataInnerSegmentsInner {\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    dayPartUuid: ").append(toIndentedString(dayPartUuid)).append("\n");
    sb.append("    dayOfWeek: ").append(toIndentedString(dayOfWeek)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("uuid");
    openapiFields.add("day_part_uuid");
    openapiFields.add("day_of_week");
    openapiFields.add("start_time");
    openapiFields.add("end_time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("day_of_week");
    openapiRequiredFields.add("start_time");
    openapiRequiredFields.add("end_time");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DayPartGetSettingsResponseDataInnerSegmentsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DayPartGetSettingsResponseDataInnerSegmentsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DayPartGetSettingsResponseDataInnerSegmentsInner is not found in the empty JSON string", DayPartGetSettingsResponseDataInnerSegmentsInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DayPartGetSettingsResponseDataInnerSegmentsInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if ((jsonObj.get("day_part_uuid") != null && !jsonObj.get("day_part_uuid").isJsonNull()) && !jsonObj.get("day_part_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `day_part_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("day_part_uuid").toString()));
      }
      if (!jsonObj.get("day_of_week").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `day_of_week` to be a primitive type in the JSON string but got `%s`", jsonObj.get("day_of_week").toString()));
      }
      if (!jsonObj.get("start_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_time").toString()));
      }
      if (!jsonObj.get("end_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_time").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DayPartGetSettingsResponseDataInnerSegmentsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DayPartGetSettingsResponseDataInnerSegmentsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DayPartGetSettingsResponseDataInnerSegmentsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DayPartGetSettingsResponseDataInnerSegmentsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DayPartGetSettingsResponseDataInnerSegmentsInner>() {
           @Override
           public void write(JsonWriter out, DayPartGetSettingsResponseDataInnerSegmentsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DayPartGetSettingsResponseDataInnerSegmentsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DayPartGetSettingsResponseDataInnerSegmentsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DayPartGetSettingsResponseDataInnerSegmentsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DayPartGetSettingsResponseDataInnerSegmentsInner
  * @throws IOException if the JSON string is invalid with respect to DayPartGetSettingsResponseDataInnerSegmentsInner
  */
  public static DayPartGetSettingsResponseDataInnerSegmentsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DayPartGetSettingsResponseDataInnerSegmentsInner.class);
  }

 /**
  * Convert an instance of DayPartGetSettingsResponseDataInnerSegmentsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

