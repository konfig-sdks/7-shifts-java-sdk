/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.UsersBulkCreateRequestInnerWagesInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UsersBulkCreateRequestInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UsersBulkCreateRequestInner {
  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_PREFERRED_FIRST_NAME = "preferred_first_name";
  @SerializedName(SERIALIZED_NAME_PREFERRED_FIRST_NAME)
  private String preferredFirstName;

  public static final String SERIALIZED_NAME_PREFERRED_LAST_NAME = "preferred_last_name";
  @SerializedName(SERIALIZED_NAME_PREFERRED_LAST_NAME)
  private String preferredLastName;

  public static final String SERIALIZED_NAME_LOCATION_IDS = "location_ids";
  @SerializedName(SERIALIZED_NAME_LOCATION_IDS)
  private List<Integer> locationIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEPARTMENT_IDS = "department_ids";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_IDS)
  private List<Integer> departmentIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROLE_IDS = "role_ids";
  @SerializedName(SERIALIZED_NAME_ROLE_IDS)
  private List<Integer> roleIds = null;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_MOBILE_NUMBER = "mobile_number";
  @SerializedName(SERIALIZED_NAME_MOBILE_NUMBER)
  private String mobileNumber;

  public static final String SERIALIZED_NAME_HOME_NUMBER = "home_number";
  @SerializedName(SERIALIZED_NAME_HOME_NUMBER)
  private String homeNumber;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_POSTAL_ZIP = "postal_zip";
  @SerializedName(SERIALIZED_NAME_POSTAL_ZIP)
  private String postalZip;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_PROV_STATE = "prov_state";
  @SerializedName(SERIALIZED_NAME_PROV_STATE)
  private String provState;

  public static final String SERIALIZED_NAME_INVITE_USER = "invite_user";
  @SerializedName(SERIALIZED_NAME_INVITE_USER)
  private Boolean inviteUser;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_HIRE_DATE = "hire_date";
  @SerializedName(SERIALIZED_NAME_HIRE_DATE)
  private LocalDate hireDate;

  /**
   * The type of this user
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    EMPLOYEE("employee"),
    
    ASST_MANAGER("asst_manager"),
    
    MANAGER("manager");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employee_id";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private String employeeId;

  public static final String SERIALIZED_NAME_PUNCH_ID = "punch_id";
  @SerializedName(SERIALIZED_NAME_PUNCH_ID)
  private Integer punchId;

  public static final String SERIALIZED_NAME_BIRTH_DATE = "birth_date";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  private LocalDate birthDate;

  /**
   * The user&#39;s preferred language. Default value is en
   */
  @JsonAdapter(LanguageEnum.Adapter.class)
 public enum LanguageEnum {
    EN("en"),
    
    ES("es"),
    
    FR("fr");

    private String value;

    LanguageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LanguageEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private LanguageEnum language = LanguageEnum.EN;

  public static final String SERIALIZED_NAME_APPEAR_AS_EMPLOYEE = "appear_as_employee";
  @SerializedName(SERIALIZED_NAME_APPEAR_AS_EMPLOYEE)
  private Boolean appearAsEmployee;

  public static final String SERIALIZED_NAME_SUBSCRIBE_TO_UPDATES = "subscribe_to_updates";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBE_TO_UPDATES)
  private Boolean subscribeToUpdates;

  public static final String SERIALIZED_NAME_MAX_WEEKLY_HOURS = "max_weekly_hours";
  @SerializedName(SERIALIZED_NAME_MAX_WEEKLY_HOURS)
  private Integer maxWeeklyHours;

  public static final String SERIALIZED_NAME_WAGE_CENTS = "wage_cents";
  @SerializedName(SERIALIZED_NAME_WAGE_CENTS)
  private Double wageCents;

  /**
   * The wage type
   */
  @JsonAdapter(WageTypeEnum.Adapter.class)
 public enum WageTypeEnum {
    HOURLY("hourly"),
    
    WEEKLY_SALARY("weekly_salary");

    private String value;

    WageTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WageTypeEnum fromValue(String value) {
      for (WageTypeEnum b : WageTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<WageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WageTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WageTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WageTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_WAGE_TYPE = "wage_type";
  @SerializedName(SERIALIZED_NAME_WAGE_TYPE)
  private WageTypeEnum wageType;

  public static final String SERIALIZED_NAME_WAGES = "wages";
  @SerializedName(SERIALIZED_NAME_WAGES)
  private List<UsersBulkCreateRequestInnerWagesInner> wages = null;

  public static final String SERIALIZED_NAME_PERMISSIONS_TEMPLATE_ID = "permissions_template_id";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS_TEMPLATE_ID)
  private Integer permissionsTemplateId;

  public UsersBulkCreateRequestInner() {
  }

  public UsersBulkCreateRequestInner firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * The user&#39;s first name
   * @return firstName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The user's first name")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public UsersBulkCreateRequestInner lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * The user&#39;s last name
   * @return lastName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The user's last name")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public UsersBulkCreateRequestInner preferredFirstName(String preferredFirstName) {
    
    
    
    
    this.preferredFirstName = preferredFirstName;
    return this;
  }

   /**
   * An optional alternate first name
   * @return preferredFirstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An optional alternate first name")

  public String getPreferredFirstName() {
    return preferredFirstName;
  }


  public void setPreferredFirstName(String preferredFirstName) {
    
    
    
    this.preferredFirstName = preferredFirstName;
  }


  public UsersBulkCreateRequestInner preferredLastName(String preferredLastName) {
    
    
    
    
    this.preferredLastName = preferredLastName;
    return this;
  }

   /**
   * An optional alternate last name
   * @return preferredLastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An optional alternate last name")

  public String getPreferredLastName() {
    return preferredLastName;
  }


  public void setPreferredLastName(String preferredLastName) {
    
    
    
    this.preferredLastName = preferredLastName;
  }


  public UsersBulkCreateRequestInner locationIds(List<Integer> locationIds) {
    
    
    
    
    this.locationIds = locationIds;
    return this;
  }

  public UsersBulkCreateRequestInner addLocationIdsItem(Integer locationIdsItem) {
    this.locationIds.add(locationIdsItem);
    return this;
  }

   /**
   * An array of location IDs this user will be assigned to
   * @return locationIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An array of location IDs this user will be assigned to")

  public List<Integer> getLocationIds() {
    return locationIds;
  }


  public void setLocationIds(List<Integer> locationIds) {
    
    
    
    this.locationIds = locationIds;
  }


  public UsersBulkCreateRequestInner departmentIds(List<Integer> departmentIds) {
    
    
    
    
    this.departmentIds = departmentIds;
    return this;
  }

  public UsersBulkCreateRequestInner addDepartmentIdsItem(Integer departmentIdsItem) {
    this.departmentIds.add(departmentIdsItem);
    return this;
  }

   /**
   * An array of department IDs this user will be assigned to. Department ID is required if this user&#39;s location has at least one department
   * @return departmentIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "An array of department IDs this user will be assigned to. Department ID is required if this user's location has at least one department")

  public List<Integer> getDepartmentIds() {
    return departmentIds;
  }


  public void setDepartmentIds(List<Integer> departmentIds) {
    
    
    
    this.departmentIds = departmentIds;
  }


  public UsersBulkCreateRequestInner roleIds(List<Integer> roleIds) {
    
    
    
    
    this.roleIds = roleIds;
    return this;
  }

  public UsersBulkCreateRequestInner addRoleIdsItem(Integer roleIdsItem) {
    if (this.roleIds == null) {
      this.roleIds = new ArrayList<>();
    }
    this.roleIds.add(roleIdsItem);
    return this;
  }

   /**
   * An array of role IDs this user will be assigned to.
   * @return roleIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of role IDs this user will be assigned to.")

  public List<Integer> getRoleIds() {
    return roleIds;
  }


  public void setRoleIds(List<Integer> roleIds) {
    
    
    
    this.roleIds = roleIds;
  }


  public UsersBulkCreateRequestInner email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * the user&#39;s email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "example@7shifts.com", value = "the user's email")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public UsersBulkCreateRequestInner mobileNumber(String mobileNumber) {
    
    
    
    
    this.mobileNumber = mobileNumber;
    return this;
  }

   /**
   * The user&#39;s mobile phone number. Format with no spaces and include area code
   * @return mobileNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3061234454", value = "The user's mobile phone number. Format with no spaces and include area code")

  public String getMobileNumber() {
    return mobileNumber;
  }


  public void setMobileNumber(String mobileNumber) {
    
    
    
    this.mobileNumber = mobileNumber;
  }


  public UsersBulkCreateRequestInner homeNumber(String homeNumber) {
    
    
    
    
    this.homeNumber = homeNumber;
    return this;
  }

   /**
   * The user&#39;s home phone number. Format with no spaces and include area code
   * @return homeNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3061234454", value = "The user's home phone number. Format with no spaces and include area code")

  public String getHomeNumber() {
    return homeNumber;
  }


  public void setHomeNumber(String homeNumber) {
    
    
    
    this.homeNumber = homeNumber;
  }


  public UsersBulkCreateRequestInner address(String address) {
    
    
    
    
    this.address = address;
    return this;
  }

   /**
   * The user&#39;s address
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user's address")

  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    
    
    
    this.address = address;
  }


  public UsersBulkCreateRequestInner postalZip(String postalZip) {
    
    
    
    
    this.postalZip = postalZip;
    return this;
  }

   /**
   * The user&#39;s postal code or zip code
   * @return postalZip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user's postal code or zip code")

  public String getPostalZip() {
    return postalZip;
  }


  public void setPostalZip(String postalZip) {
    
    
    
    this.postalZip = postalZip;
  }


  public UsersBulkCreateRequestInner city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * The user&#39;s city
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user's city")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public UsersBulkCreateRequestInner provState(String provState) {
    
    
    
    
    this.provState = provState;
    return this;
  }

   /**
   * The user&#39;s province or state
   * @return provState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user's province or state")

  public String getProvState() {
    return provState;
  }


  public void setProvState(String provState) {
    
    
    
    this.provState = provState;
  }


  public UsersBulkCreateRequestInner inviteUser(Boolean inviteUser) {
    
    
    
    
    this.inviteUser = inviteUser;
    return this;
  }

   /**
   * If true Invite the user to 7shifts
   * @return inviteUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true Invite the user to 7shifts")

  public Boolean getInviteUser() {
    return inviteUser;
  }


  public void setInviteUser(Boolean inviteUser) {
    
    
    
    this.inviteUser = inviteUser;
  }


  public UsersBulkCreateRequestInner notes(String notes) {
    
    
    
    
    this.notes = notes;
    return this;
  }

   /**
   * Notes associated with this user
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Notes associated with this user")

  public String getNotes() {
    return notes;
  }


  public void setNotes(String notes) {
    
    
    
    this.notes = notes;
  }


  public UsersBulkCreateRequestInner hireDate(LocalDate hireDate) {
    
    
    
    
    this.hireDate = hireDate;
    return this;
  }

   /**
   * The hire date of this user. Format YYYY-MM-DD
   * @return hireDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Fri May 19 17:00:00 PDT 2017", value = "The hire date of this user. Format YYYY-MM-DD")

  public LocalDate getHireDate() {
    return hireDate;
  }


  public void setHireDate(LocalDate hireDate) {
    
    
    
    this.hireDate = hireDate;
  }


  public UsersBulkCreateRequestInner type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The type of this user
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of this user")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public UsersBulkCreateRequestInner employeeId(String employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

   /**
   * Either an employee ID or an ID assigned by your payroll provider that is used in your payroll export
   * @return employeeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Either an employee ID or an ID assigned by your payroll provider that is used in your payroll export")

  public String getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(String employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public UsersBulkCreateRequestInner punchId(Integer punchId) {
    
    
    
    
    this.punchId = punchId;
    return this;
  }

   /**
   * The punch ID they punch in/out with. If no value is provided a new one will be created
   * @return punchId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The punch ID they punch in/out with. If no value is provided a new one will be created")

  public Integer getPunchId() {
    return punchId;
  }


  public void setPunchId(Integer punchId) {
    
    
    
    this.punchId = punchId;
  }


  public UsersBulkCreateRequestInner birthDate(LocalDate birthDate) {
    
    
    
    
    this.birthDate = birthDate;
    return this;
  }

   /**
   * The user&#39;s birthdate. Format YYYY-MM-DD
   * @return birthDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Thu Jul 20 17:00:00 PDT 2017", value = "The user's birthdate. Format YYYY-MM-DD")

  public LocalDate getBirthDate() {
    return birthDate;
  }


  public void setBirthDate(LocalDate birthDate) {
    
    
    
    this.birthDate = birthDate;
  }


  public UsersBulkCreateRequestInner language(LanguageEnum language) {
    
    
    
    
    this.language = language;
    return this;
  }

   /**
   * The user&#39;s preferred language. Default value is en
   * @return language
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "EN", value = "The user's preferred language. Default value is en")

  public LanguageEnum getLanguage() {
    return language;
  }


  public void setLanguage(LanguageEnum language) {
    
    
    
    this.language = language;
  }


  public UsersBulkCreateRequestInner appearAsEmployee(Boolean appearAsEmployee) {
    
    
    
    
    this.appearAsEmployee = appearAsEmployee;
    return this;
  }

   /**
   * User should appear in the system as an employee. Applies to admin users only
   * @return appearAsEmployee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User should appear in the system as an employee. Applies to admin users only")

  public Boolean getAppearAsEmployee() {
    return appearAsEmployee;
  }


  public void setAppearAsEmployee(Boolean appearAsEmployee) {
    
    
    
    this.appearAsEmployee = appearAsEmployee;
  }


  public UsersBulkCreateRequestInner subscribeToUpdates(Boolean subscribeToUpdates) {
    
    
    
    
    this.subscribeToUpdates = subscribeToUpdates;
    return this;
  }

   /**
   * Subscribe this user to updates from 7shifts. This includes announcing new features for 7shifts
   * @return subscribeToUpdates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Subscribe this user to updates from 7shifts. This includes announcing new features for 7shifts")

  public Boolean getSubscribeToUpdates() {
    return subscribeToUpdates;
  }


  public void setSubscribeToUpdates(Boolean subscribeToUpdates) {
    
    
    
    this.subscribeToUpdates = subscribeToUpdates;
  }


  public UsersBulkCreateRequestInner maxWeeklyHours(Integer maxWeeklyHours) {
    
    
    
    
    this.maxWeeklyHours = maxWeeklyHours;
    return this;
  }

   /**
   * The maximum weekly hours this user is set to work
   * @return maxWeeklyHours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum weekly hours this user is set to work")

  public Integer getMaxWeeklyHours() {
    return maxWeeklyHours;
  }


  public void setMaxWeeklyHours(Integer maxWeeklyHours) {
    
    
    
    this.maxWeeklyHours = maxWeeklyHours;
  }


  public UsersBulkCreateRequestInner wageCents(Double wageCents) {
    
    
    
    
    this.wageCents = wageCents;
    return this;
  }

  public UsersBulkCreateRequestInner wageCents(Integer wageCents) {
    
    
    
    
    this.wageCents = wageCents.doubleValue();
    return this;
  }

   /**
   * Get wageCents
   * @return wageCents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2253", value = "")

  public Double getWageCents() {
    return wageCents;
  }


  public void setWageCents(Double wageCents) {
    
    
    
    this.wageCents = wageCents;
  }


  public UsersBulkCreateRequestInner wageType(WageTypeEnum wageType) {
    
    
    
    
    this.wageType = wageType;
    return this;
  }

   /**
   * The wage type
   * @return wageType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The wage type")

  public WageTypeEnum getWageType() {
    return wageType;
  }


  public void setWageType(WageTypeEnum wageType) {
    
    
    
    this.wageType = wageType;
  }


  public UsersBulkCreateRequestInner wages(List<UsersBulkCreateRequestInnerWagesInner> wages) {
    
    
    
    
    this.wages = wages;
    return this;
  }

  public UsersBulkCreateRequestInner addWagesItem(UsersBulkCreateRequestInnerWagesInner wagesItem) {
    if (this.wages == null) {
      this.wages = new ArrayList<>();
    }
    this.wages.add(wagesItem);
    return this;
  }

   /**
   * An array of Wages that will be set to the assigned User&#39;s roles
   * @return wages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of Wages that will be set to the assigned User's roles")

  public List<UsersBulkCreateRequestInnerWagesInner> getWages() {
    return wages;
  }


  public void setWages(List<UsersBulkCreateRequestInnerWagesInner> wages) {
    
    
    
    this.wages = wages;
  }


  public UsersBulkCreateRequestInner permissionsTemplateId(Integer permissionsTemplateId) {
    
    
    
    
    this.permissionsTemplateId = permissionsTemplateId;
    return this;
  }

   /**
   * Id of a permissions template the user will be assigned to and granted permissions from.
   * @return permissionsTemplateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Id of a permissions template the user will be assigned to and granted permissions from.")

  public Integer getPermissionsTemplateId() {
    return permissionsTemplateId;
  }


  public void setPermissionsTemplateId(Integer permissionsTemplateId) {
    
    
    
    this.permissionsTemplateId = permissionsTemplateId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UsersBulkCreateRequestInner instance itself
   */
  public UsersBulkCreateRequestInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsersBulkCreateRequestInner usersBulkCreateRequestInner = (UsersBulkCreateRequestInner) o;
    return Objects.equals(this.firstName, usersBulkCreateRequestInner.firstName) &&
        Objects.equals(this.lastName, usersBulkCreateRequestInner.lastName) &&
        Objects.equals(this.preferredFirstName, usersBulkCreateRequestInner.preferredFirstName) &&
        Objects.equals(this.preferredLastName, usersBulkCreateRequestInner.preferredLastName) &&
        Objects.equals(this.locationIds, usersBulkCreateRequestInner.locationIds) &&
        Objects.equals(this.departmentIds, usersBulkCreateRequestInner.departmentIds) &&
        Objects.equals(this.roleIds, usersBulkCreateRequestInner.roleIds) &&
        Objects.equals(this.email, usersBulkCreateRequestInner.email) &&
        Objects.equals(this.mobileNumber, usersBulkCreateRequestInner.mobileNumber) &&
        Objects.equals(this.homeNumber, usersBulkCreateRequestInner.homeNumber) &&
        Objects.equals(this.address, usersBulkCreateRequestInner.address) &&
        Objects.equals(this.postalZip, usersBulkCreateRequestInner.postalZip) &&
        Objects.equals(this.city, usersBulkCreateRequestInner.city) &&
        Objects.equals(this.provState, usersBulkCreateRequestInner.provState) &&
        Objects.equals(this.inviteUser, usersBulkCreateRequestInner.inviteUser) &&
        Objects.equals(this.notes, usersBulkCreateRequestInner.notes) &&
        Objects.equals(this.hireDate, usersBulkCreateRequestInner.hireDate) &&
        Objects.equals(this.type, usersBulkCreateRequestInner.type) &&
        Objects.equals(this.employeeId, usersBulkCreateRequestInner.employeeId) &&
        Objects.equals(this.punchId, usersBulkCreateRequestInner.punchId) &&
        Objects.equals(this.birthDate, usersBulkCreateRequestInner.birthDate) &&
        Objects.equals(this.language, usersBulkCreateRequestInner.language) &&
        Objects.equals(this.appearAsEmployee, usersBulkCreateRequestInner.appearAsEmployee) &&
        Objects.equals(this.subscribeToUpdates, usersBulkCreateRequestInner.subscribeToUpdates) &&
        Objects.equals(this.maxWeeklyHours, usersBulkCreateRequestInner.maxWeeklyHours) &&
        Objects.equals(this.wageCents, usersBulkCreateRequestInner.wageCents) &&
        Objects.equals(this.wageType, usersBulkCreateRequestInner.wageType) &&
        Objects.equals(this.wages, usersBulkCreateRequestInner.wages) &&
        Objects.equals(this.permissionsTemplateId, usersBulkCreateRequestInner.permissionsTemplateId)&&
        Objects.equals(this.additionalProperties, usersBulkCreateRequestInner.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstName, lastName, preferredFirstName, preferredLastName, locationIds, departmentIds, roleIds, email, mobileNumber, homeNumber, address, postalZip, city, provState, inviteUser, notes, hireDate, type, employeeId, punchId, birthDate, language, appearAsEmployee, subscribeToUpdates, maxWeeklyHours, wageCents, wageType, wages, permissionsTemplateId, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsersBulkCreateRequestInner {\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    preferredFirstName: ").append(toIndentedString(preferredFirstName)).append("\n");
    sb.append("    preferredLastName: ").append(toIndentedString(preferredLastName)).append("\n");
    sb.append("    locationIds: ").append(toIndentedString(locationIds)).append("\n");
    sb.append("    departmentIds: ").append(toIndentedString(departmentIds)).append("\n");
    sb.append("    roleIds: ").append(toIndentedString(roleIds)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    mobileNumber: ").append(toIndentedString(mobileNumber)).append("\n");
    sb.append("    homeNumber: ").append(toIndentedString(homeNumber)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    postalZip: ").append(toIndentedString(postalZip)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    provState: ").append(toIndentedString(provState)).append("\n");
    sb.append("    inviteUser: ").append(toIndentedString(inviteUser)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    hireDate: ").append(toIndentedString(hireDate)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    punchId: ").append(toIndentedString(punchId)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    appearAsEmployee: ").append(toIndentedString(appearAsEmployee)).append("\n");
    sb.append("    subscribeToUpdates: ").append(toIndentedString(subscribeToUpdates)).append("\n");
    sb.append("    maxWeeklyHours: ").append(toIndentedString(maxWeeklyHours)).append("\n");
    sb.append("    wageCents: ").append(toIndentedString(wageCents)).append("\n");
    sb.append("    wageType: ").append(toIndentedString(wageType)).append("\n");
    sb.append("    wages: ").append(toIndentedString(wages)).append("\n");
    sb.append("    permissionsTemplateId: ").append(toIndentedString(permissionsTemplateId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("first_name");
    openapiFields.add("last_name");
    openapiFields.add("preferred_first_name");
    openapiFields.add("preferred_last_name");
    openapiFields.add("location_ids");
    openapiFields.add("department_ids");
    openapiFields.add("role_ids");
    openapiFields.add("email");
    openapiFields.add("mobile_number");
    openapiFields.add("home_number");
    openapiFields.add("address");
    openapiFields.add("postal_zip");
    openapiFields.add("city");
    openapiFields.add("prov_state");
    openapiFields.add("invite_user");
    openapiFields.add("notes");
    openapiFields.add("hire_date");
    openapiFields.add("type");
    openapiFields.add("employee_id");
    openapiFields.add("punch_id");
    openapiFields.add("birth_date");
    openapiFields.add("language");
    openapiFields.add("appear_as_employee");
    openapiFields.add("subscribe_to_updates");
    openapiFields.add("max_weekly_hours");
    openapiFields.add("wage_cents");
    openapiFields.add("wage_type");
    openapiFields.add("wages");
    openapiFields.add("permissions_template_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("first_name");
    openapiRequiredFields.add("last_name");
    openapiRequiredFields.add("location_ids");
    openapiRequiredFields.add("department_ids");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UsersBulkCreateRequestInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UsersBulkCreateRequestInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsersBulkCreateRequestInner is not found in the empty JSON string", UsersBulkCreateRequestInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UsersBulkCreateRequestInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if (!jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if (!jsonObj.get("preferred_first_name").isJsonNull() && (jsonObj.get("preferred_first_name") != null && !jsonObj.get("preferred_first_name").isJsonNull()) && !jsonObj.get("preferred_first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferred_first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferred_first_name").toString()));
      }
      if (!jsonObj.get("preferred_last_name").isJsonNull() && (jsonObj.get("preferred_last_name") != null && !jsonObj.get("preferred_last_name").isJsonNull()) && !jsonObj.get("preferred_last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferred_last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferred_last_name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("location_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("location_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_ids` to be an array in the JSON string but got `%s`", jsonObj.get("location_ids").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("department_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("department_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `department_ids` to be an array in the JSON string but got `%s`", jsonObj.get("department_ids").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("role_ids") != null && !jsonObj.get("role_ids").isJsonNull() && !jsonObj.get("role_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `role_ids` to be an array in the JSON string or null but got `%s`", jsonObj.get("role_ids").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("mobile_number").isJsonNull() && (jsonObj.get("mobile_number") != null && !jsonObj.get("mobile_number").isJsonNull()) && !jsonObj.get("mobile_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobile_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobile_number").toString()));
      }
      if (!jsonObj.get("home_number").isJsonNull() && (jsonObj.get("home_number") != null && !jsonObj.get("home_number").isJsonNull()) && !jsonObj.get("home_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `home_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("home_number").toString()));
      }
      if (!jsonObj.get("address").isJsonNull() && (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if (!jsonObj.get("postal_zip").isJsonNull() && (jsonObj.get("postal_zip") != null && !jsonObj.get("postal_zip").isJsonNull()) && !jsonObj.get("postal_zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal_zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal_zip").toString()));
      }
      if (!jsonObj.get("city").isJsonNull() && (jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("prov_state").isJsonNull() && (jsonObj.get("prov_state") != null && !jsonObj.get("prov_state").isJsonNull()) && !jsonObj.get("prov_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prov_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prov_state").toString()));
      }
      if (!jsonObj.get("notes").isJsonNull() && (jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("employee_id").isJsonNull() && (jsonObj.get("employee_id") != null && !jsonObj.get("employee_id").isJsonNull()) && !jsonObj.get("employee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee_id").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if (!jsonObj.get("wage_type").isJsonNull() && (jsonObj.get("wage_type") != null && !jsonObj.get("wage_type").isJsonNull()) && !jsonObj.get("wage_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wage_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wage_type").toString()));
      }
      if (jsonObj.get("wages") != null && !jsonObj.get("wages").isJsonNull()) {
        JsonArray jsonArraywages = jsonObj.getAsJsonArray("wages");
        if (jsonArraywages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("wages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `wages` to be an array in the JSON string but got `%s`", jsonObj.get("wages").toString()));
          }

          // validate the optional field `wages` (array)
          for (int i = 0; i < jsonArraywages.size(); i++) {
            UsersBulkCreateRequestInnerWagesInner.validateJsonObject(jsonArraywages.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsersBulkCreateRequestInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsersBulkCreateRequestInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsersBulkCreateRequestInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsersBulkCreateRequestInner.class));

       return (TypeAdapter<T>) new TypeAdapter<UsersBulkCreateRequestInner>() {
           @Override
           public void write(JsonWriter out, UsersBulkCreateRequestInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UsersBulkCreateRequestInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UsersBulkCreateRequestInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UsersBulkCreateRequestInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UsersBulkCreateRequestInner
  * @throws IOException if the JSON string is invalid with respect to UsersBulkCreateRequestInner
  */
  public static UsersBulkCreateRequestInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsersBulkCreateRequestInner.class);
  }

 /**
  * Convert an instance of UsersBulkCreateRequestInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

