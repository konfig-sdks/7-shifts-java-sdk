/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ReportsGetDailyStatsResponseDataSummary
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ReportsGetDailyStatsResponseDataSummary {
  public static final String SERIALIZED_NAME_CURRENT_ACTUAL_SALES = "current_actual_sales";
  @SerializedName(SERIALIZED_NAME_CURRENT_ACTUAL_SALES)
  private Integer currentActualSales;

  public static final String SERIALIZED_NAME_CURRENT_PROJECTED_SALES = "current_projected_sales";
  @SerializedName(SERIALIZED_NAME_CURRENT_PROJECTED_SALES)
  private Integer currentProjectedSales;

  public static final String SERIALIZED_NAME_PAST_ACTUAL_SALES = "past_actual_sales";
  @SerializedName(SERIALIZED_NAME_PAST_ACTUAL_SALES)
  private Integer pastActualSales;

  public static final String SERIALIZED_NAME_PAST_PROJECTED_SALES = "past_projected_sales";
  @SerializedName(SERIALIZED_NAME_PAST_PROJECTED_SALES)
  private Integer pastProjectedSales;

  public static final String SERIALIZED_NAME_CURRENT_ACTUAL_LABOR = "current_actual_labor";
  @SerializedName(SERIALIZED_NAME_CURRENT_ACTUAL_LABOR)
  private Integer currentActualLabor;

  public static final String SERIALIZED_NAME_CURRENT_PROJECTED_LABOR = "current_projected_labor";
  @SerializedName(SERIALIZED_NAME_CURRENT_PROJECTED_LABOR)
  private Integer currentProjectedLabor;

  public static final String SERIALIZED_NAME_PAST_ACTUAL_LABOR = "past_actual_labor";
  @SerializedName(SERIALIZED_NAME_PAST_ACTUAL_LABOR)
  private Integer pastActualLabor;

  public static final String SERIALIZED_NAME_CURRENT_LABOR_RATIO = "current_labor_ratio";
  @SerializedName(SERIALIZED_NAME_CURRENT_LABOR_RATIO)
  private Double currentLaborRatio;

  public static final String SERIALIZED_NAME_CURRENT_LABOR_TARGET = "current_labor_target";
  @SerializedName(SERIALIZED_NAME_CURRENT_LABOR_TARGET)
  private Double currentLaborTarget;

  public static final String SERIALIZED_NAME_PAST_LABOR_RATIO = "past_labor_ratio";
  @SerializedName(SERIALIZED_NAME_PAST_LABOR_RATIO)
  private Double pastLaborRatio;

  public static final String SERIALIZED_NAME_CURRENT_SPMH = "current_spmh";
  @SerializedName(SERIALIZED_NAME_CURRENT_SPMH)
  private Double currentSpmh;

  public static final String SERIALIZED_NAME_PAST_SPMH = "past_spmh";
  @SerializedName(SERIALIZED_NAME_PAST_SPMH)
  private Double pastSpmh;

  public ReportsGetDailyStatsResponseDataSummary() {
  }

  public ReportsGetDailyStatsResponseDataSummary currentActualSales(Integer currentActualSales) {
    
    
    
    
    this.currentActualSales = currentActualSales;
    return this;
  }

   /**
   * The current actual sales in cents
   * @return currentActualSales
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The current actual sales in cents")

  public Integer getCurrentActualSales() {
    return currentActualSales;
  }


  public void setCurrentActualSales(Integer currentActualSales) {
    
    
    
    this.currentActualSales = currentActualSales;
  }


  public ReportsGetDailyStatsResponseDataSummary currentProjectedSales(Integer currentProjectedSales) {
    
    
    
    
    this.currentProjectedSales = currentProjectedSales;
    return this;
  }

   /**
   * The current projected sales in cents
   * @return currentProjectedSales
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The current projected sales in cents")

  public Integer getCurrentProjectedSales() {
    return currentProjectedSales;
  }


  public void setCurrentProjectedSales(Integer currentProjectedSales) {
    
    
    
    this.currentProjectedSales = currentProjectedSales;
  }


  public ReportsGetDailyStatsResponseDataSummary pastActualSales(Integer pastActualSales) {
    
    
    
    
    this.pastActualSales = pastActualSales;
    return this;
  }

   /**
   * The past actual sales in cents
   * @return pastActualSales
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The past actual sales in cents")

  public Integer getPastActualSales() {
    return pastActualSales;
  }


  public void setPastActualSales(Integer pastActualSales) {
    
    
    
    this.pastActualSales = pastActualSales;
  }


  public ReportsGetDailyStatsResponseDataSummary pastProjectedSales(Integer pastProjectedSales) {
    
    
    
    
    this.pastProjectedSales = pastProjectedSales;
    return this;
  }

   /**
   * The past projected sales in cents
   * @return pastProjectedSales
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The past projected sales in cents")

  public Integer getPastProjectedSales() {
    return pastProjectedSales;
  }


  public void setPastProjectedSales(Integer pastProjectedSales) {
    
    
    
    this.pastProjectedSales = pastProjectedSales;
  }


  public ReportsGetDailyStatsResponseDataSummary currentActualLabor(Integer currentActualLabor) {
    
    
    
    
    this.currentActualLabor = currentActualLabor;
    return this;
  }

   /**
   * The current actual labor in cents
   * @return currentActualLabor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The current actual labor in cents")

  public Integer getCurrentActualLabor() {
    return currentActualLabor;
  }


  public void setCurrentActualLabor(Integer currentActualLabor) {
    
    
    
    this.currentActualLabor = currentActualLabor;
  }


  public ReportsGetDailyStatsResponseDataSummary currentProjectedLabor(Integer currentProjectedLabor) {
    
    
    
    
    this.currentProjectedLabor = currentProjectedLabor;
    return this;
  }

   /**
   * The current projected labor in cents
   * @return currentProjectedLabor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The current projected labor in cents")

  public Integer getCurrentProjectedLabor() {
    return currentProjectedLabor;
  }


  public void setCurrentProjectedLabor(Integer currentProjectedLabor) {
    
    
    
    this.currentProjectedLabor = currentProjectedLabor;
  }


  public ReportsGetDailyStatsResponseDataSummary pastActualLabor(Integer pastActualLabor) {
    
    
    
    
    this.pastActualLabor = pastActualLabor;
    return this;
  }

   /**
   * The past actual labor in cents
   * @return pastActualLabor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The past actual labor in cents")

  public Integer getPastActualLabor() {
    return pastActualLabor;
  }


  public void setPastActualLabor(Integer pastActualLabor) {
    
    
    
    this.pastActualLabor = pastActualLabor;
  }


  public ReportsGetDailyStatsResponseDataSummary currentLaborRatio(Double currentLaborRatio) {
    
    
    
    
    this.currentLaborRatio = currentLaborRatio;
    return this;
  }

  public ReportsGetDailyStatsResponseDataSummary currentLaborRatio(Integer currentLaborRatio) {
    
    
    
    
    this.currentLaborRatio = currentLaborRatio.doubleValue();
    return this;
  }

   /**
   * The current labor ratio
   * @return currentLaborRatio
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The current labor ratio")

  public Double getCurrentLaborRatio() {
    return currentLaborRatio;
  }


  public void setCurrentLaborRatio(Double currentLaborRatio) {
    
    
    
    this.currentLaborRatio = currentLaborRatio;
  }


  public ReportsGetDailyStatsResponseDataSummary currentLaborTarget(Double currentLaborTarget) {
    
    
    
    
    this.currentLaborTarget = currentLaborTarget;
    return this;
  }

  public ReportsGetDailyStatsResponseDataSummary currentLaborTarget(Integer currentLaborTarget) {
    
    
    
    
    this.currentLaborTarget = currentLaborTarget.doubleValue();
    return this;
  }

   /**
   * The current labor target
   * @return currentLaborTarget
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The current labor target")

  public Double getCurrentLaborTarget() {
    return currentLaborTarget;
  }


  public void setCurrentLaborTarget(Double currentLaborTarget) {
    
    
    
    this.currentLaborTarget = currentLaborTarget;
  }


  public ReportsGetDailyStatsResponseDataSummary pastLaborRatio(Double pastLaborRatio) {
    
    
    
    
    this.pastLaborRatio = pastLaborRatio;
    return this;
  }

  public ReportsGetDailyStatsResponseDataSummary pastLaborRatio(Integer pastLaborRatio) {
    
    
    
    
    this.pastLaborRatio = pastLaborRatio.doubleValue();
    return this;
  }

   /**
   * The current labor ratio
   * @return pastLaborRatio
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The current labor ratio")

  public Double getPastLaborRatio() {
    return pastLaborRatio;
  }


  public void setPastLaborRatio(Double pastLaborRatio) {
    
    
    
    this.pastLaborRatio = pastLaborRatio;
  }


  public ReportsGetDailyStatsResponseDataSummary currentSpmh(Double currentSpmh) {
    
    
    
    
    this.currentSpmh = currentSpmh;
    return this;
  }

  public ReportsGetDailyStatsResponseDataSummary currentSpmh(Integer currentSpmh) {
    
    
    
    
    this.currentSpmh = currentSpmh.doubleValue();
    return this;
  }

   /**
   * The current sales per man hour
   * @return currentSpmh
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The current sales per man hour")

  public Double getCurrentSpmh() {
    return currentSpmh;
  }


  public void setCurrentSpmh(Double currentSpmh) {
    
    
    
    this.currentSpmh = currentSpmh;
  }


  public ReportsGetDailyStatsResponseDataSummary pastSpmh(Double pastSpmh) {
    
    
    
    
    this.pastSpmh = pastSpmh;
    return this;
  }

  public ReportsGetDailyStatsResponseDataSummary pastSpmh(Integer pastSpmh) {
    
    
    
    
    this.pastSpmh = pastSpmh.doubleValue();
    return this;
  }

   /**
   * The past sales per man hour
   * @return pastSpmh
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The past sales per man hour")

  public Double getPastSpmh() {
    return pastSpmh;
  }


  public void setPastSpmh(Double pastSpmh) {
    
    
    
    this.pastSpmh = pastSpmh;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReportsGetDailyStatsResponseDataSummary instance itself
   */
  public ReportsGetDailyStatsResponseDataSummary putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportsGetDailyStatsResponseDataSummary reportsGetDailyStatsResponseDataSummary = (ReportsGetDailyStatsResponseDataSummary) o;
    return Objects.equals(this.currentActualSales, reportsGetDailyStatsResponseDataSummary.currentActualSales) &&
        Objects.equals(this.currentProjectedSales, reportsGetDailyStatsResponseDataSummary.currentProjectedSales) &&
        Objects.equals(this.pastActualSales, reportsGetDailyStatsResponseDataSummary.pastActualSales) &&
        Objects.equals(this.pastProjectedSales, reportsGetDailyStatsResponseDataSummary.pastProjectedSales) &&
        Objects.equals(this.currentActualLabor, reportsGetDailyStatsResponseDataSummary.currentActualLabor) &&
        Objects.equals(this.currentProjectedLabor, reportsGetDailyStatsResponseDataSummary.currentProjectedLabor) &&
        Objects.equals(this.pastActualLabor, reportsGetDailyStatsResponseDataSummary.pastActualLabor) &&
        Objects.equals(this.currentLaborRatio, reportsGetDailyStatsResponseDataSummary.currentLaborRatio) &&
        Objects.equals(this.currentLaborTarget, reportsGetDailyStatsResponseDataSummary.currentLaborTarget) &&
        Objects.equals(this.pastLaborRatio, reportsGetDailyStatsResponseDataSummary.pastLaborRatio) &&
        Objects.equals(this.currentSpmh, reportsGetDailyStatsResponseDataSummary.currentSpmh) &&
        Objects.equals(this.pastSpmh, reportsGetDailyStatsResponseDataSummary.pastSpmh)&&
        Objects.equals(this.additionalProperties, reportsGetDailyStatsResponseDataSummary.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentActualSales, currentProjectedSales, pastActualSales, pastProjectedSales, currentActualLabor, currentProjectedLabor, pastActualLabor, currentLaborRatio, currentLaborTarget, pastLaborRatio, currentSpmh, pastSpmh, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportsGetDailyStatsResponseDataSummary {\n");
    sb.append("    currentActualSales: ").append(toIndentedString(currentActualSales)).append("\n");
    sb.append("    currentProjectedSales: ").append(toIndentedString(currentProjectedSales)).append("\n");
    sb.append("    pastActualSales: ").append(toIndentedString(pastActualSales)).append("\n");
    sb.append("    pastProjectedSales: ").append(toIndentedString(pastProjectedSales)).append("\n");
    sb.append("    currentActualLabor: ").append(toIndentedString(currentActualLabor)).append("\n");
    sb.append("    currentProjectedLabor: ").append(toIndentedString(currentProjectedLabor)).append("\n");
    sb.append("    pastActualLabor: ").append(toIndentedString(pastActualLabor)).append("\n");
    sb.append("    currentLaborRatio: ").append(toIndentedString(currentLaborRatio)).append("\n");
    sb.append("    currentLaborTarget: ").append(toIndentedString(currentLaborTarget)).append("\n");
    sb.append("    pastLaborRatio: ").append(toIndentedString(pastLaborRatio)).append("\n");
    sb.append("    currentSpmh: ").append(toIndentedString(currentSpmh)).append("\n");
    sb.append("    pastSpmh: ").append(toIndentedString(pastSpmh)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("current_actual_sales");
    openapiFields.add("current_projected_sales");
    openapiFields.add("past_actual_sales");
    openapiFields.add("past_projected_sales");
    openapiFields.add("current_actual_labor");
    openapiFields.add("current_projected_labor");
    openapiFields.add("past_actual_labor");
    openapiFields.add("current_labor_ratio");
    openapiFields.add("current_labor_target");
    openapiFields.add("past_labor_ratio");
    openapiFields.add("current_spmh");
    openapiFields.add("past_spmh");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportsGetDailyStatsResponseDataSummary
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReportsGetDailyStatsResponseDataSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportsGetDailyStatsResponseDataSummary is not found in the empty JSON string", ReportsGetDailyStatsResponseDataSummary.openapiRequiredFields.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportsGetDailyStatsResponseDataSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportsGetDailyStatsResponseDataSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportsGetDailyStatsResponseDataSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportsGetDailyStatsResponseDataSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportsGetDailyStatsResponseDataSummary>() {
           @Override
           public void write(JsonWriter out, ReportsGetDailyStatsResponseDataSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportsGetDailyStatsResponseDataSummary read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ReportsGetDailyStatsResponseDataSummary instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportsGetDailyStatsResponseDataSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportsGetDailyStatsResponseDataSummary
  * @throws IOException if the JSON string is invalid with respect to ReportsGetDailyStatsResponseDataSummary
  */
  public static ReportsGetDailyStatsResponseDataSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportsGetDailyStatsResponseDataSummary.class);
  }

 /**
  * Convert an instance of ReportsGetDailyStatsResponseDataSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

