/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ForecastOverridesBulkCreateProjectedForecastOverrideResponseDataExceptionsInner;
import com.konfigthis.client.model.ForecastOverridesBulkCreateProjectedForecastOverrideResponseDataForecastOverridesInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ForecastOverridesBulkCreateProjectedForecastOverrideResponseData
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ForecastOverridesBulkCreateProjectedForecastOverrideResponseData {
  public static final String SERIALIZED_NAME_FORECAST_OVERRIDES = "forecast_overrides";
  @SerializedName(SERIALIZED_NAME_FORECAST_OVERRIDES)
  private List<ForecastOverridesBulkCreateProjectedForecastOverrideResponseDataForecastOverridesInner> forecastOverrides = null;

  public static final String SERIALIZED_NAME_EXCEPTIONS = "exceptions";
  @SerializedName(SERIALIZED_NAME_EXCEPTIONS)
  private List<ForecastOverridesBulkCreateProjectedForecastOverrideResponseDataExceptionsInner> exceptions = null;

  public ForecastOverridesBulkCreateProjectedForecastOverrideResponseData() {
  }

  public ForecastOverridesBulkCreateProjectedForecastOverrideResponseData forecastOverrides(List<ForecastOverridesBulkCreateProjectedForecastOverrideResponseDataForecastOverridesInner> forecastOverrides) {
    
    
    
    
    this.forecastOverrides = forecastOverrides;
    return this;
  }

  public ForecastOverridesBulkCreateProjectedForecastOverrideResponseData addForecastOverridesItem(ForecastOverridesBulkCreateProjectedForecastOverrideResponseDataForecastOverridesInner forecastOverridesItem) {
    if (this.forecastOverrides == null) {
      this.forecastOverrides = new ArrayList<>();
    }
    this.forecastOverrides.add(forecastOverridesItem);
    return this;
  }

   /**
   * Get forecastOverrides
   * @return forecastOverrides
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ForecastOverridesBulkCreateProjectedForecastOverrideResponseDataForecastOverridesInner> getForecastOverrides() {
    return forecastOverrides;
  }


  public void setForecastOverrides(List<ForecastOverridesBulkCreateProjectedForecastOverrideResponseDataForecastOverridesInner> forecastOverrides) {
    
    
    
    this.forecastOverrides = forecastOverrides;
  }


  public ForecastOverridesBulkCreateProjectedForecastOverrideResponseData exceptions(List<ForecastOverridesBulkCreateProjectedForecastOverrideResponseDataExceptionsInner> exceptions) {
    
    
    
    
    this.exceptions = exceptions;
    return this;
  }

  public ForecastOverridesBulkCreateProjectedForecastOverrideResponseData addExceptionsItem(ForecastOverridesBulkCreateProjectedForecastOverrideResponseDataExceptionsInner exceptionsItem) {
    if (this.exceptions == null) {
      this.exceptions = new ArrayList<>();
    }
    this.exceptions.add(exceptionsItem);
    return this;
  }

   /**
   * Get exceptions
   * @return exceptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ForecastOverridesBulkCreateProjectedForecastOverrideResponseDataExceptionsInner> getExceptions() {
    return exceptions;
  }


  public void setExceptions(List<ForecastOverridesBulkCreateProjectedForecastOverrideResponseDataExceptionsInner> exceptions) {
    
    
    
    this.exceptions = exceptions;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ForecastOverridesBulkCreateProjectedForecastOverrideResponseData instance itself
   */
  public ForecastOverridesBulkCreateProjectedForecastOverrideResponseData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForecastOverridesBulkCreateProjectedForecastOverrideResponseData forecastOverridesBulkCreateProjectedForecastOverrideResponseData = (ForecastOverridesBulkCreateProjectedForecastOverrideResponseData) o;
    return Objects.equals(this.forecastOverrides, forecastOverridesBulkCreateProjectedForecastOverrideResponseData.forecastOverrides) &&
        Objects.equals(this.exceptions, forecastOverridesBulkCreateProjectedForecastOverrideResponseData.exceptions)&&
        Objects.equals(this.additionalProperties, forecastOverridesBulkCreateProjectedForecastOverrideResponseData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(forecastOverrides, exceptions, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForecastOverridesBulkCreateProjectedForecastOverrideResponseData {\n");
    sb.append("    forecastOverrides: ").append(toIndentedString(forecastOverrides)).append("\n");
    sb.append("    exceptions: ").append(toIndentedString(exceptions)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("forecast_overrides");
    openapiFields.add("exceptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ForecastOverridesBulkCreateProjectedForecastOverrideResponseData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ForecastOverridesBulkCreateProjectedForecastOverrideResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ForecastOverridesBulkCreateProjectedForecastOverrideResponseData is not found in the empty JSON string", ForecastOverridesBulkCreateProjectedForecastOverrideResponseData.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("forecast_overrides") != null && !jsonObj.get("forecast_overrides").isJsonNull()) {
        JsonArray jsonArrayforecastOverrides = jsonObj.getAsJsonArray("forecast_overrides");
        if (jsonArrayforecastOverrides != null) {
          // ensure the json data is an array
          if (!jsonObj.get("forecast_overrides").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `forecast_overrides` to be an array in the JSON string but got `%s`", jsonObj.get("forecast_overrides").toString()));
          }

          // validate the optional field `forecast_overrides` (array)
          for (int i = 0; i < jsonArrayforecastOverrides.size(); i++) {
            ForecastOverridesBulkCreateProjectedForecastOverrideResponseDataForecastOverridesInner.validateJsonObject(jsonArrayforecastOverrides.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("exceptions") != null && !jsonObj.get("exceptions").isJsonNull()) {
        JsonArray jsonArrayexceptions = jsonObj.getAsJsonArray("exceptions");
        if (jsonArrayexceptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exceptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exceptions` to be an array in the JSON string but got `%s`", jsonObj.get("exceptions").toString()));
          }

          // validate the optional field `exceptions` (array)
          for (int i = 0; i < jsonArrayexceptions.size(); i++) {
            ForecastOverridesBulkCreateProjectedForecastOverrideResponseDataExceptionsInner.validateJsonObject(jsonArrayexceptions.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ForecastOverridesBulkCreateProjectedForecastOverrideResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ForecastOverridesBulkCreateProjectedForecastOverrideResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ForecastOverridesBulkCreateProjectedForecastOverrideResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ForecastOverridesBulkCreateProjectedForecastOverrideResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<ForecastOverridesBulkCreateProjectedForecastOverrideResponseData>() {
           @Override
           public void write(JsonWriter out, ForecastOverridesBulkCreateProjectedForecastOverrideResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ForecastOverridesBulkCreateProjectedForecastOverrideResponseData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ForecastOverridesBulkCreateProjectedForecastOverrideResponseData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ForecastOverridesBulkCreateProjectedForecastOverrideResponseData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ForecastOverridesBulkCreateProjectedForecastOverrideResponseData
  * @throws IOException if the JSON string is invalid with respect to ForecastOverridesBulkCreateProjectedForecastOverrideResponseData
  */
  public static ForecastOverridesBulkCreateProjectedForecastOverrideResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ForecastOverridesBulkCreateProjectedForecastOverrideResponseData.class);
  }

 /**
  * Convert an instance of ForecastOverridesBulkCreateProjectedForecastOverrideResponseData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

