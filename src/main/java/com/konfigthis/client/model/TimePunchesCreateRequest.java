/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TimePunchesCreateRequestBreaksInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TimePunchesCreateRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TimePunchesCreateRequest {
  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private Integer locationId;

  public static final String SERIALIZED_NAME_DEPARTMENT_ID = "department_id";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_ID)
  private Integer departmentId;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_ROLE_ID = "role_id";
  @SerializedName(SERIALIZED_NAME_ROLE_ID)
  private Integer roleId;

  public static final String SERIALIZED_NAME_CLOCKED_IN = "clocked_in";
  @SerializedName(SERIALIZED_NAME_CLOCKED_IN)
  private OffsetDateTime clockedIn;

  public static final String SERIALIZED_NAME_CLOCKED_OUT = "clocked_out";
  @SerializedName(SERIALIZED_NAME_CLOCKED_OUT)
  private OffsetDateTime clockedOut;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_TIPS = "tips";
  @SerializedName(SERIALIZED_NAME_TIPS)
  private Integer tips;

  public static final String SERIALIZED_NAME_BREAKS = "breaks";
  @SerializedName(SERIALIZED_NAME_BREAKS)
  private List<TimePunchesCreateRequestBreaksInner> breaks = null;

  public TimePunchesCreateRequest() {
  }

  public TimePunchesCreateRequest locationId(Integer locationId) {
    
    
    
    
    this.locationId = locationId;
    return this;
  }

   /**
   * Location ID.
   * @return locationId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Location ID.")

  public Integer getLocationId() {
    return locationId;
  }


  public void setLocationId(Integer locationId) {
    
    
    
    this.locationId = locationId;
  }


  public TimePunchesCreateRequest departmentId(Integer departmentId) {
    
    
    
    
    this.departmentId = departmentId;
    return this;
  }

   /**
   * Department ID. Defaults to 0 if not defined.
   * @return departmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Department ID. Defaults to 0 if not defined.")

  public Integer getDepartmentId() {
    return departmentId;
  }


  public void setDepartmentId(Integer departmentId) {
    
    
    
    this.departmentId = departmentId;
  }


  public TimePunchesCreateRequest userId(Integer userId) {
    
    
    
    
    this.userId = userId;
    return this;
  }

   /**
   * The 7shifts ID of the user who is clocking in.
   * @return userId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The 7shifts ID of the user who is clocking in.")

  public Integer getUserId() {
    return userId;
  }


  public void setUserId(Integer userId) {
    
    
    
    this.userId = userId;
  }


  public TimePunchesCreateRequest roleId(Integer roleId) {
    
    
    
    
    this.roleId = roleId;
    return this;
  }

   /**
   * The ID of the role that the user is clocking in to work for. Defaults to 0 if not defined.
   * @return roleId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the role that the user is clocking in to work for. Defaults to 0 if not defined.")

  public Integer getRoleId() {
    return roleId;
  }


  public void setRoleId(Integer roleId) {
    
    
    
    this.roleId = roleId;
  }


  public TimePunchesCreateRequest clockedIn(OffsetDateTime clockedIn) {
    
    
    
    
    this.clockedIn = clockedIn;
    return this;
  }

   /**
   * The start date and time when the user clocked in. Formatted as ISO8601 datetime in UTC timezone.
   * @return clockedIn
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2021-01-01T00:00Z", required = true, value = "The start date and time when the user clocked in. Formatted as ISO8601 datetime in UTC timezone.")

  public OffsetDateTime getClockedIn() {
    return clockedIn;
  }


  public void setClockedIn(OffsetDateTime clockedIn) {
    
    
    
    this.clockedIn = clockedIn;
  }


  public TimePunchesCreateRequest clockedOut(OffsetDateTime clockedOut) {
    
    
    
    
    this.clockedOut = clockedOut;
    return this;
  }

   /**
   * The start date and time when the user clocked out. Formatted as ISO8601 datetime in UTC timezone.
   * @return clockedOut
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-01-01T00:00Z", value = "The start date and time when the user clocked out. Formatted as ISO8601 datetime in UTC timezone.")

  public OffsetDateTime getClockedOut() {
    return clockedOut;
  }


  public void setClockedOut(OffsetDateTime clockedOut) {
    
    
    
    this.clockedOut = clockedOut;
  }


  public TimePunchesCreateRequest notes(String notes) {
    
    
    
    
    this.notes = notes;
    return this;
  }

   /**
   * Additional notes for a shift.
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Additional notes for a shift.")

  public String getNotes() {
    return notes;
  }


  public void setNotes(String notes) {
    
    
    
    this.notes = notes;
  }


  public TimePunchesCreateRequest tips(Integer tips) {
    
    
    
    
    this.tips = tips;
    return this;
  }

   /**
   * Tips declared for the shift in cents
   * @return tips
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tips declared for the shift in cents")

  public Integer getTips() {
    return tips;
  }


  public void setTips(Integer tips) {
    
    
    
    this.tips = tips;
  }


  public TimePunchesCreateRequest breaks(List<TimePunchesCreateRequestBreaksInner> breaks) {
    
    
    
    
    this.breaks = breaks;
    return this;
  }

  public TimePunchesCreateRequest addBreaksItem(TimePunchesCreateRequestBreaksInner breaksItem) {
    if (this.breaks == null) {
      this.breaks = new ArrayList<>();
    }
    this.breaks.add(breaksItem);
    return this;
  }

   /**
   * Get breaks
   * @return breaks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<TimePunchesCreateRequestBreaksInner> getBreaks() {
    return breaks;
  }


  public void setBreaks(List<TimePunchesCreateRequestBreaksInner> breaks) {
    
    
    
    this.breaks = breaks;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TimePunchesCreateRequest instance itself
   */
  public TimePunchesCreateRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimePunchesCreateRequest timePunchesCreateRequest = (TimePunchesCreateRequest) o;
    return Objects.equals(this.locationId, timePunchesCreateRequest.locationId) &&
        Objects.equals(this.departmentId, timePunchesCreateRequest.departmentId) &&
        Objects.equals(this.userId, timePunchesCreateRequest.userId) &&
        Objects.equals(this.roleId, timePunchesCreateRequest.roleId) &&
        Objects.equals(this.clockedIn, timePunchesCreateRequest.clockedIn) &&
        Objects.equals(this.clockedOut, timePunchesCreateRequest.clockedOut) &&
        Objects.equals(this.notes, timePunchesCreateRequest.notes) &&
        Objects.equals(this.tips, timePunchesCreateRequest.tips) &&
        Objects.equals(this.breaks, timePunchesCreateRequest.breaks)&&
        Objects.equals(this.additionalProperties, timePunchesCreateRequest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(locationId, departmentId, userId, roleId, clockedIn, clockedOut, notes, tips, breaks, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimePunchesCreateRequest {\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    departmentId: ").append(toIndentedString(departmentId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    roleId: ").append(toIndentedString(roleId)).append("\n");
    sb.append("    clockedIn: ").append(toIndentedString(clockedIn)).append("\n");
    sb.append("    clockedOut: ").append(toIndentedString(clockedOut)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    tips: ").append(toIndentedString(tips)).append("\n");
    sb.append("    breaks: ").append(toIndentedString(breaks)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("location_id");
    openapiFields.add("department_id");
    openapiFields.add("user_id");
    openapiFields.add("role_id");
    openapiFields.add("clocked_in");
    openapiFields.add("clocked_out");
    openapiFields.add("notes");
    openapiFields.add("tips");
    openapiFields.add("breaks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("location_id");
    openapiRequiredFields.add("user_id");
    openapiRequiredFields.add("clocked_in");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TimePunchesCreateRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TimePunchesCreateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimePunchesCreateRequest is not found in the empty JSON string", TimePunchesCreateRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TimePunchesCreateRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if (jsonObj.get("breaks") != null && !jsonObj.get("breaks").isJsonNull()) {
        JsonArray jsonArraybreaks = jsonObj.getAsJsonArray("breaks");
        if (jsonArraybreaks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("breaks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `breaks` to be an array in the JSON string but got `%s`", jsonObj.get("breaks").toString()));
          }

          // validate the optional field `breaks` (array)
          for (int i = 0; i < jsonArraybreaks.size(); i++) {
            TimePunchesCreateRequestBreaksInner.validateJsonObject(jsonArraybreaks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimePunchesCreateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimePunchesCreateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimePunchesCreateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimePunchesCreateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TimePunchesCreateRequest>() {
           @Override
           public void write(JsonWriter out, TimePunchesCreateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TimePunchesCreateRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TimePunchesCreateRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TimePunchesCreateRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TimePunchesCreateRequest
  * @throws IOException if the JSON string is invalid with respect to TimePunchesCreateRequest
  */
  public static TimePunchesCreateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimePunchesCreateRequest.class);
  }

 /**
  * Convert an instance of TimePunchesCreateRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

