/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ReceiptsListResponseDataInnerReceiptLinesInner;
import com.konfigthis.client.model.ReceiptsListResponseDataInnerTipDetailsInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ReceiptsListResponseDataInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ReceiptsListResponseDataInner {
  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private UUID uuid;

  public static final String SERIALIZED_NAME_COMPANY_ID = "company_id";
  @SerializedName(SERIALIZED_NAME_COMPANY_ID)
  private Integer companyId;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private Integer locationId;

  public static final String SERIALIZED_NAME_POS_ID = "pos_id";
  @SerializedName(SERIALIZED_NAME_POS_ID)
  private Integer posId;

  public static final String SERIALIZED_NAME_RECEIPT_ID = "receipt_id";
  @SerializedName(SERIALIZED_NAME_RECEIPT_ID)
  private String receiptId;

  public static final String SERIALIZED_NAME_RECEIPT_DATE = "receipt_date";
  @SerializedName(SERIALIZED_NAME_RECEIPT_DATE)
  private OffsetDateTime receiptDate;

  public static final String SERIALIZED_NAME_RECEIPT_CLOSE_DATE = "receipt_close_date";
  @SerializedName(SERIALIZED_NAME_RECEIPT_CLOSE_DATE)
  private OffsetDateTime receiptCloseDate;

  public static final String SERIALIZED_NAME_NET_TOTAL = "net_total";
  @SerializedName(SERIALIZED_NAME_NET_TOTAL)
  private Integer netTotal;

  public static final String SERIALIZED_NAME_GROSS_TOTAL = "gross_total";
  @SerializedName(SERIALIZED_NAME_GROSS_TOTAL)
  private Integer grossTotal;

  public static final String SERIALIZED_NAME_TIPS = "tips";
  @SerializedName(SERIALIZED_NAME_TIPS)
  private Integer tips = 0;

  public static final String SERIALIZED_NAME_TOTAL_RECEIPT_DISCOUNTS = "total_receipt_discounts";
  @SerializedName(SERIALIZED_NAME_TOTAL_RECEIPT_DISCOUNTS)
  private Integer totalReceiptDiscounts = 0;

  public static final String SERIALIZED_NAME_TOTAL_ITEM_DISCOUNTS = "total_item_discounts";
  @SerializedName(SERIALIZED_NAME_TOTAL_ITEM_DISCOUNTS)
  private Integer totalItemDiscounts = 0;

  public static final String SERIALIZED_NAME_EXTERNAL_USER_ID = "external_user_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_USER_ID)
  private String externalUserId;

  public static final String SERIALIZED_NAME_REVENUE_CENTER = "revenue_center";
  @SerializedName(SERIALIZED_NAME_REVENUE_CENTER)
  private String revenueCenter;

  public static final String SERIALIZED_NAME_RECEIPT_LINES = "receipt_lines";
  @SerializedName(SERIALIZED_NAME_RECEIPT_LINES)
  private List<ReceiptsListResponseDataInnerReceiptLinesInner> receiptLines = null;

  public static final String SERIALIZED_NAME_TIP_DETAILS = "tip_details";
  @SerializedName(SERIALIZED_NAME_TIP_DETAILS)
  private List<ReceiptsListResponseDataInnerTipDetailsInner> tipDetails = null;

  /**
   * Status of the receipt
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    OPEN("open"),
    
    CLOSED("closed"),
    
    VOIDED("voided"),
    
    DELETED("deleted");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status = StatusEnum.CLOSED;

  public static final String SERIALIZED_NAME_CREATED_DATE = "created_date";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modified_date";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  private OffsetDateTime modifiedDate;

  public ReceiptsListResponseDataInner() {
  }

  public ReceiptsListResponseDataInner uuid(UUID uuid) {
    
    
    
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getUuid() {
    return uuid;
  }


  public void setUuid(UUID uuid) {
    
    
    
    this.uuid = uuid;
  }


  public ReceiptsListResponseDataInner companyId(Integer companyId) {
    
    
    
    
    this.companyId = companyId;
    return this;
  }

   /**
   * The id of the company
   * @return companyId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123", value = "The id of the company")

  public Integer getCompanyId() {
    return companyId;
  }


  public void setCompanyId(Integer companyId) {
    
    
    
    this.companyId = companyId;
  }


  public ReceiptsListResponseDataInner locationId(Integer locationId) {
    if (locationId != null && locationId < 0) {
      throw new IllegalArgumentException("Invalid value for locationId. Must be greater than or equal to 0.");
    }
    
    
    
    this.locationId = locationId;
    return this;
  }

   /**
   * The id of the location where this receipt was created
   * minimum: 0
   * @return locationId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The id of the location where this receipt was created")

  public Integer getLocationId() {
    return locationId;
  }


  public void setLocationId(Integer locationId) {
    if (locationId != null && locationId < 0) {
      throw new IllegalArgumentException("Invalid value for locationId. Must be greater than or equal to 0.");
    }
    
    
    this.locationId = locationId;
  }


  public ReceiptsListResponseDataInner posId(Integer posId) {
    
    
    
    
    this.posId = posId;
    return this;
  }

   /**
   * The ID of the POS system that generated the receipt
   * @return posId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "The ID of the POS system that generated the receipt")

  public Integer getPosId() {
    return posId;
  }


  public void setPosId(Integer posId) {
    
    
    
    this.posId = posId;
  }


  public ReceiptsListResponseDataInner receiptId(String receiptId) {
    
    
    
    
    this.receiptId = receiptId;
    return this;
  }

   /**
   * ID available to the client in the POS UI. Be it a GUID, a receipt number, a composite of date and ID and terminal, etc
   * @return receiptId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "RECEIPT001", required = true, value = "ID available to the client in the POS UI. Be it a GUID, a receipt number, a composite of date and ID and terminal, etc")

  public String getReceiptId() {
    return receiptId;
  }


  public void setReceiptId(String receiptId) {
    
    
    
    this.receiptId = receiptId;
  }


  public ReceiptsListResponseDataInner receiptDate(OffsetDateTime receiptDate) {
    
    
    
    
    this.receiptDate = receiptDate;
    return this;
  }

   /**
   * ISO8601 date and time in UTC when receipt was created
   * @return receiptDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-01-01T00:00Z", value = "ISO8601 date and time in UTC when receipt was created")

  public OffsetDateTime getReceiptDate() {
    return receiptDate;
  }


  public void setReceiptDate(OffsetDateTime receiptDate) {
    
    
    
    this.receiptDate = receiptDate;
  }


  public ReceiptsListResponseDataInner receiptCloseDate(OffsetDateTime receiptCloseDate) {
    
    
    
    
    this.receiptCloseDate = receiptCloseDate;
    return this;
  }

   /**
   * ISO8601 date and time in UTC when receipt was closed
   * @return receiptCloseDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-01-01T00:00Z", value = "ISO8601 date and time in UTC when receipt was closed")

  public OffsetDateTime getReceiptCloseDate() {
    return receiptCloseDate;
  }


  public void setReceiptCloseDate(OffsetDateTime receiptCloseDate) {
    
    
    
    this.receiptCloseDate = receiptCloseDate;
  }


  public ReceiptsListResponseDataInner netTotal(Integer netTotal) {
    
    
    
    
    this.netTotal = netTotal;
    return this;
  }

   /**
   * Net total of the receipt in cents, pre tax, post-discounts, pre tips
   * @return netTotal
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Net total of the receipt in cents, pre tax, post-discounts, pre tips")

  public Integer getNetTotal() {
    return netTotal;
  }


  public void setNetTotal(Integer netTotal) {
    
    
    
    this.netTotal = netTotal;
  }


  public ReceiptsListResponseDataInner grossTotal(Integer grossTotal) {
    
    
    
    
    this.grossTotal = grossTotal;
    return this;
  }

   /**
   * Gross total of the receipt in cents
   * @return grossTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gross total of the receipt in cents")

  public Integer getGrossTotal() {
    return grossTotal;
  }


  public void setGrossTotal(Integer grossTotal) {
    
    
    
    this.grossTotal = grossTotal;
  }


  public ReceiptsListResponseDataInner tips(Integer tips) {
    
    
    
    
    this.tips = tips;
    return this;
  }

   /**
   * Total tips in cents
   * @return tips
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "Total tips in cents")

  public Integer getTips() {
    return tips;
  }


  public void setTips(Integer tips) {
    
    
    
    this.tips = tips;
  }


  public ReceiptsListResponseDataInner totalReceiptDiscounts(Integer totalReceiptDiscounts) {
    
    
    
    
    this.totalReceiptDiscounts = totalReceiptDiscounts;
    return this;
  }

   /**
   * Total receipt discounts in cents
   * @return totalReceiptDiscounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "Total receipt discounts in cents")

  public Integer getTotalReceiptDiscounts() {
    return totalReceiptDiscounts;
  }


  public void setTotalReceiptDiscounts(Integer totalReceiptDiscounts) {
    
    
    
    this.totalReceiptDiscounts = totalReceiptDiscounts;
  }


  public ReceiptsListResponseDataInner totalItemDiscounts(Integer totalItemDiscounts) {
    
    
    
    
    this.totalItemDiscounts = totalItemDiscounts;
    return this;
  }

   /**
   * Item discounts in cents
   * @return totalItemDiscounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "Item discounts in cents")

  public Integer getTotalItemDiscounts() {
    return totalItemDiscounts;
  }


  public void setTotalItemDiscounts(Integer totalItemDiscounts) {
    
    
    
    this.totalItemDiscounts = totalItemDiscounts;
  }


  public ReceiptsListResponseDataInner externalUserId(String externalUserId) {
    
    
    
    
    this.externalUserId = externalUserId;
    return this;
  }

   /**
   * ID available to the client in the POS UI. Representing the user responsible for creation of receipt.
   * @return externalUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SCOOBYDOO1", value = "ID available to the client in the POS UI. Representing the user responsible for creation of receipt.")

  public String getExternalUserId() {
    return externalUserId;
  }


  public void setExternalUserId(String externalUserId) {
    
    
    
    this.externalUserId = externalUserId;
  }


  public ReceiptsListResponseDataInner revenueCenter(String revenueCenter) {
    
    
    
    
    this.revenueCenter = revenueCenter;
    return this;
  }

   /**
   * ID of the revenue center
   * @return revenueCenter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "REV01", value = "ID of the revenue center")

  public String getRevenueCenter() {
    return revenueCenter;
  }


  public void setRevenueCenter(String revenueCenter) {
    
    
    
    this.revenueCenter = revenueCenter;
  }


  public ReceiptsListResponseDataInner receiptLines(List<ReceiptsListResponseDataInnerReceiptLinesInner> receiptLines) {
    
    
    
    
    this.receiptLines = receiptLines;
    return this;
  }

  public ReceiptsListResponseDataInner addReceiptLinesItem(ReceiptsListResponseDataInnerReceiptLinesInner receiptLinesItem) {
    if (this.receiptLines == null) {
      this.receiptLines = new ArrayList<>();
    }
    this.receiptLines.add(receiptLinesItem);
    return this;
  }

   /**
   * Receipt line items
   * @return receiptLines
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Receipt line items")

  public List<ReceiptsListResponseDataInnerReceiptLinesInner> getReceiptLines() {
    return receiptLines;
  }


  public void setReceiptLines(List<ReceiptsListResponseDataInnerReceiptLinesInner> receiptLines) {
    
    
    
    this.receiptLines = receiptLines;
  }


  public ReceiptsListResponseDataInner tipDetails(List<ReceiptsListResponseDataInnerTipDetailsInner> tipDetails) {
    
    
    
    
    this.tipDetails = tipDetails;
    return this;
  }

  public ReceiptsListResponseDataInner addTipDetailsItem(ReceiptsListResponseDataInnerTipDetailsInner tipDetailsItem) {
    if (this.tipDetails == null) {
      this.tipDetails = new ArrayList<>();
    }
    this.tipDetails.add(tipDetailsItem);
    return this;
  }

   /**
   * Tip line items
   * @return tipDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tip line items")

  public List<ReceiptsListResponseDataInnerTipDetailsInner> getTipDetails() {
    return tipDetails;
  }


  public void setTipDetails(List<ReceiptsListResponseDataInnerTipDetailsInner> tipDetails) {
    
    
    
    this.tipDetails = tipDetails;
  }


  public ReceiptsListResponseDataInner status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Status of the receipt
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CLOSED", value = "Status of the receipt")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public ReceiptsListResponseDataInner createdDate(OffsetDateTime createdDate) {
    
    
    
    
    this.createdDate = createdDate;
    return this;
  }

   /**
   * ISO8601 date and time in UTC when receipt was created in 7shifts system
   * @return createdDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-01-01T00:00Z", value = "ISO8601 date and time in UTC when receipt was created in 7shifts system")

  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }


  public void setCreatedDate(OffsetDateTime createdDate) {
    
    
    
    this.createdDate = createdDate;
  }


  public ReceiptsListResponseDataInner modifiedDate(OffsetDateTime modifiedDate) {
    
    
    
    
    this.modifiedDate = modifiedDate;
    return this;
  }

   /**
   * ISO8601 date and time in UTC when receipt was last updated in 7shifts system
   * @return modifiedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-01-01T00:00Z", value = "ISO8601 date and time in UTC when receipt was last updated in 7shifts system")

  public OffsetDateTime getModifiedDate() {
    return modifiedDate;
  }


  public void setModifiedDate(OffsetDateTime modifiedDate) {
    
    
    
    this.modifiedDate = modifiedDate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReceiptsListResponseDataInner instance itself
   */
  public ReceiptsListResponseDataInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReceiptsListResponseDataInner receiptsListResponseDataInner = (ReceiptsListResponseDataInner) o;
    return Objects.equals(this.uuid, receiptsListResponseDataInner.uuid) &&
        Objects.equals(this.companyId, receiptsListResponseDataInner.companyId) &&
        Objects.equals(this.locationId, receiptsListResponseDataInner.locationId) &&
        Objects.equals(this.posId, receiptsListResponseDataInner.posId) &&
        Objects.equals(this.receiptId, receiptsListResponseDataInner.receiptId) &&
        Objects.equals(this.receiptDate, receiptsListResponseDataInner.receiptDate) &&
        Objects.equals(this.receiptCloseDate, receiptsListResponseDataInner.receiptCloseDate) &&
        Objects.equals(this.netTotal, receiptsListResponseDataInner.netTotal) &&
        Objects.equals(this.grossTotal, receiptsListResponseDataInner.grossTotal) &&
        Objects.equals(this.tips, receiptsListResponseDataInner.tips) &&
        Objects.equals(this.totalReceiptDiscounts, receiptsListResponseDataInner.totalReceiptDiscounts) &&
        Objects.equals(this.totalItemDiscounts, receiptsListResponseDataInner.totalItemDiscounts) &&
        Objects.equals(this.externalUserId, receiptsListResponseDataInner.externalUserId) &&
        Objects.equals(this.revenueCenter, receiptsListResponseDataInner.revenueCenter) &&
        Objects.equals(this.receiptLines, receiptsListResponseDataInner.receiptLines) &&
        Objects.equals(this.tipDetails, receiptsListResponseDataInner.tipDetails) &&
        Objects.equals(this.status, receiptsListResponseDataInner.status) &&
        Objects.equals(this.createdDate, receiptsListResponseDataInner.createdDate) &&
        Objects.equals(this.modifiedDate, receiptsListResponseDataInner.modifiedDate)&&
        Objects.equals(this.additionalProperties, receiptsListResponseDataInner.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, companyId, locationId, posId, receiptId, receiptDate, receiptCloseDate, netTotal, grossTotal, tips, totalReceiptDiscounts, totalItemDiscounts, externalUserId, revenueCenter, receiptLines, tipDetails, status, createdDate, modifiedDate, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReceiptsListResponseDataInner {\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    companyId: ").append(toIndentedString(companyId)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    posId: ").append(toIndentedString(posId)).append("\n");
    sb.append("    receiptId: ").append(toIndentedString(receiptId)).append("\n");
    sb.append("    receiptDate: ").append(toIndentedString(receiptDate)).append("\n");
    sb.append("    receiptCloseDate: ").append(toIndentedString(receiptCloseDate)).append("\n");
    sb.append("    netTotal: ").append(toIndentedString(netTotal)).append("\n");
    sb.append("    grossTotal: ").append(toIndentedString(grossTotal)).append("\n");
    sb.append("    tips: ").append(toIndentedString(tips)).append("\n");
    sb.append("    totalReceiptDiscounts: ").append(toIndentedString(totalReceiptDiscounts)).append("\n");
    sb.append("    totalItemDiscounts: ").append(toIndentedString(totalItemDiscounts)).append("\n");
    sb.append("    externalUserId: ").append(toIndentedString(externalUserId)).append("\n");
    sb.append("    revenueCenter: ").append(toIndentedString(revenueCenter)).append("\n");
    sb.append("    receiptLines: ").append(toIndentedString(receiptLines)).append("\n");
    sb.append("    tipDetails: ").append(toIndentedString(tipDetails)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("uuid");
    openapiFields.add("company_id");
    openapiFields.add("location_id");
    openapiFields.add("pos_id");
    openapiFields.add("receipt_id");
    openapiFields.add("receipt_date");
    openapiFields.add("receipt_close_date");
    openapiFields.add("net_total");
    openapiFields.add("gross_total");
    openapiFields.add("tips");
    openapiFields.add("total_receipt_discounts");
    openapiFields.add("total_item_discounts");
    openapiFields.add("external_user_id");
    openapiFields.add("revenue_center");
    openapiFields.add("receipt_lines");
    openapiFields.add("tip_details");
    openapiFields.add("status");
    openapiFields.add("created_date");
    openapiFields.add("modified_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("location_id");
    openapiRequiredFields.add("receipt_id");
    openapiRequiredFields.add("net_total");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReceiptsListResponseDataInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReceiptsListResponseDataInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReceiptsListResponseDataInner is not found in the empty JSON string", ReceiptsListResponseDataInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReceiptsListResponseDataInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if (!jsonObj.get("receipt_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receipt_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receipt_id").toString()));
      }
      if (!jsonObj.get("external_user_id").isJsonNull() && (jsonObj.get("external_user_id") != null && !jsonObj.get("external_user_id").isJsonNull()) && !jsonObj.get("external_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_user_id").toString()));
      }
      if (!jsonObj.get("revenue_center").isJsonNull() && (jsonObj.get("revenue_center") != null && !jsonObj.get("revenue_center").isJsonNull()) && !jsonObj.get("revenue_center").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revenue_center` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revenue_center").toString()));
      }
      if (jsonObj.get("receipt_lines") != null && !jsonObj.get("receipt_lines").isJsonNull()) {
        JsonArray jsonArrayreceiptLines = jsonObj.getAsJsonArray("receipt_lines");
        if (jsonArrayreceiptLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("receipt_lines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `receipt_lines` to be an array in the JSON string but got `%s`", jsonObj.get("receipt_lines").toString()));
          }

          // validate the optional field `receipt_lines` (array)
          for (int i = 0; i < jsonArrayreceiptLines.size(); i++) {
            ReceiptsListResponseDataInnerReceiptLinesInner.validateJsonObject(jsonArrayreceiptLines.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("tip_details") != null && !jsonObj.get("tip_details").isJsonNull()) {
        JsonArray jsonArraytipDetails = jsonObj.getAsJsonArray("tip_details");
        if (jsonArraytipDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tip_details").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tip_details` to be an array in the JSON string but got `%s`", jsonObj.get("tip_details").toString()));
          }

          // validate the optional field `tip_details` (array)
          for (int i = 0; i < jsonArraytipDetails.size(); i++) {
            ReceiptsListResponseDataInnerTipDetailsInner.validateJsonObject(jsonArraytipDetails.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReceiptsListResponseDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReceiptsListResponseDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReceiptsListResponseDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReceiptsListResponseDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ReceiptsListResponseDataInner>() {
           @Override
           public void write(JsonWriter out, ReceiptsListResponseDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReceiptsListResponseDataInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ReceiptsListResponseDataInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReceiptsListResponseDataInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReceiptsListResponseDataInner
  * @throws IOException if the JSON string is invalid with respect to ReceiptsListResponseDataInner
  */
  public static ReceiptsListResponseDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReceiptsListResponseDataInner.class);
  }

 /**
  * Convert an instance of ReceiptsListResponseDataInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

