/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ReportsGetDailySalesAndLaborResponseDataInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ReportsGetDailySalesAndLaborResponseDataInner {
  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_ACTUAL_SALES = "actual_sales";
  @SerializedName(SERIALIZED_NAME_ACTUAL_SALES)
  private Long actualSales;

  public static final String SERIALIZED_NAME_PROJECTED_SALES = "projected_sales";
  @SerializedName(SERIALIZED_NAME_PROJECTED_SALES)
  private Long projectedSales;

  public static final String SERIALIZED_NAME_PROJECTED_SALES_OVERRIDE = "projected_sales_override";
  @SerializedName(SERIALIZED_NAME_PROJECTED_SALES_OVERRIDE)
  private Double projectedSalesOverride;

  public static final String SERIALIZED_NAME_ACTUAL_LABOR_COST = "actual_labor_cost";
  @SerializedName(SERIALIZED_NAME_ACTUAL_LABOR_COST)
  private Long actualLaborCost;

  public static final String SERIALIZED_NAME_PROJECTED_LABOR_COST = "projected_labor_cost";
  @SerializedName(SERIALIZED_NAME_PROJECTED_LABOR_COST)
  private Long projectedLaborCost;

  public static final String SERIALIZED_NAME_SALES_PER_LABOR_HOUR = "sales_per_labor_hour";
  @SerializedName(SERIALIZED_NAME_SALES_PER_LABOR_HOUR)
  private Float salesPerLaborHour;

  public static final String SERIALIZED_NAME_PROJECTED_SALES_PER_LABOR_HOUR = "projected_sales_per_labor_hour";
  @SerializedName(SERIALIZED_NAME_PROJECTED_SALES_PER_LABOR_HOUR)
  private Float projectedSalesPerLaborHour;

  public static final String SERIALIZED_NAME_ITEMS_PER_LABOR_HOUR = "items_per_labor_hour";
  @SerializedName(SERIALIZED_NAME_ITEMS_PER_LABOR_HOUR)
  private Float itemsPerLaborHour;

  public static final String SERIALIZED_NAME_PROJECTED_ITEMS_PER_LABOR_HOUR = "projected_items_per_labor_hour";
  @SerializedName(SERIALIZED_NAME_PROJECTED_ITEMS_PER_LABOR_HOUR)
  private Float projectedItemsPerLaborHour;

  public static final String SERIALIZED_NAME_LABOR_PERCENT = "labor_percent";
  @SerializedName(SERIALIZED_NAME_LABOR_PERCENT)
  private Float laborPercent;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private Long locationId;

  public static final String SERIALIZED_NAME_DEPARTMENT_ID = "department_id";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_ID)
  private Long departmentId;

  public static final String SERIALIZED_NAME_ACTUAL_ITEMS = "actual_items";
  @SerializedName(SERIALIZED_NAME_ACTUAL_ITEMS)
  private Long actualItems;

  public static final String SERIALIZED_NAME_PROJECTED_ITEMS = "projected_items";
  @SerializedName(SERIALIZED_NAME_PROJECTED_ITEMS)
  private Long projectedItems;

  public static final String SERIALIZED_NAME_PROJECTED_ITEMS_OVERRIDE = "projected_items_override";
  @SerializedName(SERIALIZED_NAME_PROJECTED_ITEMS_OVERRIDE)
  private Long projectedItemsOverride;

  public static final String SERIALIZED_NAME_LABOR_TARGET = "labor_target";
  @SerializedName(SERIALIZED_NAME_LABOR_TARGET)
  private Float laborTarget;

  public static final String SERIALIZED_NAME_ACTUAL_LABOR_MINUTES = "actual_labor_minutes";
  @SerializedName(SERIALIZED_NAME_ACTUAL_LABOR_MINUTES)
  private Long actualLaborMinutes;

  public static final String SERIALIZED_NAME_PROJECTED_LABOR_MINUTES = "projected_labor_minutes";
  @SerializedName(SERIALIZED_NAME_PROJECTED_LABOR_MINUTES)
  private Long projectedLaborMinutes;

  public static final String SERIALIZED_NAME_ACTUAL_OT_MINUTES = "actual_ot_minutes";
  @SerializedName(SERIALIZED_NAME_ACTUAL_OT_MINUTES)
  private Long actualOtMinutes;

  public ReportsGetDailySalesAndLaborResponseDataInner() {
  }

  public ReportsGetDailySalesAndLaborResponseDataInner date(String date) {
    
    
    
    
    this.date = date;
    return this;
  }

   /**
   * The date of the actual and projected data (y-m-d)
   * @return date
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-01-01", required = true, value = "The date of the actual and projected data (y-m-d)")

  public String getDate() {
    return date;
  }


  public void setDate(String date) {
    
    
    
    this.date = date;
  }


  public ReportsGetDailySalesAndLaborResponseDataInner actualSales(Long actualSales) {
    
    
    
    
    this.actualSales = actualSales;
    return this;
  }

   /**
   * Actual Sales (in cents)
   * @return actualSales
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1234", required = true, value = "Actual Sales (in cents)")

  public Long getActualSales() {
    return actualSales;
  }


  public void setActualSales(Long actualSales) {
    
    
    
    this.actualSales = actualSales;
  }


  public ReportsGetDailySalesAndLaborResponseDataInner projectedSales(Long projectedSales) {
    
    
    
    
    this.projectedSales = projectedSales;
    return this;
  }

   /**
   * Projected Sales (in cents)
   * @return projectedSales
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1234", required = true, value = "Projected Sales (in cents)")

  public Long getProjectedSales() {
    return projectedSales;
  }


  public void setProjectedSales(Long projectedSales) {
    
    
    
    this.projectedSales = projectedSales;
  }


  public ReportsGetDailySalesAndLaborResponseDataInner projectedSalesOverride(Double projectedSalesOverride) {
    
    
    
    
    this.projectedSalesOverride = projectedSalesOverride;
    return this;
  }

  public ReportsGetDailySalesAndLaborResponseDataInner projectedSalesOverride(Integer projectedSalesOverride) {
    
    
    
    
    this.projectedSalesOverride = projectedSalesOverride.doubleValue();
    return this;
  }

   /**
   * User specified override for projected sales
   * @return projectedSalesOverride
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "142", value = "User specified override for projected sales")

  public Double getProjectedSalesOverride() {
    return projectedSalesOverride;
  }


  public void setProjectedSalesOverride(Double projectedSalesOverride) {
    
    
    
    this.projectedSalesOverride = projectedSalesOverride;
  }


  public ReportsGetDailySalesAndLaborResponseDataInner actualLaborCost(Long actualLaborCost) {
    
    
    
    
    this.actualLaborCost = actualLaborCost;
    return this;
  }

   /**
   * Actual Labor Cost (in cents)
   * @return actualLaborCost
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1234", required = true, value = "Actual Labor Cost (in cents)")

  public Long getActualLaborCost() {
    return actualLaborCost;
  }


  public void setActualLaborCost(Long actualLaborCost) {
    
    
    
    this.actualLaborCost = actualLaborCost;
  }


  public ReportsGetDailySalesAndLaborResponseDataInner projectedLaborCost(Long projectedLaborCost) {
    
    
    
    
    this.projectedLaborCost = projectedLaborCost;
    return this;
  }

   /**
   * Projected Labor Cost (in cents)
   * @return projectedLaborCost
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1234", required = true, value = "Projected Labor Cost (in cents)")

  public Long getProjectedLaborCost() {
    return projectedLaborCost;
  }


  public void setProjectedLaborCost(Long projectedLaborCost) {
    
    
    
    this.projectedLaborCost = projectedLaborCost;
  }


  public ReportsGetDailySalesAndLaborResponseDataInner salesPerLaborHour(Float salesPerLaborHour) {
    
    
    
    
    this.salesPerLaborHour = salesPerLaborHour;
    return this;
  }

   /**
   * Sales Per Labor Hour (in cents, not rounded)
   * @return salesPerLaborHour
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1.23", required = true, value = "Sales Per Labor Hour (in cents, not rounded)")

  public Float getSalesPerLaborHour() {
    return salesPerLaborHour;
  }


  public void setSalesPerLaborHour(Float salesPerLaborHour) {
    
    
    
    this.salesPerLaborHour = salesPerLaborHour;
  }


  public ReportsGetDailySalesAndLaborResponseDataInner projectedSalesPerLaborHour(Float projectedSalesPerLaborHour) {
    
    
    
    
    this.projectedSalesPerLaborHour = projectedSalesPerLaborHour;
    return this;
  }

   /**
   * Projected Sales Per Labor Hour (in cents, not rounded)
   * @return projectedSalesPerLaborHour
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1.23", required = true, value = "Projected Sales Per Labor Hour (in cents, not rounded)")

  public Float getProjectedSalesPerLaborHour() {
    return projectedSalesPerLaborHour;
  }


  public void setProjectedSalesPerLaborHour(Float projectedSalesPerLaborHour) {
    
    
    
    this.projectedSalesPerLaborHour = projectedSalesPerLaborHour;
  }


  public ReportsGetDailySalesAndLaborResponseDataInner itemsPerLaborHour(Float itemsPerLaborHour) {
    
    
    
    
    this.itemsPerLaborHour = itemsPerLaborHour;
    return this;
  }

   /**
   * Items Per Labor Hour
   * @return itemsPerLaborHour
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1.23", required = true, value = "Items Per Labor Hour")

  public Float getItemsPerLaborHour() {
    return itemsPerLaborHour;
  }


  public void setItemsPerLaborHour(Float itemsPerLaborHour) {
    
    
    
    this.itemsPerLaborHour = itemsPerLaborHour;
  }


  public ReportsGetDailySalesAndLaborResponseDataInner projectedItemsPerLaborHour(Float projectedItemsPerLaborHour) {
    
    
    
    
    this.projectedItemsPerLaborHour = projectedItemsPerLaborHour;
    return this;
  }

   /**
   * Projected Items Per Labor Hour
   * @return projectedItemsPerLaborHour
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1.23", required = true, value = "Projected Items Per Labor Hour")

  public Float getProjectedItemsPerLaborHour() {
    return projectedItemsPerLaborHour;
  }


  public void setProjectedItemsPerLaborHour(Float projectedItemsPerLaborHour) {
    
    
    
    this.projectedItemsPerLaborHour = projectedItemsPerLaborHour;
  }


  public ReportsGetDailySalesAndLaborResponseDataInner laborPercent(Float laborPercent) {
    
    
    
    
    this.laborPercent = laborPercent;
    return this;
  }

   /**
   * Labor Percent
   * @return laborPercent
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1.23", required = true, value = "Labor Percent")

  public Float getLaborPercent() {
    return laborPercent;
  }


  public void setLaborPercent(Float laborPercent) {
    
    
    
    this.laborPercent = laborPercent;
  }


  public ReportsGetDailySalesAndLaborResponseDataInner id(Long id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * ID of the Daily Report
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "44", value = "ID of the Daily Report")

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    
    
    
    this.id = id;
  }


  public ReportsGetDailySalesAndLaborResponseDataInner locationId(Long locationId) {
    
    
    
    
    this.locationId = locationId;
    return this;
  }

   /**
   * Location ID for the Daily Report
   * @return locationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123", value = "Location ID for the Daily Report")

  public Long getLocationId() {
    return locationId;
  }


  public void setLocationId(Long locationId) {
    
    
    
    this.locationId = locationId;
  }


  public ReportsGetDailySalesAndLaborResponseDataInner departmentId(Long departmentId) {
    
    
    
    
    this.departmentId = departmentId;
    return this;
  }

   /**
   * Department ID for the Daily Report
   * @return departmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "23", value = "Department ID for the Daily Report")

  public Long getDepartmentId() {
    return departmentId;
  }


  public void setDepartmentId(Long departmentId) {
    
    
    
    this.departmentId = departmentId;
  }


  public ReportsGetDailySalesAndLaborResponseDataInner actualItems(Long actualItems) {
    
    
    
    
    this.actualItems = actualItems;
    return this;
  }

   /**
   * Number of items sold
   * @return actualItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12", value = "Number of items sold")

  public Long getActualItems() {
    return actualItems;
  }


  public void setActualItems(Long actualItems) {
    
    
    
    this.actualItems = actualItems;
  }


  public ReportsGetDailySalesAndLaborResponseDataInner projectedItems(Long projectedItems) {
    
    
    
    
    this.projectedItems = projectedItems;
    return this;
  }

   /**
   * Projected number of items sold
   * @return projectedItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "14", value = "Projected number of items sold")

  public Long getProjectedItems() {
    return projectedItems;
  }


  public void setProjectedItems(Long projectedItems) {
    
    
    
    this.projectedItems = projectedItems;
  }


  public ReportsGetDailySalesAndLaborResponseDataInner projectedItemsOverride(Long projectedItemsOverride) {
    
    
    
    
    this.projectedItemsOverride = projectedItemsOverride;
    return this;
  }

   /**
   * User specified override for projected number of items sold
   * @return projectedItemsOverride
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "13", value = "User specified override for projected number of items sold")

  public Long getProjectedItemsOverride() {
    return projectedItemsOverride;
  }


  public void setProjectedItemsOverride(Long projectedItemsOverride) {
    
    
    
    this.projectedItemsOverride = projectedItemsOverride;
  }


  public ReportsGetDailySalesAndLaborResponseDataInner laborTarget(Float laborTarget) {
    
    
    
    
    this.laborTarget = laborTarget;
    return this;
  }

   /**
   * the labor target
   * @return laborTarget
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12.3", value = "the labor target")

  public Float getLaborTarget() {
    return laborTarget;
  }


  public void setLaborTarget(Float laborTarget) {
    
    
    
    this.laborTarget = laborTarget;
  }


  public ReportsGetDailySalesAndLaborResponseDataInner actualLaborMinutes(Long actualLaborMinutes) {
    
    
    
    
    this.actualLaborMinutes = actualLaborMinutes;
    return this;
  }

   /**
   * Actual number of minutes worked
   * @return actualLaborMinutes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "142", value = "Actual number of minutes worked")

  public Long getActualLaborMinutes() {
    return actualLaborMinutes;
  }


  public void setActualLaborMinutes(Long actualLaborMinutes) {
    
    
    
    this.actualLaborMinutes = actualLaborMinutes;
  }


  public ReportsGetDailySalesAndLaborResponseDataInner projectedLaborMinutes(Long projectedLaborMinutes) {
    
    
    
    
    this.projectedLaborMinutes = projectedLaborMinutes;
    return this;
  }

   /**
   * Projected number of minutes worked
   * @return projectedLaborMinutes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "145", value = "Projected number of minutes worked")

  public Long getProjectedLaborMinutes() {
    return projectedLaborMinutes;
  }


  public void setProjectedLaborMinutes(Long projectedLaborMinutes) {
    
    
    
    this.projectedLaborMinutes = projectedLaborMinutes;
  }


  public ReportsGetDailySalesAndLaborResponseDataInner actualOtMinutes(Long actualOtMinutes) {
    
    
    
    
    this.actualOtMinutes = actualOtMinutes;
    return this;
  }

   /**
   * Actual number of overtime minutes worked
   * @return actualOtMinutes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "23", value = "Actual number of overtime minutes worked")

  public Long getActualOtMinutes() {
    return actualOtMinutes;
  }


  public void setActualOtMinutes(Long actualOtMinutes) {
    
    
    
    this.actualOtMinutes = actualOtMinutes;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReportsGetDailySalesAndLaborResponseDataInner instance itself
   */
  public ReportsGetDailySalesAndLaborResponseDataInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportsGetDailySalesAndLaborResponseDataInner reportsGetDailySalesAndLaborResponseDataInner = (ReportsGetDailySalesAndLaborResponseDataInner) o;
    return Objects.equals(this.date, reportsGetDailySalesAndLaborResponseDataInner.date) &&
        Objects.equals(this.actualSales, reportsGetDailySalesAndLaborResponseDataInner.actualSales) &&
        Objects.equals(this.projectedSales, reportsGetDailySalesAndLaborResponseDataInner.projectedSales) &&
        Objects.equals(this.projectedSalesOverride, reportsGetDailySalesAndLaborResponseDataInner.projectedSalesOverride) &&
        Objects.equals(this.actualLaborCost, reportsGetDailySalesAndLaborResponseDataInner.actualLaborCost) &&
        Objects.equals(this.projectedLaborCost, reportsGetDailySalesAndLaborResponseDataInner.projectedLaborCost) &&
        Objects.equals(this.salesPerLaborHour, reportsGetDailySalesAndLaborResponseDataInner.salesPerLaborHour) &&
        Objects.equals(this.projectedSalesPerLaborHour, reportsGetDailySalesAndLaborResponseDataInner.projectedSalesPerLaborHour) &&
        Objects.equals(this.itemsPerLaborHour, reportsGetDailySalesAndLaborResponseDataInner.itemsPerLaborHour) &&
        Objects.equals(this.projectedItemsPerLaborHour, reportsGetDailySalesAndLaborResponseDataInner.projectedItemsPerLaborHour) &&
        Objects.equals(this.laborPercent, reportsGetDailySalesAndLaborResponseDataInner.laborPercent) &&
        Objects.equals(this.id, reportsGetDailySalesAndLaborResponseDataInner.id) &&
        Objects.equals(this.locationId, reportsGetDailySalesAndLaborResponseDataInner.locationId) &&
        Objects.equals(this.departmentId, reportsGetDailySalesAndLaborResponseDataInner.departmentId) &&
        Objects.equals(this.actualItems, reportsGetDailySalesAndLaborResponseDataInner.actualItems) &&
        Objects.equals(this.projectedItems, reportsGetDailySalesAndLaborResponseDataInner.projectedItems) &&
        Objects.equals(this.projectedItemsOverride, reportsGetDailySalesAndLaborResponseDataInner.projectedItemsOverride) &&
        Objects.equals(this.laborTarget, reportsGetDailySalesAndLaborResponseDataInner.laborTarget) &&
        Objects.equals(this.actualLaborMinutes, reportsGetDailySalesAndLaborResponseDataInner.actualLaborMinutes) &&
        Objects.equals(this.projectedLaborMinutes, reportsGetDailySalesAndLaborResponseDataInner.projectedLaborMinutes) &&
        Objects.equals(this.actualOtMinutes, reportsGetDailySalesAndLaborResponseDataInner.actualOtMinutes)&&
        Objects.equals(this.additionalProperties, reportsGetDailySalesAndLaborResponseDataInner.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, actualSales, projectedSales, projectedSalesOverride, actualLaborCost, projectedLaborCost, salesPerLaborHour, projectedSalesPerLaborHour, itemsPerLaborHour, projectedItemsPerLaborHour, laborPercent, id, locationId, departmentId, actualItems, projectedItems, projectedItemsOverride, laborTarget, actualLaborMinutes, projectedLaborMinutes, actualOtMinutes, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportsGetDailySalesAndLaborResponseDataInner {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    actualSales: ").append(toIndentedString(actualSales)).append("\n");
    sb.append("    projectedSales: ").append(toIndentedString(projectedSales)).append("\n");
    sb.append("    projectedSalesOverride: ").append(toIndentedString(projectedSalesOverride)).append("\n");
    sb.append("    actualLaborCost: ").append(toIndentedString(actualLaborCost)).append("\n");
    sb.append("    projectedLaborCost: ").append(toIndentedString(projectedLaborCost)).append("\n");
    sb.append("    salesPerLaborHour: ").append(toIndentedString(salesPerLaborHour)).append("\n");
    sb.append("    projectedSalesPerLaborHour: ").append(toIndentedString(projectedSalesPerLaborHour)).append("\n");
    sb.append("    itemsPerLaborHour: ").append(toIndentedString(itemsPerLaborHour)).append("\n");
    sb.append("    projectedItemsPerLaborHour: ").append(toIndentedString(projectedItemsPerLaborHour)).append("\n");
    sb.append("    laborPercent: ").append(toIndentedString(laborPercent)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    departmentId: ").append(toIndentedString(departmentId)).append("\n");
    sb.append("    actualItems: ").append(toIndentedString(actualItems)).append("\n");
    sb.append("    projectedItems: ").append(toIndentedString(projectedItems)).append("\n");
    sb.append("    projectedItemsOverride: ").append(toIndentedString(projectedItemsOverride)).append("\n");
    sb.append("    laborTarget: ").append(toIndentedString(laborTarget)).append("\n");
    sb.append("    actualLaborMinutes: ").append(toIndentedString(actualLaborMinutes)).append("\n");
    sb.append("    projectedLaborMinutes: ").append(toIndentedString(projectedLaborMinutes)).append("\n");
    sb.append("    actualOtMinutes: ").append(toIndentedString(actualOtMinutes)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date");
    openapiFields.add("actual_sales");
    openapiFields.add("projected_sales");
    openapiFields.add("projected_sales_override");
    openapiFields.add("actual_labor_cost");
    openapiFields.add("projected_labor_cost");
    openapiFields.add("sales_per_labor_hour");
    openapiFields.add("projected_sales_per_labor_hour");
    openapiFields.add("items_per_labor_hour");
    openapiFields.add("projected_items_per_labor_hour");
    openapiFields.add("labor_percent");
    openapiFields.add("id");
    openapiFields.add("location_id");
    openapiFields.add("department_id");
    openapiFields.add("actual_items");
    openapiFields.add("projected_items");
    openapiFields.add("projected_items_override");
    openapiFields.add("labor_target");
    openapiFields.add("actual_labor_minutes");
    openapiFields.add("projected_labor_minutes");
    openapiFields.add("actual_ot_minutes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("date");
    openapiRequiredFields.add("actual_sales");
    openapiRequiredFields.add("projected_sales");
    openapiRequiredFields.add("actual_labor_cost");
    openapiRequiredFields.add("projected_labor_cost");
    openapiRequiredFields.add("sales_per_labor_hour");
    openapiRequiredFields.add("projected_sales_per_labor_hour");
    openapiRequiredFields.add("items_per_labor_hour");
    openapiRequiredFields.add("projected_items_per_labor_hour");
    openapiRequiredFields.add("labor_percent");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportsGetDailySalesAndLaborResponseDataInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReportsGetDailySalesAndLaborResponseDataInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportsGetDailySalesAndLaborResponseDataInner is not found in the empty JSON string", ReportsGetDailySalesAndLaborResponseDataInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReportsGetDailySalesAndLaborResponseDataInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportsGetDailySalesAndLaborResponseDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportsGetDailySalesAndLaborResponseDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportsGetDailySalesAndLaborResponseDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportsGetDailySalesAndLaborResponseDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportsGetDailySalesAndLaborResponseDataInner>() {
           @Override
           public void write(JsonWriter out, ReportsGetDailySalesAndLaborResponseDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportsGetDailySalesAndLaborResponseDataInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ReportsGetDailySalesAndLaborResponseDataInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportsGetDailySalesAndLaborResponseDataInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportsGetDailySalesAndLaborResponseDataInner
  * @throws IOException if the JSON string is invalid with respect to ReportsGetDailySalesAndLaborResponseDataInner
  */
  public static ReportsGetDailySalesAndLaborResponseDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportsGetDailySalesAndLaborResponseDataInner.class);
  }

 /**
  * Convert an instance of ReportsGetDailySalesAndLaborResponseDataInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

