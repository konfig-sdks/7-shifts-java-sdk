/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AvailabilityCreateNewRequest;
import com.konfigthis.client.model.AvailabilityCreateNewResponse;
import com.konfigthis.client.model.AvailabilityCreateReasonRequest;
import com.konfigthis.client.model.AvailabilityCreateReasonResponse;
import com.konfigthis.client.model.AvailabilityGetByIdResponse;
import com.konfigthis.client.model.AvailabilityListAvailabilitiesResponse;
import com.konfigthis.client.model.AvailabilityListReasonsResponse;
import com.konfigthis.client.model.AvailabilityUpdateByIdRequest;
import com.konfigthis.client.model.AvailabilityUpdateByIdResponse;
import com.konfigthis.client.model.AvailabilityUpdateReasonByIdRequest;
import com.konfigthis.client.model.AvailabilityUpdateReasonByIdResponse;
import com.konfigthis.client.model.AvailabilityUpdateStatusRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AvailabilityApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AvailabilityApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AvailabilityApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewCall(Long companyId, AvailabilityCreateNewRequest availabilityCreateNewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = availabilityCreateNewRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/availabilities"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewValidateBeforeCall(Long companyId, AvailabilityCreateNewRequest availabilityCreateNewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createNew(Async)");
        }

        // verify the required parameter 'availabilityCreateNewRequest' is set
        if (availabilityCreateNewRequest == null) {
            throw new ApiException("Missing the required parameter 'availabilityCreateNewRequest' when calling createNew(Async)");
        }

        return createNewCall(companyId, availabilityCreateNewRequest, _callback);

    }


    private ApiResponse<AvailabilityCreateNewResponse> createNewWithHttpInfo(Long companyId, AvailabilityCreateNewRequest availabilityCreateNewRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewValidateBeforeCall(companyId, availabilityCreateNewRequest, null);
        Type localVarReturnType = new TypeToken<AvailabilityCreateNewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewAsync(Long companyId, AvailabilityCreateNewRequest availabilityCreateNewRequest, final ApiCallback<AvailabilityCreateNewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewValidateBeforeCall(companyId, availabilityCreateNewRequest, _callback);
        Type localVarReturnType = new TypeToken<AvailabilityCreateNewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewRequestBuilder {
        private final Integer userId;
        private final Boolean repeat;
        private final Integer mon;
        private final String monFrom;
        private final String monTo;
        private final String monComments;
        private final String monReason;
        private final Integer tue;
        private final String tueFrom;
        private final String tueTo;
        private final String tueComments;
        private final String tueReason;
        private final Integer wed;
        private final String wedFrom;
        private final String wedTo;
        private final String wedComments;
        private final String wedReason;
        private final Integer thu;
        private final String thuFrom;
        private final String thuTo;
        private final String thuComments;
        private final String thuReason;
        private final Integer fri;
        private final String friFrom;
        private final String friTo;
        private final String friComments;
        private final String friReason;
        private final Integer sat;
        private final String satFrom;
        private final String satTo;
        private final String satComments;
        private final String satReason;
        private final Integer sun;
        private final String sunFrom;
        private final String sunTo;
        private final String sunComments;
        private final String sunReason;
        private final Long companyId;
        private String week;
        private String weekTo;

        private CreateNewRequestBuilder(Integer userId, Boolean repeat, Integer mon, String monFrom, String monTo, String monComments, String monReason, Integer tue, String tueFrom, String tueTo, String tueComments, String tueReason, Integer wed, String wedFrom, String wedTo, String wedComments, String wedReason, Integer thu, String thuFrom, String thuTo, String thuComments, String thuReason, Integer fri, String friFrom, String friTo, String friComments, String friReason, Integer sat, String satFrom, String satTo, String satComments, String satReason, Integer sun, String sunFrom, String sunTo, String sunComments, String sunReason, Long companyId) {
            this.userId = userId;
            this.repeat = repeat;
            this.mon = mon;
            this.monFrom = monFrom;
            this.monTo = monTo;
            this.monComments = monComments;
            this.monReason = monReason;
            this.tue = tue;
            this.tueFrom = tueFrom;
            this.tueTo = tueTo;
            this.tueComments = tueComments;
            this.tueReason = tueReason;
            this.wed = wed;
            this.wedFrom = wedFrom;
            this.wedTo = wedTo;
            this.wedComments = wedComments;
            this.wedReason = wedReason;
            this.thu = thu;
            this.thuFrom = thuFrom;
            this.thuTo = thuTo;
            this.thuComments = thuComments;
            this.thuReason = thuReason;
            this.fri = fri;
            this.friFrom = friFrom;
            this.friTo = friTo;
            this.friComments = friComments;
            this.friReason = friReason;
            this.sat = sat;
            this.satFrom = satFrom;
            this.satTo = satTo;
            this.satComments = satComments;
            this.satReason = satReason;
            this.sun = sun;
            this.sunFrom = sunFrom;
            this.sunTo = sunTo;
            this.sunComments = sunComments;
            this.sunReason = sunReason;
            this.companyId = companyId;
        }

        /**
         * Set week
         * @param week Week date of the availability (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder week(String week) {
            this.week = week;
            return this;
        }
        
        /**
         * Set weekTo
         * @param weekTo Week to date of the availability (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder weekTo(String weekTo) {
            this.weekTo = weekTo;
            return this;
        }
        
        /**
         * Build call for createNew
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Availability created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AvailabilityCreateNewRequest availabilityCreateNewRequest = buildBodyParams();
            return createNewCall(companyId, availabilityCreateNewRequest, _callback);
        }

        private AvailabilityCreateNewRequest buildBodyParams() {
            AvailabilityCreateNewRequest availabilityCreateNewRequest = new AvailabilityCreateNewRequest();
            availabilityCreateNewRequest.userId(this.userId);
            availabilityCreateNewRequest.week(this.week);
            availabilityCreateNewRequest.weekTo(this.weekTo);
            availabilityCreateNewRequest.repeat(this.repeat);
            availabilityCreateNewRequest.mon(this.mon);
            availabilityCreateNewRequest.monFrom(this.monFrom);
            availabilityCreateNewRequest.monTo(this.monTo);
            availabilityCreateNewRequest.monComments(this.monComments);
            availabilityCreateNewRequest.monReason(this.monReason);
            availabilityCreateNewRequest.tue(this.tue);
            availabilityCreateNewRequest.tueFrom(this.tueFrom);
            availabilityCreateNewRequest.tueTo(this.tueTo);
            availabilityCreateNewRequest.tueComments(this.tueComments);
            availabilityCreateNewRequest.tueReason(this.tueReason);
            availabilityCreateNewRequest.wed(this.wed);
            availabilityCreateNewRequest.wedFrom(this.wedFrom);
            availabilityCreateNewRequest.wedTo(this.wedTo);
            availabilityCreateNewRequest.wedComments(this.wedComments);
            availabilityCreateNewRequest.wedReason(this.wedReason);
            availabilityCreateNewRequest.thu(this.thu);
            availabilityCreateNewRequest.thuFrom(this.thuFrom);
            availabilityCreateNewRequest.thuTo(this.thuTo);
            availabilityCreateNewRequest.thuComments(this.thuComments);
            availabilityCreateNewRequest.thuReason(this.thuReason);
            availabilityCreateNewRequest.fri(this.fri);
            availabilityCreateNewRequest.friFrom(this.friFrom);
            availabilityCreateNewRequest.friTo(this.friTo);
            availabilityCreateNewRequest.friComments(this.friComments);
            availabilityCreateNewRequest.friReason(this.friReason);
            availabilityCreateNewRequest.sat(this.sat);
            availabilityCreateNewRequest.satFrom(this.satFrom);
            availabilityCreateNewRequest.satTo(this.satTo);
            availabilityCreateNewRequest.satComments(this.satComments);
            availabilityCreateNewRequest.satReason(this.satReason);
            availabilityCreateNewRequest.sun(this.sun);
            availabilityCreateNewRequest.sunFrom(this.sunFrom);
            availabilityCreateNewRequest.sunTo(this.sunTo);
            availabilityCreateNewRequest.sunComments(this.sunComments);
            availabilityCreateNewRequest.sunReason(this.sunReason);
            return availabilityCreateNewRequest;
        }

        /**
         * Execute createNew request
         * @return AvailabilityCreateNewResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Availability created </td><td>  -  </td></tr>
         </table>
         */
        public AvailabilityCreateNewResponse execute() throws ApiException {
            AvailabilityCreateNewRequest availabilityCreateNewRequest = buildBodyParams();
            ApiResponse<AvailabilityCreateNewResponse> localVarResp = createNewWithHttpInfo(companyId, availabilityCreateNewRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNew request with HTTP info returned
         * @return ApiResponse&lt;AvailabilityCreateNewResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Availability created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AvailabilityCreateNewResponse> executeWithHttpInfo() throws ApiException {
            AvailabilityCreateNewRequest availabilityCreateNewRequest = buildBodyParams();
            return createNewWithHttpInfo(companyId, availabilityCreateNewRequest);
        }

        /**
         * Execute createNew request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Availability created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AvailabilityCreateNewResponse> _callback) throws ApiException {
            AvailabilityCreateNewRequest availabilityCreateNewRequest = buildBodyParams();
            return createNewAsync(companyId, availabilityCreateNewRequest, _callback);
        }
    }

    /**
     * Create Availability
     * 
     * @param companyId Company ID (required)
     * @param availabilityCreateNewRequest  (required)
     * @return CreateNewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Availability created </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewRequestBuilder createNew(Integer userId, Boolean repeat, Integer mon, String monFrom, String monTo, String monComments, String monReason, Integer tue, String tueFrom, String tueTo, String tueComments, String tueReason, Integer wed, String wedFrom, String wedTo, String wedComments, String wedReason, Integer thu, String thuFrom, String thuTo, String thuComments, String thuReason, Integer fri, String friFrom, String friTo, String friComments, String friReason, Integer sat, String satFrom, String satTo, String satComments, String satReason, Integer sun, String sunFrom, String sunTo, String sunComments, String sunReason, Long companyId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        if (repeat == null) throw new IllegalArgumentException("\"repeat\" is required but got null");
        if (mon == null) throw new IllegalArgumentException("\"mon\" is required but got null");
        if (monFrom == null) throw new IllegalArgumentException("\"monFrom\" is required but got null");
            

        if (monTo == null) throw new IllegalArgumentException("\"monTo\" is required but got null");
            

        
            

        if (monReason == null) throw new IllegalArgumentException("\"monReason\" is required but got null");
            

        if (tue == null) throw new IllegalArgumentException("\"tue\" is required but got null");
        if (tueFrom == null) throw new IllegalArgumentException("\"tueFrom\" is required but got null");
            

        if (tueTo == null) throw new IllegalArgumentException("\"tueTo\" is required but got null");
            

        
            

        if (tueReason == null) throw new IllegalArgumentException("\"tueReason\" is required but got null");
            

        if (wed == null) throw new IllegalArgumentException("\"wed\" is required but got null");
        if (wedFrom == null) throw new IllegalArgumentException("\"wedFrom\" is required but got null");
            

        if (wedTo == null) throw new IllegalArgumentException("\"wedTo\" is required but got null");
            

        
            

        if (wedReason == null) throw new IllegalArgumentException("\"wedReason\" is required but got null");
            

        if (thu == null) throw new IllegalArgumentException("\"thu\" is required but got null");
        if (thuFrom == null) throw new IllegalArgumentException("\"thuFrom\" is required but got null");
            

        if (thuTo == null) throw new IllegalArgumentException("\"thuTo\" is required but got null");
            

        
            

        if (thuReason == null) throw new IllegalArgumentException("\"thuReason\" is required but got null");
            

        if (fri == null) throw new IllegalArgumentException("\"fri\" is required but got null");
        if (friFrom == null) throw new IllegalArgumentException("\"friFrom\" is required but got null");
            

        if (friTo == null) throw new IllegalArgumentException("\"friTo\" is required but got null");
            

        
            

        if (friReason == null) throw new IllegalArgumentException("\"friReason\" is required but got null");
            

        if (sat == null) throw new IllegalArgumentException("\"sat\" is required but got null");
        if (satFrom == null) throw new IllegalArgumentException("\"satFrom\" is required but got null");
            

        if (satTo == null) throw new IllegalArgumentException("\"satTo\" is required but got null");
            

        
            

        if (satReason == null) throw new IllegalArgumentException("\"satReason\" is required but got null");
            

        if (sun == null) throw new IllegalArgumentException("\"sun\" is required but got null");
        if (sunFrom == null) throw new IllegalArgumentException("\"sunFrom\" is required but got null");
            

        if (sunTo == null) throw new IllegalArgumentException("\"sunTo\" is required but got null");
            

        
            

        if (sunReason == null) throw new IllegalArgumentException("\"sunReason\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new CreateNewRequestBuilder(userId, repeat, mon, monFrom, monTo, monComments, monReason, tue, tueFrom, tueTo, tueComments, tueReason, wed, wedFrom, wedTo, wedComments, wedReason, thu, thuFrom, thuTo, thuComments, thuReason, fri, friFrom, friTo, friComments, friReason, sat, satFrom, satTo, satComments, satReason, sun, sunFrom, sunTo, sunComments, sunReason, companyId);
    }
    private okhttp3.Call createReasonCall(Long companyId, AvailabilityCreateReasonRequest availabilityCreateReasonRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = availabilityCreateReasonRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/availability_reasons"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReasonValidateBeforeCall(Long companyId, AvailabilityCreateReasonRequest availabilityCreateReasonRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createReason(Async)");
        }

        // verify the required parameter 'availabilityCreateReasonRequest' is set
        if (availabilityCreateReasonRequest == null) {
            throw new ApiException("Missing the required parameter 'availabilityCreateReasonRequest' when calling createReason(Async)");
        }

        return createReasonCall(companyId, availabilityCreateReasonRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<AvailabilityCreateReasonResponse> createReasonWithHttpInfo(Long companyId, AvailabilityCreateReasonRequest availabilityCreateReasonRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = createReasonValidateBeforeCall(companyId, availabilityCreateReasonRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<AvailabilityCreateReasonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createReasonAsync(Long companyId, AvailabilityCreateReasonRequest availabilityCreateReasonRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<AvailabilityCreateReasonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReasonValidateBeforeCall(companyId, availabilityCreateReasonRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<AvailabilityCreateReasonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateReasonRequestBuilder {
        private final String reason;
        private final Long companyId;
        private Boolean commentsRequired;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private CreateReasonRequestBuilder(String reason, Long companyId) {
            this.reason = reason;
            this.companyId = companyId;
        }

        /**
         * Set commentsRequired
         * @param commentsRequired Comments required (optional)
         * @return CreateReasonRequestBuilder
         */
        public CreateReasonRequestBuilder commentsRequired(Boolean commentsRequired) {
            this.commentsRequired = commentsRequired;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return CreateReasonRequestBuilder
         */
        public CreateReasonRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return CreateReasonRequestBuilder
         */
        public CreateReasonRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for createReason
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AvailabilityCreateReasonRequest availabilityCreateReasonRequest = buildBodyParams();
            return createReasonCall(companyId, availabilityCreateReasonRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private AvailabilityCreateReasonRequest buildBodyParams() {
            AvailabilityCreateReasonRequest availabilityCreateReasonRequest = new AvailabilityCreateReasonRequest();
            availabilityCreateReasonRequest.reason(this.reason);
            availabilityCreateReasonRequest.commentsRequired(this.commentsRequired);
            return availabilityCreateReasonRequest;
        }

        /**
         * Execute createReason request
         * @return AvailabilityCreateReasonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public AvailabilityCreateReasonResponse execute() throws ApiException {
            AvailabilityCreateReasonRequest availabilityCreateReasonRequest = buildBodyParams();
            ApiResponse<AvailabilityCreateReasonResponse> localVarResp = createReasonWithHttpInfo(companyId, availabilityCreateReasonRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createReason request with HTTP info returned
         * @return ApiResponse&lt;AvailabilityCreateReasonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AvailabilityCreateReasonResponse> executeWithHttpInfo() throws ApiException {
            AvailabilityCreateReasonRequest availabilityCreateReasonRequest = buildBodyParams();
            return createReasonWithHttpInfo(companyId, availabilityCreateReasonRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute createReason request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AvailabilityCreateReasonResponse> _callback) throws ApiException {
            AvailabilityCreateReasonRequest availabilityCreateReasonRequest = buildBodyParams();
            return createReasonAsync(companyId, availabilityCreateReasonRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Create Availability Reason
     * 
     * @param companyId Company ID (required)
     * @param availabilityCreateReasonRequest  (required)
     * @return CreateReasonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateReasonRequestBuilder createReason(String reason, Long companyId) throws IllegalArgumentException {
        if (reason == null) throw new IllegalArgumentException("\"reason\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new CreateReasonRequestBuilder(reason, companyId);
    }
    private okhttp3.Call deleteReasonCall(Long companyId, Long availabilityReasonId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/availability_reasons/{availability_reason_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "availability_reason_id" + "}", localVarApiClient.escapeString(availabilityReasonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteReasonValidateBeforeCall(Long companyId, Long availabilityReasonId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling deleteReason(Async)");
        }

        // verify the required parameter 'availabilityReasonId' is set
        if (availabilityReasonId == null) {
            throw new ApiException("Missing the required parameter 'availabilityReasonId' when calling deleteReason(Async)");
        }

        return deleteReasonCall(companyId, availabilityReasonId, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<Void> deleteReasonWithHttpInfo(Long companyId, Long availabilityReasonId, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = deleteReasonValidateBeforeCall(companyId, availabilityReasonId, xApiVersion, xCompanyGuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteReasonAsync(Long companyId, Long availabilityReasonId, String xApiVersion, UUID xCompanyGuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteReasonValidateBeforeCall(companyId, availabilityReasonId, xApiVersion, xCompanyGuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteReasonRequestBuilder {
        private final Long companyId;
        private final Long availabilityReasonId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private DeleteReasonRequestBuilder(Long companyId, Long availabilityReasonId) {
            this.companyId = companyId;
            this.availabilityReasonId = availabilityReasonId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return DeleteReasonRequestBuilder
         */
        public DeleteReasonRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return DeleteReasonRequestBuilder
         */
        public DeleteReasonRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for deleteReason
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteReasonCall(companyId, availabilityReasonId, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute deleteReason request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteReasonWithHttpInfo(companyId, availabilityReasonId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute deleteReason request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteReasonWithHttpInfo(companyId, availabilityReasonId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute deleteReason request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteReasonAsync(companyId, availabilityReasonId, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Delete Availability Reason
     * 
     * @param companyId Company ID (required)
     * @param availabilityReasonId Availability Reason ID (required)
     * @return DeleteReasonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteReasonRequestBuilder deleteReason(Long companyId, Long availabilityReasonId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (availabilityReasonId == null) throw new IllegalArgumentException("\"availabilityReasonId\" is required but got null");
        return new DeleteReasonRequestBuilder(companyId, availabilityReasonId);
    }
    private okhttp3.Call getByIdCall(Long companyId, Long availabilityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/availabilities/{availability_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "availability_id" + "}", localVarApiClient.escapeString(availabilityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(Long companyId, Long availabilityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getById(Async)");
        }

        // verify the required parameter 'availabilityId' is set
        if (availabilityId == null) {
            throw new ApiException("Missing the required parameter 'availabilityId' when calling getById(Async)");
        }

        return getByIdCall(companyId, availabilityId, _callback);

    }


    private ApiResponse<AvailabilityGetByIdResponse> getByIdWithHttpInfo(Long companyId, Long availabilityId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(companyId, availabilityId, null);
        Type localVarReturnType = new TypeToken<AvailabilityGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(Long companyId, Long availabilityId, final ApiCallback<AvailabilityGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(companyId, availabilityId, _callback);
        Type localVarReturnType = new TypeToken<AvailabilityGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final Long companyId;
        private final Long availabilityId;

        private GetByIdRequestBuilder(Long companyId, Long availabilityId) {
            this.companyId = companyId;
            this.availabilityId = availabilityId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(companyId, availabilityId, _callback);
        }


        /**
         * Execute getById request
         * @return AvailabilityGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AvailabilityGetByIdResponse execute() throws ApiException {
            ApiResponse<AvailabilityGetByIdResponse> localVarResp = getByIdWithHttpInfo(companyId, availabilityId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;AvailabilityGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AvailabilityGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(companyId, availabilityId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AvailabilityGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(companyId, availabilityId, _callback);
        }
    }

    /**
     * Retrieve Availability
     * 
     * @param companyId Company ID (required)
     * @param availabilityId Availability ID (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(Long companyId, Long availabilityId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (availabilityId == null) throw new IllegalArgumentException("\"availabilityId\" is required but got null");
        return new GetByIdRequestBuilder(companyId, availabilityId);
    }
    private okhttp3.Call listAvailabilitiesCall(Long companyId, String cursor, Long limit, Long locationId, Long userId, Long status, Boolean repeating, String weekGte, String weekToIncludeRepeatingGte, String orderField, String orderDir, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/availabilities"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (repeating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("repeating", repeating));
        }

        if (weekGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("week_gte", weekGte));
        }

        if (weekToIncludeRepeatingGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("week_to_include_repeating_gte", weekToIncludeRepeatingGte));
        }

        if (orderField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_field", orderField));
        }

        if (orderDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_dir", orderDir));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAvailabilitiesValidateBeforeCall(Long companyId, String cursor, Long limit, Long locationId, Long userId, Long status, Boolean repeating, String weekGte, String weekToIncludeRepeatingGte, String orderField, String orderDir, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling listAvailabilities(Async)");
        }

        return listAvailabilitiesCall(companyId, cursor, limit, locationId, userId, status, repeating, weekGte, weekToIncludeRepeatingGte, orderField, orderDir, _callback);

    }


    private ApiResponse<AvailabilityListAvailabilitiesResponse> listAvailabilitiesWithHttpInfo(Long companyId, String cursor, Long limit, Long locationId, Long userId, Long status, Boolean repeating, String weekGte, String weekToIncludeRepeatingGte, String orderField, String orderDir) throws ApiException {
        okhttp3.Call localVarCall = listAvailabilitiesValidateBeforeCall(companyId, cursor, limit, locationId, userId, status, repeating, weekGte, weekToIncludeRepeatingGte, orderField, orderDir, null);
        Type localVarReturnType = new TypeToken<AvailabilityListAvailabilitiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAvailabilitiesAsync(Long companyId, String cursor, Long limit, Long locationId, Long userId, Long status, Boolean repeating, String weekGte, String weekToIncludeRepeatingGte, String orderField, String orderDir, final ApiCallback<AvailabilityListAvailabilitiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAvailabilitiesValidateBeforeCall(companyId, cursor, limit, locationId, userId, status, repeating, weekGte, weekToIncludeRepeatingGte, orderField, orderDir, _callback);
        Type localVarReturnType = new TypeToken<AvailabilityListAvailabilitiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAvailabilitiesRequestBuilder {
        private final Long companyId;
        private String cursor;
        private Long limit;
        private Long locationId;
        private Long userId;
        private Long status;
        private Boolean repeating;
        private String weekGte;
        private String weekToIncludeRepeatingGte;
        private String orderField;
        private String orderDir;

        private ListAvailabilitiesRequestBuilder(Long companyId) {
            this.companyId = companyId;
        }

        /**
         * Set cursor
         * @param cursor Cursor for the next or previous page of results. (optional)
         * @return ListAvailabilitiesRequestBuilder
         */
        public ListAvailabilitiesRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The number results desired per page. (optional, default to 100)
         * @return ListAvailabilitiesRequestBuilder
         */
        public ListAvailabilitiesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set locationId
         * @param locationId Location ID (optional)
         * @return ListAvailabilitiesRequestBuilder
         */
        public ListAvailabilitiesRequestBuilder locationId(Long locationId) {
            this.locationId = locationId;
            return this;
        }
        
        /**
         * Set userId
         * @param userId User ID (optional)
         * @return ListAvailabilitiesRequestBuilder
         */
        public ListAvailabilitiesRequestBuilder userId(Long userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set status
         * @param status Return availabilities for a specified status (pending &#x3D; 0, approved &#x3D; 1, declined &#x3D; 2). (optional)
         * @return ListAvailabilitiesRequestBuilder
         */
        public ListAvailabilitiesRequestBuilder status(Long status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set repeating
         * @param repeating Return repeating or weekly availabilities. (optional)
         * @return ListAvailabilitiesRequestBuilder
         */
        public ListAvailabilitiesRequestBuilder repeating(Boolean repeating) {
            this.repeating = repeating;
            return this;
        }
        
        /**
         * Set weekGte
         * @param weekGte Return availabilities for a specific week. (optional)
         * @return ListAvailabilitiesRequestBuilder
         */
        public ListAvailabilitiesRequestBuilder weekGte(String weekGte) {
            this.weekGte = weekGte;
            return this;
        }
        
        /**
         * Set weekToIncludeRepeatingGte
         * @param weekToIncludeRepeatingGte Return repeating availabilities that end before or on a specified week. (optional)
         * @return ListAvailabilitiesRequestBuilder
         */
        public ListAvailabilitiesRequestBuilder weekToIncludeRepeatingGte(String weekToIncludeRepeatingGte) {
            this.weekToIncludeRepeatingGte = weekToIncludeRepeatingGte;
            return this;
        }
        
        /**
         * Set orderField
         * @param orderField The field that availabilities will be sorted by. (optional)
         * @return ListAvailabilitiesRequestBuilder
         */
        public ListAvailabilitiesRequestBuilder orderField(String orderField) {
            this.orderField = orderField;
            return this;
        }
        
        /**
         * Set orderDir
         * @param orderDir The direction that availabilities will be sorted by. (optional)
         * @return ListAvailabilitiesRequestBuilder
         */
        public ListAvailabilitiesRequestBuilder orderDir(String orderDir) {
            this.orderDir = orderDir;
            return this;
        }
        
        /**
         * Build call for listAvailabilities
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAvailabilitiesCall(companyId, cursor, limit, locationId, userId, status, repeating, weekGte, weekToIncludeRepeatingGte, orderField, orderDir, _callback);
        }


        /**
         * Execute listAvailabilities request
         * @return AvailabilityListAvailabilitiesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AvailabilityListAvailabilitiesResponse execute() throws ApiException {
            ApiResponse<AvailabilityListAvailabilitiesResponse> localVarResp = listAvailabilitiesWithHttpInfo(companyId, cursor, limit, locationId, userId, status, repeating, weekGte, weekToIncludeRepeatingGte, orderField, orderDir);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAvailabilities request with HTTP info returned
         * @return ApiResponse&lt;AvailabilityListAvailabilitiesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AvailabilityListAvailabilitiesResponse> executeWithHttpInfo() throws ApiException {
            return listAvailabilitiesWithHttpInfo(companyId, cursor, limit, locationId, userId, status, repeating, weekGte, weekToIncludeRepeatingGte, orderField, orderDir);
        }

        /**
         * Execute listAvailabilities request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AvailabilityListAvailabilitiesResponse> _callback) throws ApiException {
            return listAvailabilitiesAsync(companyId, cursor, limit, locationId, userId, status, repeating, weekGte, weekToIncludeRepeatingGte, orderField, orderDir, _callback);
        }
    }

    /**
     * List Availabilities
     * 
     * @param companyId Company ID (required)
     * @return ListAvailabilitiesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListAvailabilitiesRequestBuilder listAvailabilities(Long companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new ListAvailabilitiesRequestBuilder(companyId);
    }
    private okhttp3.Call listReasonsCall(Long companyId, String xApiVersion, UUID xCompanyGuid, String cursor, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/availability_reasons"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listReasonsValidateBeforeCall(Long companyId, String xApiVersion, UUID xCompanyGuid, String cursor, Long limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling listReasons(Async)");
        }

        return listReasonsCall(companyId, xApiVersion, xCompanyGuid, cursor, limit, _callback);

    }


    private ApiResponse<AvailabilityListReasonsResponse> listReasonsWithHttpInfo(Long companyId, String xApiVersion, UUID xCompanyGuid, String cursor, Long limit) throws ApiException {
        okhttp3.Call localVarCall = listReasonsValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, cursor, limit, null);
        Type localVarReturnType = new TypeToken<AvailabilityListReasonsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listReasonsAsync(Long companyId, String xApiVersion, UUID xCompanyGuid, String cursor, Long limit, final ApiCallback<AvailabilityListReasonsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listReasonsValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<AvailabilityListReasonsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListReasonsRequestBuilder {
        private final Long companyId;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private String cursor;
        private Long limit;

        private ListReasonsRequestBuilder(Long companyId) {
            this.companyId = companyId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return ListReasonsRequestBuilder
         */
        public ListReasonsRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return ListReasonsRequestBuilder
         */
        public ListReasonsRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Cursor for the next or previous page of results. (optional)
         * @return ListReasonsRequestBuilder
         */
        public ListReasonsRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The number results desired per page. (optional, default to 100)
         * @return ListReasonsRequestBuilder
         */
        public ListReasonsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listReasons
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listReasonsCall(companyId, xApiVersion, xCompanyGuid, cursor, limit, _callback);
        }


        /**
         * Execute listReasons request
         * @return AvailabilityListReasonsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AvailabilityListReasonsResponse execute() throws ApiException {
            ApiResponse<AvailabilityListReasonsResponse> localVarResp = listReasonsWithHttpInfo(companyId, xApiVersion, xCompanyGuid, cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listReasons request with HTTP info returned
         * @return ApiResponse&lt;AvailabilityListReasonsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AvailabilityListReasonsResponse> executeWithHttpInfo() throws ApiException {
            return listReasonsWithHttpInfo(companyId, xApiVersion, xCompanyGuid, cursor, limit);
        }

        /**
         * Execute listReasons request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AvailabilityListReasonsResponse> _callback) throws ApiException {
            return listReasonsAsync(companyId, xApiVersion, xCompanyGuid, cursor, limit, _callback);
        }
    }

    /**
     * List Availability Reasons
     * 
     * @param companyId Company ID (required)
     * @return ListReasonsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListReasonsRequestBuilder listReasons(Long companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new ListReasonsRequestBuilder(companyId);
    }
    private okhttp3.Call removeByIdCall(Long companyId, Long availabilityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/availabilities/{availability_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "availability_id" + "}", localVarApiClient.escapeString(availabilityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(Long companyId, Long availabilityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling removeById(Async)");
        }

        // verify the required parameter 'availabilityId' is set
        if (availabilityId == null) {
            throw new ApiException("Missing the required parameter 'availabilityId' when calling removeById(Async)");
        }

        return removeByIdCall(companyId, availabilityId, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(Long companyId, Long availabilityId) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(companyId, availabilityId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(Long companyId, Long availabilityId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(companyId, availabilityId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final Long companyId;
        private final Long availabilityId;

        private RemoveByIdRequestBuilder(Long companyId, Long availabilityId) {
            this.companyId = companyId;
            this.availabilityId = availabilityId;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(companyId, availabilityId, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(companyId, availabilityId);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(companyId, availabilityId);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(companyId, availabilityId, _callback);
        }
    }

    /**
     * Delete Availability
     * 
     * @param companyId Company ID (required)
     * @param availabilityId Availability ID (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(Long companyId, Long availabilityId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (availabilityId == null) throw new IllegalArgumentException("\"availabilityId\" is required but got null");
        return new RemoveByIdRequestBuilder(companyId, availabilityId);
    }
    private okhttp3.Call updateByIdCall(Long companyId, Long availabilityId, AvailabilityUpdateByIdRequest availabilityUpdateByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = availabilityUpdateByIdRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/availabilities/{availability_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "availability_id" + "}", localVarApiClient.escapeString(availabilityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(Long companyId, Long availabilityId, AvailabilityUpdateByIdRequest availabilityUpdateByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updateById(Async)");
        }

        // verify the required parameter 'availabilityId' is set
        if (availabilityId == null) {
            throw new ApiException("Missing the required parameter 'availabilityId' when calling updateById(Async)");
        }

        // verify the required parameter 'availabilityUpdateByIdRequest' is set
        if (availabilityUpdateByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'availabilityUpdateByIdRequest' when calling updateById(Async)");
        }

        return updateByIdCall(companyId, availabilityId, availabilityUpdateByIdRequest, _callback);

    }


    private ApiResponse<AvailabilityUpdateByIdResponse> updateByIdWithHttpInfo(Long companyId, Long availabilityId, AvailabilityUpdateByIdRequest availabilityUpdateByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(companyId, availabilityId, availabilityUpdateByIdRequest, null);
        Type localVarReturnType = new TypeToken<AvailabilityUpdateByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByIdAsync(Long companyId, Long availabilityId, AvailabilityUpdateByIdRequest availabilityUpdateByIdRequest, final ApiCallback<AvailabilityUpdateByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(companyId, availabilityId, availabilityUpdateByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<AvailabilityUpdateByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final Long companyId;
        private final Long availabilityId;
        private String week;
        private String weekTo;
        private Boolean repeat;
        private Integer mon;
        private String monFrom;
        private String monTo;
        private String monComments;
        private String monReason;
        private Integer tue;
        private String tueFrom;
        private String tueTo;
        private String tueComments;
        private String tueReason;
        private Integer wed;
        private String wedFrom;
        private String wedTo;
        private String wedComments;
        private String wedReason;
        private Integer thu;
        private String thuFrom;
        private String thuTo;
        private String thuComments;
        private String thuReason;
        private Integer fri;
        private String friFrom;
        private String friTo;
        private String friComments;
        private String friReason;
        private Integer sat;
        private String satFrom;
        private String satTo;
        private String satComments;
        private String satReason;
        private Integer sun;
        private String sunFrom;
        private String sunTo;
        private String sunComments;
        private String sunReason;

        private UpdateByIdRequestBuilder(Long companyId, Long availabilityId) {
            this.companyId = companyId;
            this.availabilityId = availabilityId;
        }

        /**
         * Set week
         * @param week Week date of the availability (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder week(String week) {
            this.week = week;
            return this;
        }
        
        /**
         * Set weekTo
         * @param weekTo Week to date of the availability (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder weekTo(String weekTo) {
            this.weekTo = weekTo;
            return this;
        }
        
        /**
         * Set repeat
         * @param repeat If true, availability is repeating (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder repeat(Boolean repeat) {
            this.repeat = repeat;
            return this;
        }
        
        /**
         * Set mon
         * @param mon The availability status for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder mon(Integer mon) {
            this.mon = mon;
            return this;
        }
        
        /**
         * Set monFrom
         * @param monFrom The start time of the availability for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder monFrom(String monFrom) {
            this.monFrom = monFrom;
            return this;
        }
        
        /**
         * Set monTo
         * @param monTo The end time of the availability for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder monTo(String monTo) {
            this.monTo = monTo;
            return this;
        }
        
        /**
         * Set monComments
         * @param monComments Comments included in the days availability (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder monComments(String monComments) {
            this.monComments = monComments;
            return this;
        }
        
        /**
         * Set monReason
         * @param monReason The reason ID for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder monReason(String monReason) {
            this.monReason = monReason;
            return this;
        }
        
        /**
         * Set tue
         * @param tue The availability status for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder tue(Integer tue) {
            this.tue = tue;
            return this;
        }
        
        /**
         * Set tueFrom
         * @param tueFrom The start time of the availability for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder tueFrom(String tueFrom) {
            this.tueFrom = tueFrom;
            return this;
        }
        
        /**
         * Set tueTo
         * @param tueTo The end time of the availability for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder tueTo(String tueTo) {
            this.tueTo = tueTo;
            return this;
        }
        
        /**
         * Set tueComments
         * @param tueComments Comments included in the days availability (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder tueComments(String tueComments) {
            this.tueComments = tueComments;
            return this;
        }
        
        /**
         * Set tueReason
         * @param tueReason The reason ID for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder tueReason(String tueReason) {
            this.tueReason = tueReason;
            return this;
        }
        
        /**
         * Set wed
         * @param wed The availability status for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder wed(Integer wed) {
            this.wed = wed;
            return this;
        }
        
        /**
         * Set wedFrom
         * @param wedFrom The start time of the availability for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder wedFrom(String wedFrom) {
            this.wedFrom = wedFrom;
            return this;
        }
        
        /**
         * Set wedTo
         * @param wedTo The end time of the availability for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder wedTo(String wedTo) {
            this.wedTo = wedTo;
            return this;
        }
        
        /**
         * Set wedComments
         * @param wedComments Comments included in the days availability (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder wedComments(String wedComments) {
            this.wedComments = wedComments;
            return this;
        }
        
        /**
         * Set wedReason
         * @param wedReason The reason ID for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder wedReason(String wedReason) {
            this.wedReason = wedReason;
            return this;
        }
        
        /**
         * Set thu
         * @param thu The availability status for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder thu(Integer thu) {
            this.thu = thu;
            return this;
        }
        
        /**
         * Set thuFrom
         * @param thuFrom The start time of the availability for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder thuFrom(String thuFrom) {
            this.thuFrom = thuFrom;
            return this;
        }
        
        /**
         * Set thuTo
         * @param thuTo The end time of the availability for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder thuTo(String thuTo) {
            this.thuTo = thuTo;
            return this;
        }
        
        /**
         * Set thuComments
         * @param thuComments Comments included in the days availability (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder thuComments(String thuComments) {
            this.thuComments = thuComments;
            return this;
        }
        
        /**
         * Set thuReason
         * @param thuReason The reason ID for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder thuReason(String thuReason) {
            this.thuReason = thuReason;
            return this;
        }
        
        /**
         * Set fri
         * @param fri The availability status for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder fri(Integer fri) {
            this.fri = fri;
            return this;
        }
        
        /**
         * Set friFrom
         * @param friFrom The start time of the availability for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder friFrom(String friFrom) {
            this.friFrom = friFrom;
            return this;
        }
        
        /**
         * Set friTo
         * @param friTo The end time of the availability for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder friTo(String friTo) {
            this.friTo = friTo;
            return this;
        }
        
        /**
         * Set friComments
         * @param friComments Comments included in the days availability (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder friComments(String friComments) {
            this.friComments = friComments;
            return this;
        }
        
        /**
         * Set friReason
         * @param friReason The reason ID for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder friReason(String friReason) {
            this.friReason = friReason;
            return this;
        }
        
        /**
         * Set sat
         * @param sat The availability status for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder sat(Integer sat) {
            this.sat = sat;
            return this;
        }
        
        /**
         * Set satFrom
         * @param satFrom The start time of the availability for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder satFrom(String satFrom) {
            this.satFrom = satFrom;
            return this;
        }
        
        /**
         * Set satTo
         * @param satTo The end time of the availability for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder satTo(String satTo) {
            this.satTo = satTo;
            return this;
        }
        
        /**
         * Set satComments
         * @param satComments Comments included in the days availability (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder satComments(String satComments) {
            this.satComments = satComments;
            return this;
        }
        
        /**
         * Set satReason
         * @param satReason The reason ID for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder satReason(String satReason) {
            this.satReason = satReason;
            return this;
        }
        
        /**
         * Set sun
         * @param sun The availability status for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder sun(Integer sun) {
            this.sun = sun;
            return this;
        }
        
        /**
         * Set sunFrom
         * @param sunFrom The start time of the availability for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder sunFrom(String sunFrom) {
            this.sunFrom = sunFrom;
            return this;
        }
        
        /**
         * Set sunTo
         * @param sunTo The end time of the availability for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder sunTo(String sunTo) {
            this.sunTo = sunTo;
            return this;
        }
        
        /**
         * Set sunComments
         * @param sunComments Comments included in the days availability (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder sunComments(String sunComments) {
            this.sunComments = sunComments;
            return this;
        }
        
        /**
         * Set sunReason
         * @param sunReason The reason ID for the day (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder sunReason(String sunReason) {
            this.sunReason = sunReason;
            return this;
        }
        
        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AvailabilityUpdateByIdRequest availabilityUpdateByIdRequest = buildBodyParams();
            return updateByIdCall(companyId, availabilityId, availabilityUpdateByIdRequest, _callback);
        }

        private AvailabilityUpdateByIdRequest buildBodyParams() {
            AvailabilityUpdateByIdRequest availabilityUpdateByIdRequest = new AvailabilityUpdateByIdRequest();
            availabilityUpdateByIdRequest.week(this.week);
            availabilityUpdateByIdRequest.weekTo(this.weekTo);
            availabilityUpdateByIdRequest.repeat(this.repeat);
            availabilityUpdateByIdRequest.mon(this.mon);
            availabilityUpdateByIdRequest.monFrom(this.monFrom);
            availabilityUpdateByIdRequest.monTo(this.monTo);
            availabilityUpdateByIdRequest.monComments(this.monComments);
            availabilityUpdateByIdRequest.monReason(this.monReason);
            availabilityUpdateByIdRequest.tue(this.tue);
            availabilityUpdateByIdRequest.tueFrom(this.tueFrom);
            availabilityUpdateByIdRequest.tueTo(this.tueTo);
            availabilityUpdateByIdRequest.tueComments(this.tueComments);
            availabilityUpdateByIdRequest.tueReason(this.tueReason);
            availabilityUpdateByIdRequest.wed(this.wed);
            availabilityUpdateByIdRequest.wedFrom(this.wedFrom);
            availabilityUpdateByIdRequest.wedTo(this.wedTo);
            availabilityUpdateByIdRequest.wedComments(this.wedComments);
            availabilityUpdateByIdRequest.wedReason(this.wedReason);
            availabilityUpdateByIdRequest.thu(this.thu);
            availabilityUpdateByIdRequest.thuFrom(this.thuFrom);
            availabilityUpdateByIdRequest.thuTo(this.thuTo);
            availabilityUpdateByIdRequest.thuComments(this.thuComments);
            availabilityUpdateByIdRequest.thuReason(this.thuReason);
            availabilityUpdateByIdRequest.fri(this.fri);
            availabilityUpdateByIdRequest.friFrom(this.friFrom);
            availabilityUpdateByIdRequest.friTo(this.friTo);
            availabilityUpdateByIdRequest.friComments(this.friComments);
            availabilityUpdateByIdRequest.friReason(this.friReason);
            availabilityUpdateByIdRequest.sat(this.sat);
            availabilityUpdateByIdRequest.satFrom(this.satFrom);
            availabilityUpdateByIdRequest.satTo(this.satTo);
            availabilityUpdateByIdRequest.satComments(this.satComments);
            availabilityUpdateByIdRequest.satReason(this.satReason);
            availabilityUpdateByIdRequest.sun(this.sun);
            availabilityUpdateByIdRequest.sunFrom(this.sunFrom);
            availabilityUpdateByIdRequest.sunTo(this.sunTo);
            availabilityUpdateByIdRequest.sunComments(this.sunComments);
            availabilityUpdateByIdRequest.sunReason(this.sunReason);
            return availabilityUpdateByIdRequest;
        }

        /**
         * Execute updateById request
         * @return AvailabilityUpdateByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public AvailabilityUpdateByIdResponse execute() throws ApiException {
            AvailabilityUpdateByIdRequest availabilityUpdateByIdRequest = buildBodyParams();
            ApiResponse<AvailabilityUpdateByIdResponse> localVarResp = updateByIdWithHttpInfo(companyId, availabilityId, availabilityUpdateByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;AvailabilityUpdateByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AvailabilityUpdateByIdResponse> executeWithHttpInfo() throws ApiException {
            AvailabilityUpdateByIdRequest availabilityUpdateByIdRequest = buildBodyParams();
            return updateByIdWithHttpInfo(companyId, availabilityId, availabilityUpdateByIdRequest);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AvailabilityUpdateByIdResponse> _callback) throws ApiException {
            AvailabilityUpdateByIdRequest availabilityUpdateByIdRequest = buildBodyParams();
            return updateByIdAsync(companyId, availabilityId, availabilityUpdateByIdRequest, _callback);
        }
    }

    /**
     * Update Availability
     * 
     * @param companyId Company ID (required)
     * @param availabilityId Availability ID (required)
     * @param availabilityUpdateByIdRequest  (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(Long companyId, Long availabilityId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (availabilityId == null) throw new IllegalArgumentException("\"availabilityId\" is required but got null");
        return new UpdateByIdRequestBuilder(companyId, availabilityId);
    }
    private okhttp3.Call updateReasonByIdCall(Long companyId, Long availabilityReasonId, AvailabilityUpdateReasonByIdRequest availabilityUpdateReasonByIdRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = availabilityUpdateReasonByIdRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/availability_reasons/{availability_reason_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "availability_reason_id" + "}", localVarApiClient.escapeString(availabilityReasonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateReasonByIdValidateBeforeCall(Long companyId, Long availabilityReasonId, AvailabilityUpdateReasonByIdRequest availabilityUpdateReasonByIdRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updateReasonById(Async)");
        }

        // verify the required parameter 'availabilityReasonId' is set
        if (availabilityReasonId == null) {
            throw new ApiException("Missing the required parameter 'availabilityReasonId' when calling updateReasonById(Async)");
        }

        // verify the required parameter 'availabilityUpdateReasonByIdRequest' is set
        if (availabilityUpdateReasonByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'availabilityUpdateReasonByIdRequest' when calling updateReasonById(Async)");
        }

        return updateReasonByIdCall(companyId, availabilityReasonId, availabilityUpdateReasonByIdRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<AvailabilityUpdateReasonByIdResponse> updateReasonByIdWithHttpInfo(Long companyId, Long availabilityReasonId, AvailabilityUpdateReasonByIdRequest availabilityUpdateReasonByIdRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = updateReasonByIdValidateBeforeCall(companyId, availabilityReasonId, availabilityUpdateReasonByIdRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<AvailabilityUpdateReasonByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateReasonByIdAsync(Long companyId, Long availabilityReasonId, AvailabilityUpdateReasonByIdRequest availabilityUpdateReasonByIdRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<AvailabilityUpdateReasonByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateReasonByIdValidateBeforeCall(companyId, availabilityReasonId, availabilityUpdateReasonByIdRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<AvailabilityUpdateReasonByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateReasonByIdRequestBuilder {
        private final String reason;
        private final Long companyId;
        private final Long availabilityReasonId;
        private Boolean commentsRequired;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private UpdateReasonByIdRequestBuilder(String reason, Long companyId, Long availabilityReasonId) {
            this.reason = reason;
            this.companyId = companyId;
            this.availabilityReasonId = availabilityReasonId;
        }

        /**
         * Set commentsRequired
         * @param commentsRequired Comments required (optional)
         * @return UpdateReasonByIdRequestBuilder
         */
        public UpdateReasonByIdRequestBuilder commentsRequired(Boolean commentsRequired) {
            this.commentsRequired = commentsRequired;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return UpdateReasonByIdRequestBuilder
         */
        public UpdateReasonByIdRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return UpdateReasonByIdRequestBuilder
         */
        public UpdateReasonByIdRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for updateReasonById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AvailabilityUpdateReasonByIdRequest availabilityUpdateReasonByIdRequest = buildBodyParams();
            return updateReasonByIdCall(companyId, availabilityReasonId, availabilityUpdateReasonByIdRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private AvailabilityUpdateReasonByIdRequest buildBodyParams() {
            AvailabilityUpdateReasonByIdRequest availabilityUpdateReasonByIdRequest = new AvailabilityUpdateReasonByIdRequest();
            availabilityUpdateReasonByIdRequest.reason(this.reason);
            availabilityUpdateReasonByIdRequest.commentsRequired(this.commentsRequired);
            return availabilityUpdateReasonByIdRequest;
        }

        /**
         * Execute updateReasonById request
         * @return AvailabilityUpdateReasonByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AvailabilityUpdateReasonByIdResponse execute() throws ApiException {
            AvailabilityUpdateReasonByIdRequest availabilityUpdateReasonByIdRequest = buildBodyParams();
            ApiResponse<AvailabilityUpdateReasonByIdResponse> localVarResp = updateReasonByIdWithHttpInfo(companyId, availabilityReasonId, availabilityUpdateReasonByIdRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateReasonById request with HTTP info returned
         * @return ApiResponse&lt;AvailabilityUpdateReasonByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AvailabilityUpdateReasonByIdResponse> executeWithHttpInfo() throws ApiException {
            AvailabilityUpdateReasonByIdRequest availabilityUpdateReasonByIdRequest = buildBodyParams();
            return updateReasonByIdWithHttpInfo(companyId, availabilityReasonId, availabilityUpdateReasonByIdRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute updateReasonById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AvailabilityUpdateReasonByIdResponse> _callback) throws ApiException {
            AvailabilityUpdateReasonByIdRequest availabilityUpdateReasonByIdRequest = buildBodyParams();
            return updateReasonByIdAsync(companyId, availabilityReasonId, availabilityUpdateReasonByIdRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Update Availability Reason
     * 
     * @param companyId Company ID (required)
     * @param availabilityReasonId Availability Reason ID (required)
     * @param availabilityUpdateReasonByIdRequest  (required)
     * @return UpdateReasonByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateReasonByIdRequestBuilder updateReasonById(String reason, Long companyId, Long availabilityReasonId) throws IllegalArgumentException {
        if (reason == null) throw new IllegalArgumentException("\"reason\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (availabilityReasonId == null) throw new IllegalArgumentException("\"availabilityReasonId\" is required but got null");
        return new UpdateReasonByIdRequestBuilder(reason, companyId, availabilityReasonId);
    }
    private okhttp3.Call updateStatusCall(Long companyId, Long availabilityId, AvailabilityUpdateStatusRequest availabilityUpdateStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = availabilityUpdateStatusRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/availabilities/{availability_id}/status"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "availability_id" + "}", localVarApiClient.escapeString(availabilityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStatusValidateBeforeCall(Long companyId, Long availabilityId, AvailabilityUpdateStatusRequest availabilityUpdateStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updateStatus(Async)");
        }

        // verify the required parameter 'availabilityId' is set
        if (availabilityId == null) {
            throw new ApiException("Missing the required parameter 'availabilityId' when calling updateStatus(Async)");
        }

        return updateStatusCall(companyId, availabilityId, availabilityUpdateStatusRequest, _callback);

    }


    private ApiResponse<Void> updateStatusWithHttpInfo(Long companyId, Long availabilityId, AvailabilityUpdateStatusRequest availabilityUpdateStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = updateStatusValidateBeforeCall(companyId, availabilityId, availabilityUpdateStatusRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateStatusAsync(Long companyId, Long availabilityId, AvailabilityUpdateStatusRequest availabilityUpdateStatusRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStatusValidateBeforeCall(companyId, availabilityId, availabilityUpdateStatusRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateStatusRequestBuilder {
        private final String status;
        private final Long companyId;
        private final Long availabilityId;
        private String message;

        private UpdateStatusRequestBuilder(String status, Long companyId, Long availabilityId) {
            this.status = status;
            this.companyId = companyId;
            this.availabilityId = availabilityId;
        }

        /**
         * Set message
         * @param message  (optional)
         * @return UpdateStatusRequestBuilder
         */
        public UpdateStatusRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Build call for updateStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AvailabilityUpdateStatusRequest availabilityUpdateStatusRequest = buildBodyParams();
            return updateStatusCall(companyId, availabilityId, availabilityUpdateStatusRequest, _callback);
        }

        private AvailabilityUpdateStatusRequest buildBodyParams() {
            AvailabilityUpdateStatusRequest availabilityUpdateStatusRequest = new AvailabilityUpdateStatusRequest();
            if (this.status != null)
            availabilityUpdateStatusRequest.status(AvailabilityUpdateStatusRequest.StatusEnum.fromValue(this.status));
            availabilityUpdateStatusRequest.message(this.message);
            return availabilityUpdateStatusRequest;
        }

        /**
         * Execute updateStatus request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            AvailabilityUpdateStatusRequest availabilityUpdateStatusRequest = buildBodyParams();
            updateStatusWithHttpInfo(companyId, availabilityId, availabilityUpdateStatusRequest);
        }

        /**
         * Execute updateStatus request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            AvailabilityUpdateStatusRequest availabilityUpdateStatusRequest = buildBodyParams();
            return updateStatusWithHttpInfo(companyId, availabilityId, availabilityUpdateStatusRequest);
        }

        /**
         * Execute updateStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            AvailabilityUpdateStatusRequest availabilityUpdateStatusRequest = buildBodyParams();
            return updateStatusAsync(companyId, availabilityId, availabilityUpdateStatusRequest, _callback);
        }
    }

    /**
     * Update Availability Status
     * 
     * @param companyId Company ID (required)
     * @param availabilityId Availability ID (required)
     * @return UpdateStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStatusRequestBuilder updateStatus(String status, Long companyId, Long availabilityId) throws IllegalArgumentException {
        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (availabilityId == null) throw new IllegalArgumentException("\"availabilityId\" is required but got null");
        return new UpdateStatusRequestBuilder(status, companyId, availabilityId);
    }
}
