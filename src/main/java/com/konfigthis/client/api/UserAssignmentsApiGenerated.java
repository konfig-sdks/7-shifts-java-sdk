/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.util.UUID;
import com.konfigthis.client.model.UserAssignmentsCreateDepartmentAssignmentRequest;
import com.konfigthis.client.model.UserAssignmentsCreateDepartmentAssignmentResponse;
import com.konfigthis.client.model.UserAssignmentsCreateLocationAssignmentRequest;
import com.konfigthis.client.model.UserAssignmentsCreateLocationAssignmentResponse;
import com.konfigthis.client.model.UserAssignmentsCreateRoleAssignmentRequest;
import com.konfigthis.client.model.UserAssignmentsCreateRoleAssignmentResponse;
import com.konfigthis.client.model.UserAssignmentsListDepartmentAssignmentsResponse;
import com.konfigthis.client.model.UserAssignmentsListLocationAssignmentsResponse;
import com.konfigthis.client.model.UserAssignmentsListResponse;
import com.konfigthis.client.model.UserAssignmentsListRoleAssignmentsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UserAssignmentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserAssignmentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UserAssignmentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createDepartmentAssignmentCall(Long companyId, Long userId, UserAssignmentsCreateDepartmentAssignmentRequest userAssignmentsCreateDepartmentAssignmentRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userAssignmentsCreateDepartmentAssignmentRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/users/{user_id}/department_assignments"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDepartmentAssignmentValidateBeforeCall(Long companyId, Long userId, UserAssignmentsCreateDepartmentAssignmentRequest userAssignmentsCreateDepartmentAssignmentRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createDepartmentAssignment(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createDepartmentAssignment(Async)");
        }

        // verify the required parameter 'userAssignmentsCreateDepartmentAssignmentRequest' is set
        if (userAssignmentsCreateDepartmentAssignmentRequest == null) {
            throw new ApiException("Missing the required parameter 'userAssignmentsCreateDepartmentAssignmentRequest' when calling createDepartmentAssignment(Async)");
        }

        return createDepartmentAssignmentCall(companyId, userId, userAssignmentsCreateDepartmentAssignmentRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<UserAssignmentsCreateDepartmentAssignmentResponse> createDepartmentAssignmentWithHttpInfo(Long companyId, Long userId, UserAssignmentsCreateDepartmentAssignmentRequest userAssignmentsCreateDepartmentAssignmentRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = createDepartmentAssignmentValidateBeforeCall(companyId, userId, userAssignmentsCreateDepartmentAssignmentRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<UserAssignmentsCreateDepartmentAssignmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createDepartmentAssignmentAsync(Long companyId, Long userId, UserAssignmentsCreateDepartmentAssignmentRequest userAssignmentsCreateDepartmentAssignmentRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<UserAssignmentsCreateDepartmentAssignmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDepartmentAssignmentValidateBeforeCall(companyId, userId, userAssignmentsCreateDepartmentAssignmentRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<UserAssignmentsCreateDepartmentAssignmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateDepartmentAssignmentRequestBuilder {
        private final Long departmentId;
        private final Long companyId;
        private final Long userId;
        private Boolean appearOnSchedule;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private CreateDepartmentAssignmentRequestBuilder(Long departmentId, Long companyId, Long userId) {
            this.departmentId = departmentId;
            this.companyId = companyId;
            this.userId = userId;
        }

        /**
         * Set appearOnSchedule
         * @param appearOnSchedule Display the employee on the schedule for this department (optional, default to true)
         * @return CreateDepartmentAssignmentRequestBuilder
         */
        public CreateDepartmentAssignmentRequestBuilder appearOnSchedule(Boolean appearOnSchedule) {
            this.appearOnSchedule = appearOnSchedule;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return CreateDepartmentAssignmentRequestBuilder
         */
        public CreateDepartmentAssignmentRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return CreateDepartmentAssignmentRequestBuilder
         */
        public CreateDepartmentAssignmentRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for createDepartmentAssignment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UserAssignmentsCreateDepartmentAssignmentRequest userAssignmentsCreateDepartmentAssignmentRequest = buildBodyParams();
            return createDepartmentAssignmentCall(companyId, userId, userAssignmentsCreateDepartmentAssignmentRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private UserAssignmentsCreateDepartmentAssignmentRequest buildBodyParams() {
            UserAssignmentsCreateDepartmentAssignmentRequest userAssignmentsCreateDepartmentAssignmentRequest = new UserAssignmentsCreateDepartmentAssignmentRequest();
            userAssignmentsCreateDepartmentAssignmentRequest.departmentId(this.departmentId);
            userAssignmentsCreateDepartmentAssignmentRequest.appearOnSchedule(this.appearOnSchedule);
            return userAssignmentsCreateDepartmentAssignmentRequest;
        }

        /**
         * Execute createDepartmentAssignment request
         * @return UserAssignmentsCreateDepartmentAssignmentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public UserAssignmentsCreateDepartmentAssignmentResponse execute() throws ApiException {
            UserAssignmentsCreateDepartmentAssignmentRequest userAssignmentsCreateDepartmentAssignmentRequest = buildBodyParams();
            ApiResponse<UserAssignmentsCreateDepartmentAssignmentResponse> localVarResp = createDepartmentAssignmentWithHttpInfo(companyId, userId, userAssignmentsCreateDepartmentAssignmentRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createDepartmentAssignment request with HTTP info returned
         * @return ApiResponse&lt;UserAssignmentsCreateDepartmentAssignmentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserAssignmentsCreateDepartmentAssignmentResponse> executeWithHttpInfo() throws ApiException {
            UserAssignmentsCreateDepartmentAssignmentRequest userAssignmentsCreateDepartmentAssignmentRequest = buildBodyParams();
            return createDepartmentAssignmentWithHttpInfo(companyId, userId, userAssignmentsCreateDepartmentAssignmentRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute createDepartmentAssignment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserAssignmentsCreateDepartmentAssignmentResponse> _callback) throws ApiException {
            UserAssignmentsCreateDepartmentAssignmentRequest userAssignmentsCreateDepartmentAssignmentRequest = buildBodyParams();
            return createDepartmentAssignmentAsync(companyId, userId, userAssignmentsCreateDepartmentAssignmentRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Create Department Assignment
     * 
     * @param companyId Company ID (required)
     * @param userId User ID (required)
     * @param userAssignmentsCreateDepartmentAssignmentRequest  (required)
     * @return CreateDepartmentAssignmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateDepartmentAssignmentRequestBuilder createDepartmentAssignment(Long departmentId, Long companyId, Long userId) throws IllegalArgumentException {
        if (departmentId == null) throw new IllegalArgumentException("\"departmentId\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        return new CreateDepartmentAssignmentRequestBuilder(departmentId, companyId, userId);
    }
    private okhttp3.Call createLocationAssignmentCall(Long companyId, Long userId, UserAssignmentsCreateLocationAssignmentRequest userAssignmentsCreateLocationAssignmentRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userAssignmentsCreateLocationAssignmentRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/users/{user_id}/location_assignments"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLocationAssignmentValidateBeforeCall(Long companyId, Long userId, UserAssignmentsCreateLocationAssignmentRequest userAssignmentsCreateLocationAssignmentRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createLocationAssignment(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createLocationAssignment(Async)");
        }

        // verify the required parameter 'userAssignmentsCreateLocationAssignmentRequest' is set
        if (userAssignmentsCreateLocationAssignmentRequest == null) {
            throw new ApiException("Missing the required parameter 'userAssignmentsCreateLocationAssignmentRequest' when calling createLocationAssignment(Async)");
        }

        return createLocationAssignmentCall(companyId, userId, userAssignmentsCreateLocationAssignmentRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<UserAssignmentsCreateLocationAssignmentResponse> createLocationAssignmentWithHttpInfo(Long companyId, Long userId, UserAssignmentsCreateLocationAssignmentRequest userAssignmentsCreateLocationAssignmentRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = createLocationAssignmentValidateBeforeCall(companyId, userId, userAssignmentsCreateLocationAssignmentRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<UserAssignmentsCreateLocationAssignmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createLocationAssignmentAsync(Long companyId, Long userId, UserAssignmentsCreateLocationAssignmentRequest userAssignmentsCreateLocationAssignmentRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<UserAssignmentsCreateLocationAssignmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLocationAssignmentValidateBeforeCall(companyId, userId, userAssignmentsCreateLocationAssignmentRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<UserAssignmentsCreateLocationAssignmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateLocationAssignmentRequestBuilder {
        private final Long locationId;
        private final Long companyId;
        private final Long userId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private CreateLocationAssignmentRequestBuilder(Long locationId, Long companyId, Long userId) {
            this.locationId = locationId;
            this.companyId = companyId;
            this.userId = userId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return CreateLocationAssignmentRequestBuilder
         */
        public CreateLocationAssignmentRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return CreateLocationAssignmentRequestBuilder
         */
        public CreateLocationAssignmentRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for createLocationAssignment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UserAssignmentsCreateLocationAssignmentRequest userAssignmentsCreateLocationAssignmentRequest = buildBodyParams();
            return createLocationAssignmentCall(companyId, userId, userAssignmentsCreateLocationAssignmentRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private UserAssignmentsCreateLocationAssignmentRequest buildBodyParams() {
            UserAssignmentsCreateLocationAssignmentRequest userAssignmentsCreateLocationAssignmentRequest = new UserAssignmentsCreateLocationAssignmentRequest();
            userAssignmentsCreateLocationAssignmentRequest.locationId(this.locationId);
            return userAssignmentsCreateLocationAssignmentRequest;
        }

        /**
         * Execute createLocationAssignment request
         * @return UserAssignmentsCreateLocationAssignmentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public UserAssignmentsCreateLocationAssignmentResponse execute() throws ApiException {
            UserAssignmentsCreateLocationAssignmentRequest userAssignmentsCreateLocationAssignmentRequest = buildBodyParams();
            ApiResponse<UserAssignmentsCreateLocationAssignmentResponse> localVarResp = createLocationAssignmentWithHttpInfo(companyId, userId, userAssignmentsCreateLocationAssignmentRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createLocationAssignment request with HTTP info returned
         * @return ApiResponse&lt;UserAssignmentsCreateLocationAssignmentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserAssignmentsCreateLocationAssignmentResponse> executeWithHttpInfo() throws ApiException {
            UserAssignmentsCreateLocationAssignmentRequest userAssignmentsCreateLocationAssignmentRequest = buildBodyParams();
            return createLocationAssignmentWithHttpInfo(companyId, userId, userAssignmentsCreateLocationAssignmentRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute createLocationAssignment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserAssignmentsCreateLocationAssignmentResponse> _callback) throws ApiException {
            UserAssignmentsCreateLocationAssignmentRequest userAssignmentsCreateLocationAssignmentRequest = buildBodyParams();
            return createLocationAssignmentAsync(companyId, userId, userAssignmentsCreateLocationAssignmentRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Create Location Assignments
     * 
     * @param companyId Company ID (required)
     * @param userId User ID (required)
     * @param userAssignmentsCreateLocationAssignmentRequest  (required)
     * @return CreateLocationAssignmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateLocationAssignmentRequestBuilder createLocationAssignment(Long locationId, Long companyId, Long userId) throws IllegalArgumentException {
        if (locationId == null) throw new IllegalArgumentException("\"locationId\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        return new CreateLocationAssignmentRequestBuilder(locationId, companyId, userId);
    }
    private okhttp3.Call createRoleAssignmentCall(Long companyId, Long userId, UserAssignmentsCreateRoleAssignmentRequest userAssignmentsCreateRoleAssignmentRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userAssignmentsCreateRoleAssignmentRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/users/{user_id}/role_assignments"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRoleAssignmentValidateBeforeCall(Long companyId, Long userId, UserAssignmentsCreateRoleAssignmentRequest userAssignmentsCreateRoleAssignmentRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createRoleAssignment(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createRoleAssignment(Async)");
        }

        // verify the required parameter 'userAssignmentsCreateRoleAssignmentRequest' is set
        if (userAssignmentsCreateRoleAssignmentRequest == null) {
            throw new ApiException("Missing the required parameter 'userAssignmentsCreateRoleAssignmentRequest' when calling createRoleAssignment(Async)");
        }

        return createRoleAssignmentCall(companyId, userId, userAssignmentsCreateRoleAssignmentRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<UserAssignmentsCreateRoleAssignmentResponse> createRoleAssignmentWithHttpInfo(Long companyId, Long userId, UserAssignmentsCreateRoleAssignmentRequest userAssignmentsCreateRoleAssignmentRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = createRoleAssignmentValidateBeforeCall(companyId, userId, userAssignmentsCreateRoleAssignmentRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<UserAssignmentsCreateRoleAssignmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRoleAssignmentAsync(Long companyId, Long userId, UserAssignmentsCreateRoleAssignmentRequest userAssignmentsCreateRoleAssignmentRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<UserAssignmentsCreateRoleAssignmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRoleAssignmentValidateBeforeCall(companyId, userId, userAssignmentsCreateRoleAssignmentRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<UserAssignmentsCreateRoleAssignmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRoleAssignmentRequestBuilder {
        private final Integer roleId;
        private final Long companyId;
        private final Long userId;
        private Boolean primary;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private CreateRoleAssignmentRequestBuilder(Integer roleId, Long companyId, Long userId) {
            this.roleId = roleId;
            this.companyId = companyId;
            this.userId = userId;
        }

        /**
         * Set primary
         * @param primary Sets the role as primary for this user.  Only one role per department can be primary. (optional)
         * @return CreateRoleAssignmentRequestBuilder
         */
        public CreateRoleAssignmentRequestBuilder primary(Boolean primary) {
            this.primary = primary;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return CreateRoleAssignmentRequestBuilder
         */
        public CreateRoleAssignmentRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return CreateRoleAssignmentRequestBuilder
         */
        public CreateRoleAssignmentRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for createRoleAssignment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UserAssignmentsCreateRoleAssignmentRequest userAssignmentsCreateRoleAssignmentRequest = buildBodyParams();
            return createRoleAssignmentCall(companyId, userId, userAssignmentsCreateRoleAssignmentRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private UserAssignmentsCreateRoleAssignmentRequest buildBodyParams() {
            UserAssignmentsCreateRoleAssignmentRequest userAssignmentsCreateRoleAssignmentRequest = new UserAssignmentsCreateRoleAssignmentRequest();
            userAssignmentsCreateRoleAssignmentRequest.roleId(this.roleId);
            userAssignmentsCreateRoleAssignmentRequest.primary(this.primary);
            return userAssignmentsCreateRoleAssignmentRequest;
        }

        /**
         * Execute createRoleAssignment request
         * @return UserAssignmentsCreateRoleAssignmentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public UserAssignmentsCreateRoleAssignmentResponse execute() throws ApiException {
            UserAssignmentsCreateRoleAssignmentRequest userAssignmentsCreateRoleAssignmentRequest = buildBodyParams();
            ApiResponse<UserAssignmentsCreateRoleAssignmentResponse> localVarResp = createRoleAssignmentWithHttpInfo(companyId, userId, userAssignmentsCreateRoleAssignmentRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRoleAssignment request with HTTP info returned
         * @return ApiResponse&lt;UserAssignmentsCreateRoleAssignmentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserAssignmentsCreateRoleAssignmentResponse> executeWithHttpInfo() throws ApiException {
            UserAssignmentsCreateRoleAssignmentRequest userAssignmentsCreateRoleAssignmentRequest = buildBodyParams();
            return createRoleAssignmentWithHttpInfo(companyId, userId, userAssignmentsCreateRoleAssignmentRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute createRoleAssignment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserAssignmentsCreateRoleAssignmentResponse> _callback) throws ApiException {
            UserAssignmentsCreateRoleAssignmentRequest userAssignmentsCreateRoleAssignmentRequest = buildBodyParams();
            return createRoleAssignmentAsync(companyId, userId, userAssignmentsCreateRoleAssignmentRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Create Role Assignment
     * 
     * @param companyId Company ID (required)
     * @param userId User ID (required)
     * @param userAssignmentsCreateRoleAssignmentRequest  (required)
     * @return CreateRoleAssignmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateRoleAssignmentRequestBuilder createRoleAssignment(Integer roleId, Long companyId, Long userId) throws IllegalArgumentException {
        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        return new CreateRoleAssignmentRequestBuilder(roleId, companyId, userId);
    }
    private okhttp3.Call deleteRoleAssignmentCall(Long companyId, Long userId, Long roleId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/users/{user_id}/role_assignments/{role_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "role_id" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRoleAssignmentValidateBeforeCall(Long companyId, Long userId, Long roleId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling deleteRoleAssignment(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteRoleAssignment(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling deleteRoleAssignment(Async)");
        }

        return deleteRoleAssignmentCall(companyId, userId, roleId, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<Void> deleteRoleAssignmentWithHttpInfo(Long companyId, Long userId, Long roleId, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = deleteRoleAssignmentValidateBeforeCall(companyId, userId, roleId, xApiVersion, xCompanyGuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteRoleAssignmentAsync(Long companyId, Long userId, Long roleId, String xApiVersion, UUID xCompanyGuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRoleAssignmentValidateBeforeCall(companyId, userId, roleId, xApiVersion, xCompanyGuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteRoleAssignmentRequestBuilder {
        private final Long companyId;
        private final Long userId;
        private final Long roleId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private DeleteRoleAssignmentRequestBuilder(Long companyId, Long userId, Long roleId) {
            this.companyId = companyId;
            this.userId = userId;
            this.roleId = roleId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return DeleteRoleAssignmentRequestBuilder
         */
        public DeleteRoleAssignmentRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return DeleteRoleAssignmentRequestBuilder
         */
        public DeleteRoleAssignmentRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for deleteRoleAssignment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteRoleAssignmentCall(companyId, userId, roleId, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute deleteRoleAssignment request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteRoleAssignmentWithHttpInfo(companyId, userId, roleId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute deleteRoleAssignment request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteRoleAssignmentWithHttpInfo(companyId, userId, roleId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute deleteRoleAssignment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteRoleAssignmentAsync(companyId, userId, roleId, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Delete Role Assignment
     * 
     * @param companyId Company ID (required)
     * @param userId User ID (required)
     * @param roleId Role ID (required)
     * @return DeleteRoleAssignmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRoleAssignmentRequestBuilder deleteRoleAssignment(Long companyId, Long userId, Long roleId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
        return new DeleteRoleAssignmentRequestBuilder(companyId, userId, roleId);
    }
    private okhttp3.Call listCall(Long companyId, Long userId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/users/{user_id}/assignments"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Long companyId, Long userId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling list(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling list(Async)");
        }

        return listCall(companyId, userId, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<UserAssignmentsListResponse> listWithHttpInfo(Long companyId, Long userId, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(companyId, userId, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<UserAssignmentsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Long companyId, Long userId, String xApiVersion, UUID xCompanyGuid, final ApiCallback<UserAssignmentsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(companyId, userId, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<UserAssignmentsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final Long companyId;
        private final Long userId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private ListRequestBuilder(Long companyId, Long userId) {
            this.companyId = companyId;
            this.userId = userId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(companyId, userId, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute list request
         * @return UserAssignmentsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public UserAssignmentsListResponse execute() throws ApiException {
            ApiResponse<UserAssignmentsListResponse> localVarResp = listWithHttpInfo(companyId, userId, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;UserAssignmentsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserAssignmentsListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(companyId, userId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserAssignmentsListResponse> _callback) throws ApiException {
            return listAsync(companyId, userId, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * List Assignments
     * 
     * @param companyId Company ID (required)
     * @param userId User ID (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list(Long companyId, Long userId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        return new ListRequestBuilder(companyId, userId);
    }
    private okhttp3.Call listDepartmentAssignmentsCall(Long companyId, Long userId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/users/{user_id}/department_assignments"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDepartmentAssignmentsValidateBeforeCall(Long companyId, Long userId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling listDepartmentAssignments(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listDepartmentAssignments(Async)");
        }

        return listDepartmentAssignmentsCall(companyId, userId, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<UserAssignmentsListDepartmentAssignmentsResponse> listDepartmentAssignmentsWithHttpInfo(Long companyId, Long userId, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = listDepartmentAssignmentsValidateBeforeCall(companyId, userId, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<UserAssignmentsListDepartmentAssignmentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDepartmentAssignmentsAsync(Long companyId, Long userId, String xApiVersion, UUID xCompanyGuid, final ApiCallback<UserAssignmentsListDepartmentAssignmentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDepartmentAssignmentsValidateBeforeCall(companyId, userId, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<UserAssignmentsListDepartmentAssignmentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListDepartmentAssignmentsRequestBuilder {
        private final Long companyId;
        private final Long userId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private ListDepartmentAssignmentsRequestBuilder(Long companyId, Long userId) {
            this.companyId = companyId;
            this.userId = userId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return ListDepartmentAssignmentsRequestBuilder
         */
        public ListDepartmentAssignmentsRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return ListDepartmentAssignmentsRequestBuilder
         */
        public ListDepartmentAssignmentsRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for listDepartmentAssignments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDepartmentAssignmentsCall(companyId, userId, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute listDepartmentAssignments request
         * @return UserAssignmentsListDepartmentAssignmentsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public UserAssignmentsListDepartmentAssignmentsResponse execute() throws ApiException {
            ApiResponse<UserAssignmentsListDepartmentAssignmentsResponse> localVarResp = listDepartmentAssignmentsWithHttpInfo(companyId, userId, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listDepartmentAssignments request with HTTP info returned
         * @return ApiResponse&lt;UserAssignmentsListDepartmentAssignmentsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserAssignmentsListDepartmentAssignmentsResponse> executeWithHttpInfo() throws ApiException {
            return listDepartmentAssignmentsWithHttpInfo(companyId, userId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute listDepartmentAssignments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserAssignmentsListDepartmentAssignmentsResponse> _callback) throws ApiException {
            return listDepartmentAssignmentsAsync(companyId, userId, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * List Department Assignments
     * 
     * @param companyId Company ID (required)
     * @param userId User ID (required)
     * @return ListDepartmentAssignmentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListDepartmentAssignmentsRequestBuilder listDepartmentAssignments(Long companyId, Long userId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        return new ListDepartmentAssignmentsRequestBuilder(companyId, userId);
    }
    private okhttp3.Call listLocationAssignmentsCall(Long companyId, Long userId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/users/{user_id}/location_assignments"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLocationAssignmentsValidateBeforeCall(Long companyId, Long userId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling listLocationAssignments(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listLocationAssignments(Async)");
        }

        return listLocationAssignmentsCall(companyId, userId, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<UserAssignmentsListLocationAssignmentsResponse> listLocationAssignmentsWithHttpInfo(Long companyId, Long userId, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = listLocationAssignmentsValidateBeforeCall(companyId, userId, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<UserAssignmentsListLocationAssignmentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listLocationAssignmentsAsync(Long companyId, Long userId, String xApiVersion, UUID xCompanyGuid, final ApiCallback<UserAssignmentsListLocationAssignmentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLocationAssignmentsValidateBeforeCall(companyId, userId, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<UserAssignmentsListLocationAssignmentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListLocationAssignmentsRequestBuilder {
        private final Long companyId;
        private final Long userId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private ListLocationAssignmentsRequestBuilder(Long companyId, Long userId) {
            this.companyId = companyId;
            this.userId = userId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return ListLocationAssignmentsRequestBuilder
         */
        public ListLocationAssignmentsRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return ListLocationAssignmentsRequestBuilder
         */
        public ListLocationAssignmentsRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for listLocationAssignments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listLocationAssignmentsCall(companyId, userId, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute listLocationAssignments request
         * @return UserAssignmentsListLocationAssignmentsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public UserAssignmentsListLocationAssignmentsResponse execute() throws ApiException {
            ApiResponse<UserAssignmentsListLocationAssignmentsResponse> localVarResp = listLocationAssignmentsWithHttpInfo(companyId, userId, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listLocationAssignments request with HTTP info returned
         * @return ApiResponse&lt;UserAssignmentsListLocationAssignmentsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserAssignmentsListLocationAssignmentsResponse> executeWithHttpInfo() throws ApiException {
            return listLocationAssignmentsWithHttpInfo(companyId, userId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute listLocationAssignments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserAssignmentsListLocationAssignmentsResponse> _callback) throws ApiException {
            return listLocationAssignmentsAsync(companyId, userId, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * List Location Assignments
     * 
     * @param companyId Company ID (required)
     * @param userId User ID (required)
     * @return ListLocationAssignmentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListLocationAssignmentsRequestBuilder listLocationAssignments(Long companyId, Long userId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        return new ListLocationAssignmentsRequestBuilder(companyId, userId);
    }
    private okhttp3.Call listRoleAssignmentsCall(Long companyId, Long userId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/users/{user_id}/role_assignments"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRoleAssignmentsValidateBeforeCall(Long companyId, Long userId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling listRoleAssignments(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listRoleAssignments(Async)");
        }

        return listRoleAssignmentsCall(companyId, userId, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<UserAssignmentsListRoleAssignmentsResponse> listRoleAssignmentsWithHttpInfo(Long companyId, Long userId, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = listRoleAssignmentsValidateBeforeCall(companyId, userId, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<UserAssignmentsListRoleAssignmentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRoleAssignmentsAsync(Long companyId, Long userId, String xApiVersion, UUID xCompanyGuid, final ApiCallback<UserAssignmentsListRoleAssignmentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRoleAssignmentsValidateBeforeCall(companyId, userId, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<UserAssignmentsListRoleAssignmentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRoleAssignmentsRequestBuilder {
        private final Long companyId;
        private final Long userId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private ListRoleAssignmentsRequestBuilder(Long companyId, Long userId) {
            this.companyId = companyId;
            this.userId = userId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return ListRoleAssignmentsRequestBuilder
         */
        public ListRoleAssignmentsRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return ListRoleAssignmentsRequestBuilder
         */
        public ListRoleAssignmentsRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for listRoleAssignments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRoleAssignmentsCall(companyId, userId, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute listRoleAssignments request
         * @return UserAssignmentsListRoleAssignmentsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public UserAssignmentsListRoleAssignmentsResponse execute() throws ApiException {
            ApiResponse<UserAssignmentsListRoleAssignmentsResponse> localVarResp = listRoleAssignmentsWithHttpInfo(companyId, userId, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRoleAssignments request with HTTP info returned
         * @return ApiResponse&lt;UserAssignmentsListRoleAssignmentsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserAssignmentsListRoleAssignmentsResponse> executeWithHttpInfo() throws ApiException {
            return listRoleAssignmentsWithHttpInfo(companyId, userId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute listRoleAssignments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserAssignmentsListRoleAssignmentsResponse> _callback) throws ApiException {
            return listRoleAssignmentsAsync(companyId, userId, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * List Role Assignments
     * 
     * @param companyId Company ID (required)
     * @param userId User ID (required)
     * @return ListRoleAssignmentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListRoleAssignmentsRequestBuilder listRoleAssignments(Long companyId, Long userId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        return new ListRoleAssignmentsRequestBuilder(companyId, userId);
    }
    private okhttp3.Call removeDepartmentAssignmentCall(Long companyId, Long userId, Long departmentId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/users/{user_id}/department_assignments/{department_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "department_id" + "}", localVarApiClient.escapeString(departmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeDepartmentAssignmentValidateBeforeCall(Long companyId, Long userId, Long departmentId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling removeDepartmentAssignment(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeDepartmentAssignment(Async)");
        }

        // verify the required parameter 'departmentId' is set
        if (departmentId == null) {
            throw new ApiException("Missing the required parameter 'departmentId' when calling removeDepartmentAssignment(Async)");
        }

        return removeDepartmentAssignmentCall(companyId, userId, departmentId, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<Void> removeDepartmentAssignmentWithHttpInfo(Long companyId, Long userId, Long departmentId, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = removeDepartmentAssignmentValidateBeforeCall(companyId, userId, departmentId, xApiVersion, xCompanyGuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeDepartmentAssignmentAsync(Long companyId, Long userId, Long departmentId, String xApiVersion, UUID xCompanyGuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeDepartmentAssignmentValidateBeforeCall(companyId, userId, departmentId, xApiVersion, xCompanyGuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveDepartmentAssignmentRequestBuilder {
        private final Long companyId;
        private final Long userId;
        private final Long departmentId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private RemoveDepartmentAssignmentRequestBuilder(Long companyId, Long userId, Long departmentId) {
            this.companyId = companyId;
            this.userId = userId;
            this.departmentId = departmentId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return RemoveDepartmentAssignmentRequestBuilder
         */
        public RemoveDepartmentAssignmentRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return RemoveDepartmentAssignmentRequestBuilder
         */
        public RemoveDepartmentAssignmentRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for removeDepartmentAssignment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeDepartmentAssignmentCall(companyId, userId, departmentId, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute removeDepartmentAssignment request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeDepartmentAssignmentWithHttpInfo(companyId, userId, departmentId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute removeDepartmentAssignment request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeDepartmentAssignmentWithHttpInfo(companyId, userId, departmentId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute removeDepartmentAssignment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeDepartmentAssignmentAsync(companyId, userId, departmentId, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Delete Department Assignment
     * 
     * @param companyId Company ID (required)
     * @param userId User ID (required)
     * @param departmentId Department ID (required)
     * @return RemoveDepartmentAssignmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveDepartmentAssignmentRequestBuilder removeDepartmentAssignment(Long companyId, Long userId, Long departmentId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        if (departmentId == null) throw new IllegalArgumentException("\"departmentId\" is required but got null");
        return new RemoveDepartmentAssignmentRequestBuilder(companyId, userId, departmentId);
    }
    private okhttp3.Call removeLocationAssignmentCall(Long companyId, Long userId, Long locationId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/users/{user_id}/location_assignments/{location_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "location_id" + "}", localVarApiClient.escapeString(locationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeLocationAssignmentValidateBeforeCall(Long companyId, Long userId, Long locationId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling removeLocationAssignment(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeLocationAssignment(Async)");
        }

        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling removeLocationAssignment(Async)");
        }

        return removeLocationAssignmentCall(companyId, userId, locationId, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<Void> removeLocationAssignmentWithHttpInfo(Long companyId, Long userId, Long locationId, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = removeLocationAssignmentValidateBeforeCall(companyId, userId, locationId, xApiVersion, xCompanyGuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeLocationAssignmentAsync(Long companyId, Long userId, Long locationId, String xApiVersion, UUID xCompanyGuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeLocationAssignmentValidateBeforeCall(companyId, userId, locationId, xApiVersion, xCompanyGuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveLocationAssignmentRequestBuilder {
        private final Long companyId;
        private final Long userId;
        private final Long locationId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private RemoveLocationAssignmentRequestBuilder(Long companyId, Long userId, Long locationId) {
            this.companyId = companyId;
            this.userId = userId;
            this.locationId = locationId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return RemoveLocationAssignmentRequestBuilder
         */
        public RemoveLocationAssignmentRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return RemoveLocationAssignmentRequestBuilder
         */
        public RemoveLocationAssignmentRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for removeLocationAssignment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeLocationAssignmentCall(companyId, userId, locationId, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute removeLocationAssignment request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeLocationAssignmentWithHttpInfo(companyId, userId, locationId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute removeLocationAssignment request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeLocationAssignmentWithHttpInfo(companyId, userId, locationId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute removeLocationAssignment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeLocationAssignmentAsync(companyId, userId, locationId, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Delete Location Assignment
     * 
     * @param companyId Company ID (required)
     * @param userId User ID (required)
     * @param locationId Location ID (required)
     * @return RemoveLocationAssignmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveLocationAssignmentRequestBuilder removeLocationAssignment(Long companyId, Long userId, Long locationId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        if (locationId == null) throw new IllegalArgumentException("\"locationId\" is required but got null");
        return new RemoveLocationAssignmentRequestBuilder(companyId, userId, locationId);
    }
}
