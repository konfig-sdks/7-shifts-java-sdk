/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ExternalUserMappingsCreateBulkMappingsRequest;
import com.konfigthis.client.model.ExternalUserMappingsCreateBulkMappingsRequestDataInner;
import com.konfigthis.client.model.ExternalUserMappingsCreateBulkMappingsResponse;
import com.konfigthis.client.model.ExternalUserMappingsCreateMappingRequest;
import com.konfigthis.client.model.ExternalUserMappingsCreateMappingResponse;
import com.konfigthis.client.model.ExternalUserMappingsGetMappingByIdResponse;
import com.konfigthis.client.model.ExternalUserMappingsListResponse;
import com.konfigthis.client.model.ExternalUserMappingsUpdateMappingByIdentifierRequest;
import com.konfigthis.client.model.ExternalUserMappingsUpdateMappingByIdentifierResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ExternalUserMappingsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExternalUserMappingsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ExternalUserMappingsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createBulkMappingsCall(Long companyId, ExternalUserMappingsCreateBulkMappingsRequest externalUserMappingsCreateBulkMappingsRequest, String xApiVersion, UUID xCompanyGuid, Long locationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = externalUserMappingsCreateBulkMappingsRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/external_user_mappings_bulk"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBulkMappingsValidateBeforeCall(Long companyId, ExternalUserMappingsCreateBulkMappingsRequest externalUserMappingsCreateBulkMappingsRequest, String xApiVersion, UUID xCompanyGuid, Long locationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createBulkMappings(Async)");
        }

        // verify the required parameter 'externalUserMappingsCreateBulkMappingsRequest' is set
        if (externalUserMappingsCreateBulkMappingsRequest == null) {
            throw new ApiException("Missing the required parameter 'externalUserMappingsCreateBulkMappingsRequest' when calling createBulkMappings(Async)");
        }

        return createBulkMappingsCall(companyId, externalUserMappingsCreateBulkMappingsRequest, xApiVersion, xCompanyGuid, locationId, _callback);

    }


    private ApiResponse<ExternalUserMappingsCreateBulkMappingsResponse> createBulkMappingsWithHttpInfo(Long companyId, ExternalUserMappingsCreateBulkMappingsRequest externalUserMappingsCreateBulkMappingsRequest, String xApiVersion, UUID xCompanyGuid, Long locationId) throws ApiException {
        okhttp3.Call localVarCall = createBulkMappingsValidateBeforeCall(companyId, externalUserMappingsCreateBulkMappingsRequest, xApiVersion, xCompanyGuid, locationId, null);
        Type localVarReturnType = new TypeToken<ExternalUserMappingsCreateBulkMappingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createBulkMappingsAsync(Long companyId, ExternalUserMappingsCreateBulkMappingsRequest externalUserMappingsCreateBulkMappingsRequest, String xApiVersion, UUID xCompanyGuid, Long locationId, final ApiCallback<ExternalUserMappingsCreateBulkMappingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBulkMappingsValidateBeforeCall(companyId, externalUserMappingsCreateBulkMappingsRequest, xApiVersion, xCompanyGuid, locationId, _callback);
        Type localVarReturnType = new TypeToken<ExternalUserMappingsCreateBulkMappingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateBulkMappingsRequestBuilder {
        private final List<ExternalUserMappingsCreateBulkMappingsRequestDataInner> data;
        private final Long companyId;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private Long locationId;

        private CreateBulkMappingsRequestBuilder(List<ExternalUserMappingsCreateBulkMappingsRequestDataInner> data, Long companyId) {
            this.data = data;
            this.companyId = companyId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return CreateBulkMappingsRequestBuilder
         */
        public CreateBulkMappingsRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return CreateBulkMappingsRequestBuilder
         */
        public CreateBulkMappingsRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set locationId
         * @param locationId Location ID (optional)
         * @return CreateBulkMappingsRequestBuilder
         */
        public CreateBulkMappingsRequestBuilder locationId(Long locationId) {
            this.locationId = locationId;
            return this;
        }
        
        /**
         * Build call for createBulkMappings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ExternalUserMappingsCreateBulkMappingsRequest externalUserMappingsCreateBulkMappingsRequest = buildBodyParams();
            return createBulkMappingsCall(companyId, externalUserMappingsCreateBulkMappingsRequest, xApiVersion, xCompanyGuid, locationId, _callback);
        }

        private ExternalUserMappingsCreateBulkMappingsRequest buildBodyParams() {
            ExternalUserMappingsCreateBulkMappingsRequest externalUserMappingsCreateBulkMappingsRequest = new ExternalUserMappingsCreateBulkMappingsRequest();
            externalUserMappingsCreateBulkMappingsRequest.data(this.data);
            return externalUserMappingsCreateBulkMappingsRequest;
        }

        /**
         * Execute createBulkMappings request
         * @return ExternalUserMappingsCreateBulkMappingsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ExternalUserMappingsCreateBulkMappingsResponse execute() throws ApiException {
            ExternalUserMappingsCreateBulkMappingsRequest externalUserMappingsCreateBulkMappingsRequest = buildBodyParams();
            ApiResponse<ExternalUserMappingsCreateBulkMappingsResponse> localVarResp = createBulkMappingsWithHttpInfo(companyId, externalUserMappingsCreateBulkMappingsRequest, xApiVersion, xCompanyGuid, locationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createBulkMappings request with HTTP info returned
         * @return ApiResponse&lt;ExternalUserMappingsCreateBulkMappingsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExternalUserMappingsCreateBulkMappingsResponse> executeWithHttpInfo() throws ApiException {
            ExternalUserMappingsCreateBulkMappingsRequest externalUserMappingsCreateBulkMappingsRequest = buildBodyParams();
            return createBulkMappingsWithHttpInfo(companyId, externalUserMappingsCreateBulkMappingsRequest, xApiVersion, xCompanyGuid, locationId);
        }

        /**
         * Execute createBulkMappings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExternalUserMappingsCreateBulkMappingsResponse> _callback) throws ApiException {
            ExternalUserMappingsCreateBulkMappingsRequest externalUserMappingsCreateBulkMappingsRequest = buildBodyParams();
            return createBulkMappingsAsync(companyId, externalUserMappingsCreateBulkMappingsRequest, xApiVersion, xCompanyGuid, locationId, _callback);
        }
    }

    /**
     * Create User External Mappings
     * 
     * @param companyId Company ID (required)
     * @param externalUserMappingsCreateBulkMappingsRequest  (required)
     * @return CreateBulkMappingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateBulkMappingsRequestBuilder createBulkMappings(List<ExternalUserMappingsCreateBulkMappingsRequestDataInner> data, Long companyId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new CreateBulkMappingsRequestBuilder(data, companyId);
    }
    private okhttp3.Call createMappingCall(Long companyId, String xApiVersion, UUID xCompanyGuid, Long locationId, ExternalUserMappingsCreateMappingRequest externalUserMappingsCreateMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = externalUserMappingsCreateMappingRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/external_user_mappings"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMappingValidateBeforeCall(Long companyId, String xApiVersion, UUID xCompanyGuid, Long locationId, ExternalUserMappingsCreateMappingRequest externalUserMappingsCreateMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createMapping(Async)");
        }

        return createMappingCall(companyId, xApiVersion, xCompanyGuid, locationId, externalUserMappingsCreateMappingRequest, _callback);

    }


    private ApiResponse<ExternalUserMappingsCreateMappingResponse> createMappingWithHttpInfo(Long companyId, String xApiVersion, UUID xCompanyGuid, Long locationId, ExternalUserMappingsCreateMappingRequest externalUserMappingsCreateMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = createMappingValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, locationId, externalUserMappingsCreateMappingRequest, null);
        Type localVarReturnType = new TypeToken<ExternalUserMappingsCreateMappingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createMappingAsync(Long companyId, String xApiVersion, UUID xCompanyGuid, Long locationId, ExternalUserMappingsCreateMappingRequest externalUserMappingsCreateMappingRequest, final ApiCallback<ExternalUserMappingsCreateMappingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMappingValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, locationId, externalUserMappingsCreateMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<ExternalUserMappingsCreateMappingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateMappingRequestBuilder {
        private final Integer userId;
        private final String externalUserId;
        private final Long companyId;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private Long locationId;

        private CreateMappingRequestBuilder(Integer userId, String externalUserId, Long companyId) {
            this.userId = userId;
            this.externalUserId = externalUserId;
            this.companyId = companyId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return CreateMappingRequestBuilder
         */
        public CreateMappingRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return CreateMappingRequestBuilder
         */
        public CreateMappingRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set locationId
         * @param locationId Location ID (optional)
         * @return CreateMappingRequestBuilder
         */
        public CreateMappingRequestBuilder locationId(Long locationId) {
            this.locationId = locationId;
            return this;
        }
        
        /**
         * Build call for createMapping
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ExternalUserMappingsCreateMappingRequest externalUserMappingsCreateMappingRequest = buildBodyParams();
            return createMappingCall(companyId, xApiVersion, xCompanyGuid, locationId, externalUserMappingsCreateMappingRequest, _callback);
        }

        private ExternalUserMappingsCreateMappingRequest buildBodyParams() {
            ExternalUserMappingsCreateMappingRequest externalUserMappingsCreateMappingRequest = new ExternalUserMappingsCreateMappingRequest();
            externalUserMappingsCreateMappingRequest.userId(this.userId);
            externalUserMappingsCreateMappingRequest.externalUserId(this.externalUserId);
            return externalUserMappingsCreateMappingRequest;
        }

        /**
         * Execute createMapping request
         * @return ExternalUserMappingsCreateMappingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ExternalUserMappingsCreateMappingResponse execute() throws ApiException {
            ExternalUserMappingsCreateMappingRequest externalUserMappingsCreateMappingRequest = buildBodyParams();
            ApiResponse<ExternalUserMappingsCreateMappingResponse> localVarResp = createMappingWithHttpInfo(companyId, xApiVersion, xCompanyGuid, locationId, externalUserMappingsCreateMappingRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createMapping request with HTTP info returned
         * @return ApiResponse&lt;ExternalUserMappingsCreateMappingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExternalUserMappingsCreateMappingResponse> executeWithHttpInfo() throws ApiException {
            ExternalUserMappingsCreateMappingRequest externalUserMappingsCreateMappingRequest = buildBodyParams();
            return createMappingWithHttpInfo(companyId, xApiVersion, xCompanyGuid, locationId, externalUserMappingsCreateMappingRequest);
        }

        /**
         * Execute createMapping request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExternalUserMappingsCreateMappingResponse> _callback) throws ApiException {
            ExternalUserMappingsCreateMappingRequest externalUserMappingsCreateMappingRequest = buildBodyParams();
            return createMappingAsync(companyId, xApiVersion, xCompanyGuid, locationId, externalUserMappingsCreateMappingRequest, _callback);
        }
    }

    /**
     * Create External User Mapping
     * 
     * @param companyId Company ID (required)
     * @return CreateMappingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateMappingRequestBuilder createMapping(Integer userId, String externalUserId, Long companyId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        if (externalUserId == null) throw new IllegalArgumentException("\"externalUserId\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new CreateMappingRequestBuilder(userId, externalUserId, companyId);
    }
    private okhttp3.Call deleteMappingCall(Long companyId, String identifier, String xApiVersion, UUID xCompanyGuid, Long locationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/external_user_mappings/{identifier}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMappingValidateBeforeCall(Long companyId, String identifier, String xApiVersion, UUID xCompanyGuid, Long locationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling deleteMapping(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling deleteMapping(Async)");
        }

        return deleteMappingCall(companyId, identifier, xApiVersion, xCompanyGuid, locationId, _callback);

    }


    private ApiResponse<Void> deleteMappingWithHttpInfo(Long companyId, String identifier, String xApiVersion, UUID xCompanyGuid, Long locationId) throws ApiException {
        okhttp3.Call localVarCall = deleteMappingValidateBeforeCall(companyId, identifier, xApiVersion, xCompanyGuid, locationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteMappingAsync(Long companyId, String identifier, String xApiVersion, UUID xCompanyGuid, Long locationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMappingValidateBeforeCall(companyId, identifier, xApiVersion, xCompanyGuid, locationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteMappingRequestBuilder {
        private final Long companyId;
        private final String identifier;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private Long locationId;

        private DeleteMappingRequestBuilder(Long companyId, String identifier) {
            this.companyId = companyId;
            this.identifier = identifier;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return DeleteMappingRequestBuilder
         */
        public DeleteMappingRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return DeleteMappingRequestBuilder
         */
        public DeleteMappingRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set locationId
         * @param locationId Location ID (optional)
         * @return DeleteMappingRequestBuilder
         */
        public DeleteMappingRequestBuilder locationId(Long locationId) {
            this.locationId = locationId;
            return this;
        }
        
        /**
         * Build call for deleteMapping
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteMappingCall(companyId, identifier, xApiVersion, xCompanyGuid, locationId, _callback);
        }


        /**
         * Execute deleteMapping request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteMappingWithHttpInfo(companyId, identifier, xApiVersion, xCompanyGuid, locationId);
        }

        /**
         * Execute deleteMapping request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteMappingWithHttpInfo(companyId, identifier, xApiVersion, xCompanyGuid, locationId);
        }

        /**
         * Execute deleteMapping request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteMappingAsync(companyId, identifier, xApiVersion, xCompanyGuid, locationId, _callback);
        }
    }

    /**
     * Delete External User Mapping
     * 
     * @param companyId Company ID (required)
     * @param identifier User ID. Accepted values are 7Shifts user id, external user id or user email address. Use prefix ext: for external id or email: for email address (required)
     * @return DeleteMappingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteMappingRequestBuilder deleteMapping(Long companyId, String identifier) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (identifier == null) throw new IllegalArgumentException("\"identifier\" is required but got null");
            

        return new DeleteMappingRequestBuilder(companyId, identifier);
    }
    private okhttp3.Call getMappingByIdCall(Long companyId, String identifier, String xApiVersion, UUID xCompanyGuid, Long locationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/external_user_mappings/{identifier}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMappingByIdValidateBeforeCall(Long companyId, String identifier, String xApiVersion, UUID xCompanyGuid, Long locationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getMappingById(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getMappingById(Async)");
        }

        return getMappingByIdCall(companyId, identifier, xApiVersion, xCompanyGuid, locationId, _callback);

    }


    private ApiResponse<ExternalUserMappingsGetMappingByIdResponse> getMappingByIdWithHttpInfo(Long companyId, String identifier, String xApiVersion, UUID xCompanyGuid, Long locationId) throws ApiException {
        okhttp3.Call localVarCall = getMappingByIdValidateBeforeCall(companyId, identifier, xApiVersion, xCompanyGuid, locationId, null);
        Type localVarReturnType = new TypeToken<ExternalUserMappingsGetMappingByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMappingByIdAsync(Long companyId, String identifier, String xApiVersion, UUID xCompanyGuid, Long locationId, final ApiCallback<ExternalUserMappingsGetMappingByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMappingByIdValidateBeforeCall(companyId, identifier, xApiVersion, xCompanyGuid, locationId, _callback);
        Type localVarReturnType = new TypeToken<ExternalUserMappingsGetMappingByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMappingByIdRequestBuilder {
        private final Long companyId;
        private final String identifier;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private Long locationId;

        private GetMappingByIdRequestBuilder(Long companyId, String identifier) {
            this.companyId = companyId;
            this.identifier = identifier;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetMappingByIdRequestBuilder
         */
        public GetMappingByIdRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetMappingByIdRequestBuilder
         */
        public GetMappingByIdRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set locationId
         * @param locationId Location ID (optional)
         * @return GetMappingByIdRequestBuilder
         */
        public GetMappingByIdRequestBuilder locationId(Long locationId) {
            this.locationId = locationId;
            return this;
        }
        
        /**
         * Build call for getMappingById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMappingByIdCall(companyId, identifier, xApiVersion, xCompanyGuid, locationId, _callback);
        }


        /**
         * Execute getMappingById request
         * @return ExternalUserMappingsGetMappingByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ExternalUserMappingsGetMappingByIdResponse execute() throws ApiException {
            ApiResponse<ExternalUserMappingsGetMappingByIdResponse> localVarResp = getMappingByIdWithHttpInfo(companyId, identifier, xApiVersion, xCompanyGuid, locationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMappingById request with HTTP info returned
         * @return ApiResponse&lt;ExternalUserMappingsGetMappingByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExternalUserMappingsGetMappingByIdResponse> executeWithHttpInfo() throws ApiException {
            return getMappingByIdWithHttpInfo(companyId, identifier, xApiVersion, xCompanyGuid, locationId);
        }

        /**
         * Execute getMappingById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExternalUserMappingsGetMappingByIdResponse> _callback) throws ApiException {
            return getMappingByIdAsync(companyId, identifier, xApiVersion, xCompanyGuid, locationId, _callback);
        }
    }

    /**
     * Retrieve User External Mapping
     * 
     * @param companyId Company ID (required)
     * @param identifier User ID. Accepted values are 7Shifts user id or external user id. Use prefix ext: for external id (required)
     * @return GetMappingByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetMappingByIdRequestBuilder getMappingById(Long companyId, String identifier) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (identifier == null) throw new IllegalArgumentException("\"identifier\" is required but got null");
            

        return new GetMappingByIdRequestBuilder(companyId, identifier);
    }
    private okhttp3.Call listCall(Long companyId, String xApiVersion, UUID xCompanyGuid, Long locationId, Long userId, String externalUserId, String modifiedSince, String cursor, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/external_user_mappings"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (externalUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_user_id", externalUserId));
        }

        if (modifiedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_since", modifiedSince));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Long companyId, String xApiVersion, UUID xCompanyGuid, Long locationId, Long userId, String externalUserId, String modifiedSince, String cursor, Long limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling list(Async)");
        }

        return listCall(companyId, xApiVersion, xCompanyGuid, locationId, userId, externalUserId, modifiedSince, cursor, limit, _callback);

    }


    private ApiResponse<ExternalUserMappingsListResponse> listWithHttpInfo(Long companyId, String xApiVersion, UUID xCompanyGuid, Long locationId, Long userId, String externalUserId, String modifiedSince, String cursor, Long limit) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, locationId, userId, externalUserId, modifiedSince, cursor, limit, null);
        Type localVarReturnType = new TypeToken<ExternalUserMappingsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Long companyId, String xApiVersion, UUID xCompanyGuid, Long locationId, Long userId, String externalUserId, String modifiedSince, String cursor, Long limit, final ApiCallback<ExternalUserMappingsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, locationId, userId, externalUserId, modifiedSince, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<ExternalUserMappingsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final Long companyId;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private Long locationId;
        private Long userId;
        private String externalUserId;
        private String modifiedSince;
        private String cursor;
        private Long limit;

        private ListRequestBuilder(Long companyId) {
            this.companyId = companyId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set locationId
         * @param locationId Location ID (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder locationId(Long locationId) {
            this.locationId = locationId;
            return this;
        }
        
        /**
         * Set userId
         * @param userId The 7shifts user ID (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder userId(Long userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set externalUserId
         * @param externalUserId The external user ID (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder externalUserId(String externalUserId) {
            this.externalUserId = externalUserId;
            return this;
        }
        
        /**
         * Set modifiedSince
         * @param modifiedSince Return records that have been modified since the specified date. Format YYYY-MM-DD (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder modifiedSince(String modifiedSince) {
            this.modifiedSince = modifiedSince;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Cursor for the next or previous page of results. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The number of results desired per page. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(companyId, xApiVersion, xCompanyGuid, locationId, userId, externalUserId, modifiedSince, cursor, limit, _callback);
        }


        /**
         * Execute list request
         * @return ExternalUserMappingsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ExternalUserMappingsListResponse execute() throws ApiException {
            ApiResponse<ExternalUserMappingsListResponse> localVarResp = listWithHttpInfo(companyId, xApiVersion, xCompanyGuid, locationId, userId, externalUserId, modifiedSince, cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;ExternalUserMappingsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExternalUserMappingsListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(companyId, xApiVersion, xCompanyGuid, locationId, userId, externalUserId, modifiedSince, cursor, limit);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExternalUserMappingsListResponse> _callback) throws ApiException {
            return listAsync(companyId, xApiVersion, xCompanyGuid, locationId, userId, externalUserId, modifiedSince, cursor, limit, _callback);
        }
    }

    /**
     * List External User Mapping
     * 
     * @param companyId Company ID (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list(Long companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new ListRequestBuilder(companyId);
    }
    private okhttp3.Call updateMappingByIdentifierCall(Long companyId, String identifier, String xApiVersion, UUID xCompanyGuid, Long locationId, ExternalUserMappingsUpdateMappingByIdentifierRequest externalUserMappingsUpdateMappingByIdentifierRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = externalUserMappingsUpdateMappingByIdentifierRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/external_user_mappings/{identifier}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMappingByIdentifierValidateBeforeCall(Long companyId, String identifier, String xApiVersion, UUID xCompanyGuid, Long locationId, ExternalUserMappingsUpdateMappingByIdentifierRequest externalUserMappingsUpdateMappingByIdentifierRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updateMappingByIdentifier(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling updateMappingByIdentifier(Async)");
        }

        return updateMappingByIdentifierCall(companyId, identifier, xApiVersion, xCompanyGuid, locationId, externalUserMappingsUpdateMappingByIdentifierRequest, _callback);

    }


    private ApiResponse<ExternalUserMappingsUpdateMappingByIdentifierResponse> updateMappingByIdentifierWithHttpInfo(Long companyId, String identifier, String xApiVersion, UUID xCompanyGuid, Long locationId, ExternalUserMappingsUpdateMappingByIdentifierRequest externalUserMappingsUpdateMappingByIdentifierRequest) throws ApiException {
        okhttp3.Call localVarCall = updateMappingByIdentifierValidateBeforeCall(companyId, identifier, xApiVersion, xCompanyGuid, locationId, externalUserMappingsUpdateMappingByIdentifierRequest, null);
        Type localVarReturnType = new TypeToken<ExternalUserMappingsUpdateMappingByIdentifierResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateMappingByIdentifierAsync(Long companyId, String identifier, String xApiVersion, UUID xCompanyGuid, Long locationId, ExternalUserMappingsUpdateMappingByIdentifierRequest externalUserMappingsUpdateMappingByIdentifierRequest, final ApiCallback<ExternalUserMappingsUpdateMappingByIdentifierResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMappingByIdentifierValidateBeforeCall(companyId, identifier, xApiVersion, xCompanyGuid, locationId, externalUserMappingsUpdateMappingByIdentifierRequest, _callback);
        Type localVarReturnType = new TypeToken<ExternalUserMappingsUpdateMappingByIdentifierResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateMappingByIdentifierRequestBuilder {
        private final Long companyId;
        private final String identifier;
        private Integer userId;
        private String externalUserId;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private Long locationId;

        private UpdateMappingByIdentifierRequestBuilder(Long companyId, String identifier) {
            this.companyId = companyId;
            this.identifier = identifier;
        }

        /**
         * Set userId
         * @param userId User ID in 7Shifts (optional)
         * @return UpdateMappingByIdentifierRequestBuilder
         */
        public UpdateMappingByIdentifierRequestBuilder userId(Integer userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set externalUserId
         * @param externalUserId User ID in External System (optional)
         * @return UpdateMappingByIdentifierRequestBuilder
         */
        public UpdateMappingByIdentifierRequestBuilder externalUserId(String externalUserId) {
            this.externalUserId = externalUserId;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return UpdateMappingByIdentifierRequestBuilder
         */
        public UpdateMappingByIdentifierRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return UpdateMappingByIdentifierRequestBuilder
         */
        public UpdateMappingByIdentifierRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set locationId
         * @param locationId Location ID (optional)
         * @return UpdateMappingByIdentifierRequestBuilder
         */
        public UpdateMappingByIdentifierRequestBuilder locationId(Long locationId) {
            this.locationId = locationId;
            return this;
        }
        
        /**
         * Build call for updateMappingByIdentifier
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ExternalUserMappingsUpdateMappingByIdentifierRequest externalUserMappingsUpdateMappingByIdentifierRequest = buildBodyParams();
            return updateMappingByIdentifierCall(companyId, identifier, xApiVersion, xCompanyGuid, locationId, externalUserMappingsUpdateMappingByIdentifierRequest, _callback);
        }

        private ExternalUserMappingsUpdateMappingByIdentifierRequest buildBodyParams() {
            ExternalUserMappingsUpdateMappingByIdentifierRequest externalUserMappingsUpdateMappingByIdentifierRequest = new ExternalUserMappingsUpdateMappingByIdentifierRequest();
            externalUserMappingsUpdateMappingByIdentifierRequest.userId(this.userId);
            externalUserMappingsUpdateMappingByIdentifierRequest.externalUserId(this.externalUserId);
            return externalUserMappingsUpdateMappingByIdentifierRequest;
        }

        /**
         * Execute updateMappingByIdentifier request
         * @return ExternalUserMappingsUpdateMappingByIdentifierResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ExternalUserMappingsUpdateMappingByIdentifierResponse execute() throws ApiException {
            ExternalUserMappingsUpdateMappingByIdentifierRequest externalUserMappingsUpdateMappingByIdentifierRequest = buildBodyParams();
            ApiResponse<ExternalUserMappingsUpdateMappingByIdentifierResponse> localVarResp = updateMappingByIdentifierWithHttpInfo(companyId, identifier, xApiVersion, xCompanyGuid, locationId, externalUserMappingsUpdateMappingByIdentifierRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateMappingByIdentifier request with HTTP info returned
         * @return ApiResponse&lt;ExternalUserMappingsUpdateMappingByIdentifierResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExternalUserMappingsUpdateMappingByIdentifierResponse> executeWithHttpInfo() throws ApiException {
            ExternalUserMappingsUpdateMappingByIdentifierRequest externalUserMappingsUpdateMappingByIdentifierRequest = buildBodyParams();
            return updateMappingByIdentifierWithHttpInfo(companyId, identifier, xApiVersion, xCompanyGuid, locationId, externalUserMappingsUpdateMappingByIdentifierRequest);
        }

        /**
         * Execute updateMappingByIdentifier request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExternalUserMappingsUpdateMappingByIdentifierResponse> _callback) throws ApiException {
            ExternalUserMappingsUpdateMappingByIdentifierRequest externalUserMappingsUpdateMappingByIdentifierRequest = buildBodyParams();
            return updateMappingByIdentifierAsync(companyId, identifier, xApiVersion, xCompanyGuid, locationId, externalUserMappingsUpdateMappingByIdentifierRequest, _callback);
        }
    }

    /**
     * Update External User Mappings
     * 
     * @param companyId Company ID (required)
     * @param identifier User ID. Accepted values are 7Shifts user id or external user id. Use prefix ext: for external id (required)
     * @return UpdateMappingByIdentifierRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMappingByIdentifierRequestBuilder updateMappingByIdentifier(Long companyId, String identifier) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (identifier == null) throw new IllegalArgumentException("\"identifier\" is required but got null");
            

        return new UpdateMappingByIdentifierRequestBuilder(companyId, identifier);
    }
}
