/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import java.util.UUID;
import com.konfigthis.client.model.UsersBulkCreateRequestInner;
import com.konfigthis.client.model.UsersBulkCreateResponse;
import com.konfigthis.client.model.UsersCreateNewUserRequest;
import com.konfigthis.client.model.UsersCreateNewUserRequestWagesInner;
import com.konfigthis.client.model.UsersCreateNewUserResponse;
import com.konfigthis.client.model.UsersDeactivateRequest;
import com.konfigthis.client.model.UsersGetUserByIdentifierResponse;
import com.konfigthis.client.model.UsersListResponse;
import com.konfigthis.client.model.UsersUpdateUserByIdentifierRequest;
import com.konfigthis.client.model.UsersUpdateUserByIdentifierResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call bulkCreateCall(Long companyId, List<UsersBulkCreateRequestInner> usersBulkCreateRequestInner, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersBulkCreateRequestInner;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/create_many_users"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkCreateValidateBeforeCall(Long companyId, List<UsersBulkCreateRequestInner> usersBulkCreateRequestInner, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling bulkCreate(Async)");
        }

        // verify the required parameter 'usersBulkCreateRequestInner' is set
        if (usersBulkCreateRequestInner == null) {
            throw new ApiException("Missing the required parameter 'usersBulkCreateRequestInner' when calling bulkCreate(Async)");
        }

        return bulkCreateCall(companyId, usersBulkCreateRequestInner, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<UsersBulkCreateResponse> bulkCreateWithHttpInfo(Long companyId, List<UsersBulkCreateRequestInner> usersBulkCreateRequestInner, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = bulkCreateValidateBeforeCall(companyId, usersBulkCreateRequestInner, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<UsersBulkCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call bulkCreateAsync(Long companyId, List<UsersBulkCreateRequestInner> usersBulkCreateRequestInner, String xApiVersion, UUID xCompanyGuid, final ApiCallback<UsersBulkCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkCreateValidateBeforeCall(companyId, usersBulkCreateRequestInner, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<UsersBulkCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BulkCreateRequestBuilder {
        private final Long companyId;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private List<UsersBulkCreateRequestInner> usersBulkCreateRequestInner;

        private BulkCreateRequestBuilder(Long companyId) {
            this.companyId = companyId;
        }

        /**
         * Set usersBulkCreateRequestInner
         * @param usersBulkCreateRequestInner  (optional)
         * @return BulkCreateRequestBuilder
         */
        public BulkCreateRequestBuilder usersBulkCreateRequestInner(List<UsersBulkCreateRequestInner> usersBulkCreateRequestInner) {
            this.usersBulkCreateRequestInner = usersBulkCreateRequestInner;
            return this;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return BulkCreateRequestBuilder
         */
        public BulkCreateRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return BulkCreateRequestBuilder
         */
        public BulkCreateRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for bulkCreate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<UsersBulkCreateRequestInner> usersBulkCreateRequestInner = buildBodyParams();
            return bulkCreateCall(companyId, usersBulkCreateRequestInner, xApiVersion, xCompanyGuid, _callback);
        }

        private List<UsersBulkCreateRequestInner> buildBodyParams() {
            return this.usersBulkCreateRequestInner;
        }

        /**
         * Execute bulkCreate request
         * @return UsersBulkCreateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public UsersBulkCreateResponse execute() throws ApiException {
            List<UsersBulkCreateRequestInner> usersBulkCreateRequestInner = buildBodyParams();
            ApiResponse<UsersBulkCreateResponse> localVarResp = bulkCreateWithHttpInfo(companyId, usersBulkCreateRequestInner, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute bulkCreate request with HTTP info returned
         * @return ApiResponse&lt;UsersBulkCreateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersBulkCreateResponse> executeWithHttpInfo() throws ApiException {
            List<UsersBulkCreateRequestInner> usersBulkCreateRequestInner = buildBodyParams();
            return bulkCreateWithHttpInfo(companyId, usersBulkCreateRequestInner, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute bulkCreate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersBulkCreateResponse> _callback) throws ApiException {
            List<UsersBulkCreateRequestInner> usersBulkCreateRequestInner = buildBodyParams();
            return bulkCreateAsync(companyId, usersBulkCreateRequestInner, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Create Many Users
     * 
     * @param companyId Company ID (required)
     * @param usersBulkCreateRequestInner  (required)
     * @return BulkCreateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public BulkCreateRequestBuilder bulkCreate(Long companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new BulkCreateRequestBuilder(companyId);
    }
    private okhttp3.Call createNewUserCall(Long companyId, UsersCreateNewUserRequest usersCreateNewUserRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersCreateNewUserRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/users"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewUserValidateBeforeCall(Long companyId, UsersCreateNewUserRequest usersCreateNewUserRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createNewUser(Async)");
        }

        // verify the required parameter 'usersCreateNewUserRequest' is set
        if (usersCreateNewUserRequest == null) {
            throw new ApiException("Missing the required parameter 'usersCreateNewUserRequest' when calling createNewUser(Async)");
        }

        return createNewUserCall(companyId, usersCreateNewUserRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<UsersCreateNewUserResponse> createNewUserWithHttpInfo(Long companyId, UsersCreateNewUserRequest usersCreateNewUserRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = createNewUserValidateBeforeCall(companyId, usersCreateNewUserRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<UsersCreateNewUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewUserAsync(Long companyId, UsersCreateNewUserRequest usersCreateNewUserRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<UsersCreateNewUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewUserValidateBeforeCall(companyId, usersCreateNewUserRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<UsersCreateNewUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewUserRequestBuilder {
        private final String firstName;
        private final String lastName;
        private final List<Integer> locationIds;
        private final List<Integer> departmentIds;
        private final String type;
        private final Long companyId;
        private String preferredFirstName;
        private String preferredLastName;
        private List<Integer> roleIds;
        private String email;
        private String mobileNumber;
        private String homeNumber;
        private String address;
        private String postalZip;
        private String city;
        private String provState;
        private Boolean inviteUser;
        private String notes;
        private LocalDate hireDate;
        private String employeeId;
        private String punchId;
        private LocalDate birthDate;
        private String language;
        private Boolean appearAsEmployee;
        private Boolean subscribeToUpdates;
        private Integer maxWeeklyHours;
        private Double wageCents;
        private String wageType;
        private List<UsersCreateNewUserRequestWagesInner> wages;
        private Integer permissionsTemplateId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private CreateNewUserRequestBuilder(String firstName, String lastName, List<Integer> locationIds, List<Integer> departmentIds, String type, Long companyId) {
            this.firstName = firstName;
            this.lastName = lastName;
            this.locationIds = locationIds;
            this.departmentIds = departmentIds;
            this.type = type;
            this.companyId = companyId;
        }

        /**
         * Set preferredFirstName
         * @param preferredFirstName An optional alternate first name (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder preferredFirstName(String preferredFirstName) {
            this.preferredFirstName = preferredFirstName;
            return this;
        }
        
        /**
         * Set preferredLastName
         * @param preferredLastName An optional alternate last name (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder preferredLastName(String preferredLastName) {
            this.preferredLastName = preferredLastName;
            return this;
        }
        
        /**
         * Set roleIds
         * @param roleIds An array of role IDs this user will be assigned to. (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder roleIds(List<Integer> roleIds) {
            this.roleIds = roleIds;
            return this;
        }
        
        /**
         * Set email
         * @param email the user&#39;s email (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set mobileNumber
         * @param mobileNumber The user&#39;s mobile phone number. Format with no spaces and include area code (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder mobileNumber(String mobileNumber) {
            this.mobileNumber = mobileNumber;
            return this;
        }
        
        /**
         * Set homeNumber
         * @param homeNumber The user&#39;s home phone number. Format with no spaces and include area code (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder homeNumber(String homeNumber) {
            this.homeNumber = homeNumber;
            return this;
        }
        
        /**
         * Set address
         * @param address The user&#39;s address (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder address(String address) {
            this.address = address;
            return this;
        }
        
        /**
         * Set postalZip
         * @param postalZip The user&#39;s postal code or zip code (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder postalZip(String postalZip) {
            this.postalZip = postalZip;
            return this;
        }
        
        /**
         * Set city
         * @param city The user&#39;s city (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set provState
         * @param provState The user&#39;s province or state (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder provState(String provState) {
            this.provState = provState;
            return this;
        }
        
        /**
         * Set inviteUser
         * @param inviteUser If true Invite the user to 7shifts (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder inviteUser(Boolean inviteUser) {
            this.inviteUser = inviteUser;
            return this;
        }
        
        /**
         * Set notes
         * @param notes Notes associated with this user (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder notes(String notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Set hireDate
         * @param hireDate The hire date of this user. Format YYYY-MM-DD (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder hireDate(LocalDate hireDate) {
            this.hireDate = hireDate;
            return this;
        }
        
        /**
         * Set employeeId
         * @param employeeId Either an employee ID or an ID assigned by your payroll provider that is used in your payroll export (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set punchId
         * @param punchId The punch ID they punch in/out with. If no value is provided a new one will be created (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder punchId(String punchId) {
            this.punchId = punchId;
            return this;
        }
        
        /**
         * Set birthDate
         * @param birthDate The user&#39;s birthdate. Format YYYY-MM-DD (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder birthDate(LocalDate birthDate) {
            this.birthDate = birthDate;
            return this;
        }
        
        /**
         * Set language
         * @param language The user&#39;s preferred language. Default value is en (optional, default to en)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set appearAsEmployee
         * @param appearAsEmployee User should appear in the system as an employee. Applies to admin users only (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder appearAsEmployee(Boolean appearAsEmployee) {
            this.appearAsEmployee = appearAsEmployee;
            return this;
        }
        
        /**
         * Set subscribeToUpdates
         * @param subscribeToUpdates Subscribe this user to updates from 7shifts. This includes announcing new features for 7shifts (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder subscribeToUpdates(Boolean subscribeToUpdates) {
            this.subscribeToUpdates = subscribeToUpdates;
            return this;
        }
        
        /**
         * Set maxWeeklyHours
         * @param maxWeeklyHours The maximum weekly hours this user is set to work (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder maxWeeklyHours(Integer maxWeeklyHours) {
            this.maxWeeklyHours = maxWeeklyHours;
            return this;
        }
        
        /**
         * Set wageCents
         * @param wageCents  (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder wageCents(Double wageCents) {
            this.wageCents = wageCents;
            return this;
        }
        

        /**
         * Set wageCents
         * @param wageCents  (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder wageCents(Integer wageCents) {
            this.wageCents = wageCents.doubleValue();
            return this;
        }
        
        /**
         * Set wageType
         * @param wageType The wage type (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder wageType(String wageType) {
            this.wageType = wageType;
            return this;
        }
        
        /**
         * Set wages
         * @param wages An array of Wages that will be set to the assigned User&#39;s roles (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder wages(List<UsersCreateNewUserRequestWagesInner> wages) {
            this.wages = wages;
            return this;
        }
        
        /**
         * Set permissionsTemplateId
         * @param permissionsTemplateId Id of a permissions template the user will be assigned to and granted permissions from. (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder permissionsTemplateId(Integer permissionsTemplateId) {
            this.permissionsTemplateId = permissionsTemplateId;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for createNewUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersCreateNewUserRequest usersCreateNewUserRequest = buildBodyParams();
            return createNewUserCall(companyId, usersCreateNewUserRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private UsersCreateNewUserRequest buildBodyParams() {
            UsersCreateNewUserRequest usersCreateNewUserRequest = new UsersCreateNewUserRequest();
            usersCreateNewUserRequest.firstName(this.firstName);
            usersCreateNewUserRequest.lastName(this.lastName);
            usersCreateNewUserRequest.preferredFirstName(this.preferredFirstName);
            usersCreateNewUserRequest.preferredLastName(this.preferredLastName);
            usersCreateNewUserRequest.locationIds(this.locationIds);
            usersCreateNewUserRequest.departmentIds(this.departmentIds);
            usersCreateNewUserRequest.roleIds(this.roleIds);
            usersCreateNewUserRequest.email(this.email);
            usersCreateNewUserRequest.mobileNumber(this.mobileNumber);
            usersCreateNewUserRequest.homeNumber(this.homeNumber);
            usersCreateNewUserRequest.address(this.address);
            usersCreateNewUserRequest.postalZip(this.postalZip);
            usersCreateNewUserRequest.city(this.city);
            usersCreateNewUserRequest.provState(this.provState);
            usersCreateNewUserRequest.inviteUser(this.inviteUser);
            usersCreateNewUserRequest.notes(this.notes);
            usersCreateNewUserRequest.hireDate(this.hireDate);
            if (this.type != null)
            usersCreateNewUserRequest.type(UsersCreateNewUserRequest.TypeEnum.fromValue(this.type));
            usersCreateNewUserRequest.employeeId(this.employeeId);
            usersCreateNewUserRequest.punchId(this.punchId);
            usersCreateNewUserRequest.birthDate(this.birthDate);
            if (this.language != null)
            usersCreateNewUserRequest.language(UsersCreateNewUserRequest.LanguageEnum.fromValue(this.language));
            usersCreateNewUserRequest.appearAsEmployee(this.appearAsEmployee);
            usersCreateNewUserRequest.subscribeToUpdates(this.subscribeToUpdates);
            usersCreateNewUserRequest.maxWeeklyHours(this.maxWeeklyHours);
            usersCreateNewUserRequest.wageCents(this.wageCents);
            if (this.wageType != null)
            usersCreateNewUserRequest.wageType(UsersCreateNewUserRequest.WageTypeEnum.fromValue(this.wageType));
            usersCreateNewUserRequest.wages(this.wages);
            usersCreateNewUserRequest.permissionsTemplateId(this.permissionsTemplateId);
            return usersCreateNewUserRequest;
        }

        /**
         * Execute createNewUser request
         * @return UsersCreateNewUserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public UsersCreateNewUserResponse execute() throws ApiException {
            UsersCreateNewUserRequest usersCreateNewUserRequest = buildBodyParams();
            ApiResponse<UsersCreateNewUserResponse> localVarResp = createNewUserWithHttpInfo(companyId, usersCreateNewUserRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewUser request with HTTP info returned
         * @return ApiResponse&lt;UsersCreateNewUserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersCreateNewUserResponse> executeWithHttpInfo() throws ApiException {
            UsersCreateNewUserRequest usersCreateNewUserRequest = buildBodyParams();
            return createNewUserWithHttpInfo(companyId, usersCreateNewUserRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute createNewUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersCreateNewUserResponse> _callback) throws ApiException {
            UsersCreateNewUserRequest usersCreateNewUserRequest = buildBodyParams();
            return createNewUserAsync(companyId, usersCreateNewUserRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Create User
     * 
     * @param companyId Company ID (required)
     * @param usersCreateNewUserRequest  (required)
     * @return CreateNewUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewUserRequestBuilder createNewUser(String firstName, String lastName, List<Integer> locationIds, List<Integer> departmentIds, String type, Long companyId) throws IllegalArgumentException {
        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            

        if (lastName == null) throw new IllegalArgumentException("\"lastName\" is required but got null");
            

        if (locationIds == null) throw new IllegalArgumentException("\"locationIds\" is required but got null");
        
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new CreateNewUserRequestBuilder(firstName, lastName, locationIds, departmentIds, type, companyId);
    }
    private okhttp3.Call deactivateCall(Long companyId, Long identifier, String xApiVersion, UUID xCompanyGuid, UsersDeactivateRequest usersDeactivateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersDeactivateRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/users/{identifier}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivateValidateBeforeCall(Long companyId, Long identifier, String xApiVersion, UUID xCompanyGuid, UsersDeactivateRequest usersDeactivateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling deactivate(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling deactivate(Async)");
        }

        return deactivateCall(companyId, identifier, xApiVersion, xCompanyGuid, usersDeactivateRequest, _callback);

    }


    private ApiResponse<Void> deactivateWithHttpInfo(Long companyId, Long identifier, String xApiVersion, UUID xCompanyGuid, UsersDeactivateRequest usersDeactivateRequest) throws ApiException {
        okhttp3.Call localVarCall = deactivateValidateBeforeCall(companyId, identifier, xApiVersion, xCompanyGuid, usersDeactivateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deactivateAsync(Long companyId, Long identifier, String xApiVersion, UUID xCompanyGuid, UsersDeactivateRequest usersDeactivateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivateValidateBeforeCall(companyId, identifier, xApiVersion, xCompanyGuid, usersDeactivateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeactivateRequestBuilder {
        private final String inactiveReason;
        private final Long companyId;
        private final Long identifier;
        private String inactiveComments;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private DeactivateRequestBuilder(String inactiveReason, Long companyId, Long identifier) {
            this.inactiveReason = inactiveReason;
            this.companyId = companyId;
            this.identifier = identifier;
        }

        /**
         * Set inactiveComments
         * @param inactiveComments Comments related to this user deletion. (optional)
         * @return DeactivateRequestBuilder
         */
        public DeactivateRequestBuilder inactiveComments(String inactiveComments) {
            this.inactiveComments = inactiveComments;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return DeactivateRequestBuilder
         */
        public DeactivateRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return DeactivateRequestBuilder
         */
        public DeactivateRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for deactivate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersDeactivateRequest usersDeactivateRequest = buildBodyParams();
            return deactivateCall(companyId, identifier, xApiVersion, xCompanyGuid, usersDeactivateRequest, _callback);
        }

        private UsersDeactivateRequest buildBodyParams() {
            UsersDeactivateRequest usersDeactivateRequest = new UsersDeactivateRequest();
            usersDeactivateRequest.inactiveReason(this.inactiveReason);
            usersDeactivateRequest.inactiveComments(this.inactiveComments);
            return usersDeactivateRequest;
        }

        /**
         * Execute deactivate request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UsersDeactivateRequest usersDeactivateRequest = buildBodyParams();
            deactivateWithHttpInfo(companyId, identifier, xApiVersion, xCompanyGuid, usersDeactivateRequest);
        }

        /**
         * Execute deactivate request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UsersDeactivateRequest usersDeactivateRequest = buildBodyParams();
            return deactivateWithHttpInfo(companyId, identifier, xApiVersion, xCompanyGuid, usersDeactivateRequest);
        }

        /**
         * Execute deactivate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UsersDeactivateRequest usersDeactivateRequest = buildBodyParams();
            return deactivateAsync(companyId, identifier, xApiVersion, xCompanyGuid, usersDeactivateRequest, _callback);
        }
    }

    /**
     * Deactivate User
     * 
     * @param companyId Company ID (required)
     * @param identifier User ID (required)
     * @return DeactivateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeactivateRequestBuilder deactivate(String inactiveReason, Long companyId, Long identifier) throws IllegalArgumentException {
        
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (identifier == null) throw new IllegalArgumentException("\"identifier\" is required but got null");
        return new DeactivateRequestBuilder(inactiveReason, companyId, identifier);
    }
    private okhttp3.Call getUserByIdentifierCall(Long companyId, String identifier, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/users/{identifier}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserByIdentifierValidateBeforeCall(Long companyId, String identifier, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getUserByIdentifier(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getUserByIdentifier(Async)");
        }

        return getUserByIdentifierCall(companyId, identifier, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<UsersGetUserByIdentifierResponse> getUserByIdentifierWithHttpInfo(Long companyId, String identifier, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = getUserByIdentifierValidateBeforeCall(companyId, identifier, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<UsersGetUserByIdentifierResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserByIdentifierAsync(Long companyId, String identifier, String xApiVersion, UUID xCompanyGuid, final ApiCallback<UsersGetUserByIdentifierResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserByIdentifierValidateBeforeCall(companyId, identifier, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<UsersGetUserByIdentifierResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserByIdentifierRequestBuilder {
        private final Long companyId;
        private final String identifier;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private GetUserByIdentifierRequestBuilder(Long companyId, String identifier) {
            this.companyId = companyId;
            this.identifier = identifier;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetUserByIdentifierRequestBuilder
         */
        public GetUserByIdentifierRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetUserByIdentifierRequestBuilder
         */
        public GetUserByIdentifierRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for getUserByIdentifier
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserByIdentifierCall(companyId, identifier, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute getUserByIdentifier request
         * @return UsersGetUserByIdentifierResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public UsersGetUserByIdentifierResponse execute() throws ApiException {
            ApiResponse<UsersGetUserByIdentifierResponse> localVarResp = getUserByIdentifierWithHttpInfo(companyId, identifier, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserByIdentifier request with HTTP info returned
         * @return ApiResponse&lt;UsersGetUserByIdentifierResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersGetUserByIdentifierResponse> executeWithHttpInfo() throws ApiException {
            return getUserByIdentifierWithHttpInfo(companyId, identifier, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute getUserByIdentifier request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersGetUserByIdentifierResponse> _callback) throws ApiException {
            return getUserByIdentifierAsync(companyId, identifier, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Retrieve User
     * 
     * @param companyId Company ID (required)
     * @param identifier User ID. Accepted values are 7shifts user id or punch id. Use prefix punch: for punch id (required)
     * @return GetUserByIdentifierRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetUserByIdentifierRequestBuilder getUserByIdentifier(Long companyId, String identifier) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (identifier == null) throw new IllegalArgumentException("\"identifier\" is required but got null");
            

        return new GetUserByIdentifierRequestBuilder(companyId, identifier);
    }
    private okhttp3.Call listCall(Long companyId, String xApiVersion, UUID xCompanyGuid, String modifiedSince, Integer locationId, Integer departmentId, Integer roleId, String status, String name, String sortBy, String cursor, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/users"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (modifiedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_since", modifiedSince));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (departmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("department_id", departmentId));
        }

        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id", roleId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Long companyId, String xApiVersion, UUID xCompanyGuid, String modifiedSince, Integer locationId, Integer departmentId, Integer roleId, String status, String name, String sortBy, String cursor, Long limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling list(Async)");
        }

        return listCall(companyId, xApiVersion, xCompanyGuid, modifiedSince, locationId, departmentId, roleId, status, name, sortBy, cursor, limit, _callback);

    }


    private ApiResponse<UsersListResponse> listWithHttpInfo(Long companyId, String xApiVersion, UUID xCompanyGuid, String modifiedSince, Integer locationId, Integer departmentId, Integer roleId, String status, String name, String sortBy, String cursor, Long limit) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, modifiedSince, locationId, departmentId, roleId, status, name, sortBy, cursor, limit, null);
        Type localVarReturnType = new TypeToken<UsersListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Long companyId, String xApiVersion, UUID xCompanyGuid, String modifiedSince, Integer locationId, Integer departmentId, Integer roleId, String status, String name, String sortBy, String cursor, Long limit, final ApiCallback<UsersListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, modifiedSince, locationId, departmentId, roleId, status, name, sortBy, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<UsersListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final Long companyId;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private String modifiedSince;
        private Integer locationId;
        private Integer departmentId;
        private Integer roleId;
        private String status;
        private String name;
        private String sortBy;
        private String cursor;
        private Long limit;

        private ListRequestBuilder(Long companyId) {
            this.companyId = companyId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set modifiedSince
         * @param modifiedSince Return users that have been modified since the specified date. Format YYYY-MM-DD (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder modifiedSince(String modifiedSince) {
            this.modifiedSince = modifiedSince;
            return this;
        }
        
        /**
         * Set locationId
         * @param locationId Location ID (cannot be used in conjunction with Department ID and Role ID) (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder locationId(Integer locationId) {
            this.locationId = locationId;
            return this;
        }
        
        /**
         * Set departmentId
         * @param departmentId Department ID (cannot be used in conjunction with Location ID and Role ID) (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder departmentId(Integer departmentId) {
            this.departmentId = departmentId;
            return this;
        }
        
        /**
         * Set roleId
         * @param roleId Role ID (cannot be used in conjunction with Location ID and Department ID) (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder roleId(Integer roleId) {
            this.roleId = roleId;
            return this;
        }
        
        /**
         * Set status
         * @param status The user status (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set name
         * @param name Filter by partial or full employee name (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Sort the paginated result by the given field and direction. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Cursor for the next or previous page of results. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The number of results desired per page. (optional, default to 100)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(companyId, xApiVersion, xCompanyGuid, modifiedSince, locationId, departmentId, roleId, status, name, sortBy, cursor, limit, _callback);
        }


        /**
         * Execute list request
         * @return UsersListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public UsersListResponse execute() throws ApiException {
            ApiResponse<UsersListResponse> localVarResp = listWithHttpInfo(companyId, xApiVersion, xCompanyGuid, modifiedSince, locationId, departmentId, roleId, status, name, sortBy, cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;UsersListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(companyId, xApiVersion, xCompanyGuid, modifiedSince, locationId, departmentId, roleId, status, name, sortBy, cursor, limit);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersListResponse> _callback) throws ApiException {
            return listAsync(companyId, xApiVersion, xCompanyGuid, modifiedSince, locationId, departmentId, roleId, status, name, sortBy, cursor, limit, _callback);
        }
    }

    /**
     * List Users
     * 
     * @param companyId Company ID (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list(Long companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new ListRequestBuilder(companyId);
    }
    private okhttp3.Call updateUserByIdentifierCall(Long companyId, Long identifier, UsersUpdateUserByIdentifierRequest usersUpdateUserByIdentifierRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersUpdateUserByIdentifierRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/users/{identifier}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserByIdentifierValidateBeforeCall(Long companyId, Long identifier, UsersUpdateUserByIdentifierRequest usersUpdateUserByIdentifierRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updateUserByIdentifier(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling updateUserByIdentifier(Async)");
        }

        // verify the required parameter 'usersUpdateUserByIdentifierRequest' is set
        if (usersUpdateUserByIdentifierRequest == null) {
            throw new ApiException("Missing the required parameter 'usersUpdateUserByIdentifierRequest' when calling updateUserByIdentifier(Async)");
        }

        return updateUserByIdentifierCall(companyId, identifier, usersUpdateUserByIdentifierRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<UsersUpdateUserByIdentifierResponse> updateUserByIdentifierWithHttpInfo(Long companyId, Long identifier, UsersUpdateUserByIdentifierRequest usersUpdateUserByIdentifierRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = updateUserByIdentifierValidateBeforeCall(companyId, identifier, usersUpdateUserByIdentifierRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<UsersUpdateUserByIdentifierResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateUserByIdentifierAsync(Long companyId, Long identifier, UsersUpdateUserByIdentifierRequest usersUpdateUserByIdentifierRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<UsersUpdateUserByIdentifierResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserByIdentifierValidateBeforeCall(companyId, identifier, usersUpdateUserByIdentifierRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<UsersUpdateUserByIdentifierResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateUserByIdentifierRequestBuilder {
        private final Long companyId;
        private final Long identifier;
        private String firstName;
        private String lastName;
        private String preferredFirstName;
        private String preferredLastName;
        private String email;
        private String mobileNumber;
        private String homeNumber;
        private String address;
        private String postalZip;
        private String city;
        private String provState;
        private String notes;
        private LocalDate hireDate;
        private String type;
        private String employeeId;
        private String punchId;
        private LocalDate birthDate;
        private String language;
        private Boolean appearAsEmployee;
        private Boolean subscribeToUpdates;
        private Integer maxWeeklyHours;
        private Boolean active;
        private String pronouns;
        private Integer permissionsTemplateId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private UpdateUserByIdentifierRequestBuilder(Long companyId, Long identifier) {
            this.companyId = companyId;
            this.identifier = identifier;
        }

        /**
         * Set firstName
         * @param firstName The user&#39;s first name (optional)
         * @return UpdateUserByIdentifierRequestBuilder
         */
        public UpdateUserByIdentifierRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The user&#39;s last name (optional)
         * @return UpdateUserByIdentifierRequestBuilder
         */
        public UpdateUserByIdentifierRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set preferredFirstName
         * @param preferredFirstName An optional alternate first name (optional)
         * @return UpdateUserByIdentifierRequestBuilder
         */
        public UpdateUserByIdentifierRequestBuilder preferredFirstName(String preferredFirstName) {
            this.preferredFirstName = preferredFirstName;
            return this;
        }
        
        /**
         * Set preferredLastName
         * @param preferredLastName An optional alternate last name (optional)
         * @return UpdateUserByIdentifierRequestBuilder
         */
        public UpdateUserByIdentifierRequestBuilder preferredLastName(String preferredLastName) {
            this.preferredLastName = preferredLastName;
            return this;
        }
        
        /**
         * Set email
         * @param email the user&#39;s email (optional)
         * @return UpdateUserByIdentifierRequestBuilder
         */
        public UpdateUserByIdentifierRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set mobileNumber
         * @param mobileNumber The user&#39;s mobile phone number. Format with no spaces and include area code (optional)
         * @return UpdateUserByIdentifierRequestBuilder
         */
        public UpdateUserByIdentifierRequestBuilder mobileNumber(String mobileNumber) {
            this.mobileNumber = mobileNumber;
            return this;
        }
        
        /**
         * Set homeNumber
         * @param homeNumber The user&#39;s home phone number. Format with no spaces and include area code (optional)
         * @return UpdateUserByIdentifierRequestBuilder
         */
        public UpdateUserByIdentifierRequestBuilder homeNumber(String homeNumber) {
            this.homeNumber = homeNumber;
            return this;
        }
        
        /**
         * Set address
         * @param address The user&#39;s address (optional)
         * @return UpdateUserByIdentifierRequestBuilder
         */
        public UpdateUserByIdentifierRequestBuilder address(String address) {
            this.address = address;
            return this;
        }
        
        /**
         * Set postalZip
         * @param postalZip The user&#39;s postal code or zip code (optional)
         * @return UpdateUserByIdentifierRequestBuilder
         */
        public UpdateUserByIdentifierRequestBuilder postalZip(String postalZip) {
            this.postalZip = postalZip;
            return this;
        }
        
        /**
         * Set city
         * @param city The user&#39;s city (optional)
         * @return UpdateUserByIdentifierRequestBuilder
         */
        public UpdateUserByIdentifierRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set provState
         * @param provState The user&#39;s province or state (optional)
         * @return UpdateUserByIdentifierRequestBuilder
         */
        public UpdateUserByIdentifierRequestBuilder provState(String provState) {
            this.provState = provState;
            return this;
        }
        
        /**
         * Set notes
         * @param notes Notes associated with this user (optional)
         * @return UpdateUserByIdentifierRequestBuilder
         */
        public UpdateUserByIdentifierRequestBuilder notes(String notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Set hireDate
         * @param hireDate The hire date of this user. Format YYYY-MM-DD (optional)
         * @return UpdateUserByIdentifierRequestBuilder
         */
        public UpdateUserByIdentifierRequestBuilder hireDate(LocalDate hireDate) {
            this.hireDate = hireDate;
            return this;
        }
        
        /**
         * Set type
         * @param type The type of this user (optional)
         * @return UpdateUserByIdentifierRequestBuilder
         */
        public UpdateUserByIdentifierRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set employeeId
         * @param employeeId Either an employee ID or an ID assigned by your payroll provider that is used in your payroll export (optional)
         * @return UpdateUserByIdentifierRequestBuilder
         */
        public UpdateUserByIdentifierRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set punchId
         * @param punchId The punch ID they punch in/out with. If no value is provided a new one will be created (optional)
         * @return UpdateUserByIdentifierRequestBuilder
         */
        public UpdateUserByIdentifierRequestBuilder punchId(String punchId) {
            this.punchId = punchId;
            return this;
        }
        
        /**
         * Set birthDate
         * @param birthDate The user&#39;s birthdate. Format YYYY-MM-DD (optional)
         * @return UpdateUserByIdentifierRequestBuilder
         */
        public UpdateUserByIdentifierRequestBuilder birthDate(LocalDate birthDate) {
            this.birthDate = birthDate;
            return this;
        }
        
        /**
         * Set language
         * @param language The user&#39;s preferred language. Default value is en (optional, default to en)
         * @return UpdateUserByIdentifierRequestBuilder
         */
        public UpdateUserByIdentifierRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set appearAsEmployee
         * @param appearAsEmployee User should appear in the system as an employee. Applies to admin users only (optional)
         * @return UpdateUserByIdentifierRequestBuilder
         */
        public UpdateUserByIdentifierRequestBuilder appearAsEmployee(Boolean appearAsEmployee) {
            this.appearAsEmployee = appearAsEmployee;
            return this;
        }
        
        /**
         * Set subscribeToUpdates
         * @param subscribeToUpdates Subscribe this user to updates from 7shifts. This includes announcing new features for 7shifts (optional)
         * @return UpdateUserByIdentifierRequestBuilder
         */
        public UpdateUserByIdentifierRequestBuilder subscribeToUpdates(Boolean subscribeToUpdates) {
            this.subscribeToUpdates = subscribeToUpdates;
            return this;
        }
        
        /**
         * Set maxWeeklyHours
         * @param maxWeeklyHours The maximum weekly hours this user is set to work (optional)
         * @return UpdateUserByIdentifierRequestBuilder
         */
        public UpdateUserByIdentifierRequestBuilder maxWeeklyHours(Integer maxWeeklyHours) {
            this.maxWeeklyHours = maxWeeklyHours;
            return this;
        }
        
        /**
         * Set active
         * @param active User status. If false the user is unable to login (optional)
         * @return UpdateUserByIdentifierRequestBuilder
         */
        public UpdateUserByIdentifierRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set pronouns
         * @param pronouns The user&#39;s pronouns (optional)
         * @return UpdateUserByIdentifierRequestBuilder
         */
        public UpdateUserByIdentifierRequestBuilder pronouns(String pronouns) {
            this.pronouns = pronouns;
            return this;
        }
        
        /**
         * Set permissionsTemplateId
         * @param permissionsTemplateId Permission Template ID the user is assigned to (optional)
         * @return UpdateUserByIdentifierRequestBuilder
         */
        public UpdateUserByIdentifierRequestBuilder permissionsTemplateId(Integer permissionsTemplateId) {
            this.permissionsTemplateId = permissionsTemplateId;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return UpdateUserByIdentifierRequestBuilder
         */
        public UpdateUserByIdentifierRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return UpdateUserByIdentifierRequestBuilder
         */
        public UpdateUserByIdentifierRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for updateUserByIdentifier
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersUpdateUserByIdentifierRequest usersUpdateUserByIdentifierRequest = buildBodyParams();
            return updateUserByIdentifierCall(companyId, identifier, usersUpdateUserByIdentifierRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private UsersUpdateUserByIdentifierRequest buildBodyParams() {
            UsersUpdateUserByIdentifierRequest usersUpdateUserByIdentifierRequest = new UsersUpdateUserByIdentifierRequest();
            usersUpdateUserByIdentifierRequest.firstName(this.firstName);
            usersUpdateUserByIdentifierRequest.lastName(this.lastName);
            usersUpdateUserByIdentifierRequest.preferredFirstName(this.preferredFirstName);
            usersUpdateUserByIdentifierRequest.preferredLastName(this.preferredLastName);
            usersUpdateUserByIdentifierRequest.email(this.email);
            usersUpdateUserByIdentifierRequest.mobileNumber(this.mobileNumber);
            usersUpdateUserByIdentifierRequest.homeNumber(this.homeNumber);
            usersUpdateUserByIdentifierRequest.address(this.address);
            usersUpdateUserByIdentifierRequest.postalZip(this.postalZip);
            usersUpdateUserByIdentifierRequest.city(this.city);
            usersUpdateUserByIdentifierRequest.provState(this.provState);
            usersUpdateUserByIdentifierRequest.notes(this.notes);
            usersUpdateUserByIdentifierRequest.hireDate(this.hireDate);
            if (this.type != null)
            usersUpdateUserByIdentifierRequest.type(UsersUpdateUserByIdentifierRequest.TypeEnum.fromValue(this.type));
            usersUpdateUserByIdentifierRequest.employeeId(this.employeeId);
            usersUpdateUserByIdentifierRequest.punchId(this.punchId);
            usersUpdateUserByIdentifierRequest.birthDate(this.birthDate);
            if (this.language != null)
            usersUpdateUserByIdentifierRequest.language(UsersUpdateUserByIdentifierRequest.LanguageEnum.fromValue(this.language));
            usersUpdateUserByIdentifierRequest.appearAsEmployee(this.appearAsEmployee);
            usersUpdateUserByIdentifierRequest.subscribeToUpdates(this.subscribeToUpdates);
            usersUpdateUserByIdentifierRequest.maxWeeklyHours(this.maxWeeklyHours);
            usersUpdateUserByIdentifierRequest.active(this.active);
            usersUpdateUserByIdentifierRequest.pronouns(this.pronouns);
            usersUpdateUserByIdentifierRequest.permissionsTemplateId(this.permissionsTemplateId);
            return usersUpdateUserByIdentifierRequest;
        }

        /**
         * Execute updateUserByIdentifier request
         * @return UsersUpdateUserByIdentifierResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public UsersUpdateUserByIdentifierResponse execute() throws ApiException {
            UsersUpdateUserByIdentifierRequest usersUpdateUserByIdentifierRequest = buildBodyParams();
            ApiResponse<UsersUpdateUserByIdentifierResponse> localVarResp = updateUserByIdentifierWithHttpInfo(companyId, identifier, usersUpdateUserByIdentifierRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateUserByIdentifier request with HTTP info returned
         * @return ApiResponse&lt;UsersUpdateUserByIdentifierResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersUpdateUserByIdentifierResponse> executeWithHttpInfo() throws ApiException {
            UsersUpdateUserByIdentifierRequest usersUpdateUserByIdentifierRequest = buildBodyParams();
            return updateUserByIdentifierWithHttpInfo(companyId, identifier, usersUpdateUserByIdentifierRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute updateUserByIdentifier request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersUpdateUserByIdentifierResponse> _callback) throws ApiException {
            UsersUpdateUserByIdentifierRequest usersUpdateUserByIdentifierRequest = buildBodyParams();
            return updateUserByIdentifierAsync(companyId, identifier, usersUpdateUserByIdentifierRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Update User
     * 
     * @param companyId Company ID (required)
     * @param identifier User ID (required)
     * @param usersUpdateUserByIdentifierRequest  (required)
     * @return UpdateUserByIdentifierRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUserByIdentifierRequestBuilder updateUserByIdentifier(Long companyId, Long identifier) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (identifier == null) throw new IllegalArgumentException("\"identifier\" is required but got null");
        return new UpdateUserByIdentifierRequestBuilder(companyId, identifier);
    }
}
