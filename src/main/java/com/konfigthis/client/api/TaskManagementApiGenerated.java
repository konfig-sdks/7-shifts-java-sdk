/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.TaskManagementClearTaskRequest;
import com.konfigthis.client.model.TaskManagementClearTaskResponse;
import com.konfigthis.client.model.TaskManagementCreateTaskListTemplateRequest;
import com.konfigthis.client.model.TaskManagementCreateTaskListTemplateRequestAssignmentsInner;
import com.konfigthis.client.model.TaskManagementCreateTaskListTemplateRequestTaskTemplatesInner;
import com.konfigthis.client.model.TaskManagementCreateTaskListTemplateRequestTimeFrame;
import com.konfigthis.client.model.TaskManagementCreateTaskListTemplateResponse;
import com.konfigthis.client.model.TaskManagementCreateTaskTagsRequest;
import com.konfigthis.client.model.TaskManagementCreateTaskTagsRequestTagsInner;
import com.konfigthis.client.model.TaskManagementDeleteTaskTagsRequest;
import com.konfigthis.client.model.TaskManagementEditTaskListTemplateRequest;
import com.konfigthis.client.model.TaskManagementEditTaskListTemplateRequestTaskTemplatesInner;
import com.konfigthis.client.model.TaskManagementEditTaskListTemplateRequestTimeFrame;
import com.konfigthis.client.model.TaskManagementEditTaskListTemplateResponse;
import com.konfigthis.client.model.TaskManagementGetSettingsResponse;
import com.konfigthis.client.model.TaskManagementGetTaskListResponse;
import com.konfigthis.client.model.TaskManagementGetTaskListTemplateResponse;
import com.konfigthis.client.model.TaskManagementGetTaskListTemplates200Response;
import com.konfigthis.client.model.TaskManagementGetTaskListTemplatesResponse;
import com.konfigthis.client.model.TaskManagementGetTaskListsResponse;
import com.konfigthis.client.model.TaskManagementListTaskListsSummary200Response;
import com.konfigthis.client.model.TaskManagementListTaskListsSummaryResponse;
import com.konfigthis.client.model.TaskManagementMarkCompleteRequest;
import com.konfigthis.client.model.TaskManagementMarkCompleteResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TaskManagementApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TaskManagementApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TaskManagementApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call clearTaskCall(Long companyId, Long listId, Long taskId, TaskManagementClearTaskRequest taskManagementClearTaskRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taskManagementClearTaskRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/task_lists/{list_id}/tasks/{task_id}/clear"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clearTaskValidateBeforeCall(Long companyId, Long listId, Long taskId, TaskManagementClearTaskRequest taskManagementClearTaskRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling clearTask(Async)");
        }

        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling clearTask(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling clearTask(Async)");
        }

        // verify the required parameter 'taskManagementClearTaskRequest' is set
        if (taskManagementClearTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'taskManagementClearTaskRequest' when calling clearTask(Async)");
        }

        return clearTaskCall(companyId, listId, taskId, taskManagementClearTaskRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<TaskManagementClearTaskResponse> clearTaskWithHttpInfo(Long companyId, Long listId, Long taskId, TaskManagementClearTaskRequest taskManagementClearTaskRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = clearTaskValidateBeforeCall(companyId, listId, taskId, taskManagementClearTaskRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<TaskManagementClearTaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call clearTaskAsync(Long companyId, Long listId, Long taskId, TaskManagementClearTaskRequest taskManagementClearTaskRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<TaskManagementClearTaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clearTaskValidateBeforeCall(companyId, listId, taskId, taskManagementClearTaskRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<TaskManagementClearTaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ClearTaskRequestBuilder {
        private final Integer userId;
        private final Long companyId;
        private final Long listId;
        private final Long taskId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private ClearTaskRequestBuilder(Integer userId, Long companyId, Long listId, Long taskId) {
            this.userId = userId;
            this.companyId = companyId;
            this.listId = listId;
            this.taskId = taskId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return ClearTaskRequestBuilder
         */
        public ClearTaskRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return ClearTaskRequestBuilder
         */
        public ClearTaskRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for clearTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Clear a task </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TaskManagementClearTaskRequest taskManagementClearTaskRequest = buildBodyParams();
            return clearTaskCall(companyId, listId, taskId, taskManagementClearTaskRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private TaskManagementClearTaskRequest buildBodyParams() {
            TaskManagementClearTaskRequest taskManagementClearTaskRequest = new TaskManagementClearTaskRequest();
            taskManagementClearTaskRequest.userId(this.userId);
            return taskManagementClearTaskRequest;
        }

        /**
         * Execute clearTask request
         * @return TaskManagementClearTaskResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Clear a task </td><td>  -  </td></tr>
         </table>
         */
        public TaskManagementClearTaskResponse execute() throws ApiException {
            TaskManagementClearTaskRequest taskManagementClearTaskRequest = buildBodyParams();
            ApiResponse<TaskManagementClearTaskResponse> localVarResp = clearTaskWithHttpInfo(companyId, listId, taskId, taskManagementClearTaskRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute clearTask request with HTTP info returned
         * @return ApiResponse&lt;TaskManagementClearTaskResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Clear a task </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaskManagementClearTaskResponse> executeWithHttpInfo() throws ApiException {
            TaskManagementClearTaskRequest taskManagementClearTaskRequest = buildBodyParams();
            return clearTaskWithHttpInfo(companyId, listId, taskId, taskManagementClearTaskRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute clearTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Clear a task </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaskManagementClearTaskResponse> _callback) throws ApiException {
            TaskManagementClearTaskRequest taskManagementClearTaskRequest = buildBodyParams();
            return clearTaskAsync(companyId, listId, taskId, taskManagementClearTaskRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Clear task
     * 
     * @param companyId Company ID (required)
     * @param listId Task List ID (required)
     * @param taskId Task ID (required)
     * @param taskManagementClearTaskRequest  (required)
     * @return ClearTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Clear a task </td><td>  -  </td></tr>
     </table>
     */
    public ClearTaskRequestBuilder clearTask(Integer userId, Long companyId, Long listId, Long taskId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
        return new ClearTaskRequestBuilder(userId, companyId, listId, taskId);
    }
    private okhttp3.Call createTaskListTemplateCall(Long companyId, TaskManagementCreateTaskListTemplateRequest taskManagementCreateTaskListTemplateRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taskManagementCreateTaskListTemplateRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/task_list_templates"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTaskListTemplateValidateBeforeCall(Long companyId, TaskManagementCreateTaskListTemplateRequest taskManagementCreateTaskListTemplateRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createTaskListTemplate(Async)");
        }

        // verify the required parameter 'taskManagementCreateTaskListTemplateRequest' is set
        if (taskManagementCreateTaskListTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'taskManagementCreateTaskListTemplateRequest' when calling createTaskListTemplate(Async)");
        }

        return createTaskListTemplateCall(companyId, taskManagementCreateTaskListTemplateRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<TaskManagementCreateTaskListTemplateResponse> createTaskListTemplateWithHttpInfo(Long companyId, TaskManagementCreateTaskListTemplateRequest taskManagementCreateTaskListTemplateRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = createTaskListTemplateValidateBeforeCall(companyId, taskManagementCreateTaskListTemplateRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<TaskManagementCreateTaskListTemplateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTaskListTemplateAsync(Long companyId, TaskManagementCreateTaskListTemplateRequest taskManagementCreateTaskListTemplateRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<TaskManagementCreateTaskListTemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTaskListTemplateValidateBeforeCall(companyId, taskManagementCreateTaskListTemplateRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<TaskManagementCreateTaskListTemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTaskListTemplateRequestBuilder {
        private final String title;
        private final String recurrence;
        private final List<TaskManagementCreateTaskListTemplateRequestAssignmentsInner> assignments;
        private final Long companyId;
        private String description;
        private String due;
        private TaskManagementCreateTaskListTemplateRequestTimeFrame timeFrame;
        private List<TaskManagementCreateTaskListTemplateRequestTaskTemplatesInner> taskTemplates;
        private Integer status;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private CreateTaskListTemplateRequestBuilder(String title, String recurrence, List<TaskManagementCreateTaskListTemplateRequestAssignmentsInner> assignments, Long companyId) {
            this.title = title;
            this.recurrence = recurrence;
            this.assignments = assignments;
            this.companyId = companyId;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return CreateTaskListTemplateRequestBuilder
         */
        public CreateTaskListTemplateRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set due
         * @param due A date with YYYY-MM-DD format (optional)
         * @return CreateTaskListTemplateRequestBuilder
         */
        public CreateTaskListTemplateRequestBuilder due(String due) {
            this.due = due;
            return this;
        }
        
        /**
         * Set timeFrame
         * @param timeFrame  (optional)
         * @return CreateTaskListTemplateRequestBuilder
         */
        public CreateTaskListTemplateRequestBuilder timeFrame(TaskManagementCreateTaskListTemplateRequestTimeFrame timeFrame) {
            this.timeFrame = timeFrame;
            return this;
        }
        
        /**
         * Set taskTemplates
         * @param taskTemplates  (optional)
         * @return CreateTaskListTemplateRequestBuilder
         */
        public CreateTaskListTemplateRequestBuilder taskTemplates(List<TaskManagementCreateTaskListTemplateRequestTaskTemplatesInner> taskTemplates) {
            this.taskTemplates = taskTemplates;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return CreateTaskListTemplateRequestBuilder
         */
        public CreateTaskListTemplateRequestBuilder status(Integer status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return CreateTaskListTemplateRequestBuilder
         */
        public CreateTaskListTemplateRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return CreateTaskListTemplateRequestBuilder
         */
        public CreateTaskListTemplateRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for createTaskListTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created a new task list template </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TaskManagementCreateTaskListTemplateRequest taskManagementCreateTaskListTemplateRequest = buildBodyParams();
            return createTaskListTemplateCall(companyId, taskManagementCreateTaskListTemplateRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private TaskManagementCreateTaskListTemplateRequest buildBodyParams() {
            TaskManagementCreateTaskListTemplateRequest taskManagementCreateTaskListTemplateRequest = new TaskManagementCreateTaskListTemplateRequest();
            taskManagementCreateTaskListTemplateRequest.title(this.title);
            taskManagementCreateTaskListTemplateRequest.description(this.description);
            taskManagementCreateTaskListTemplateRequest.recurrence(this.recurrence);
            taskManagementCreateTaskListTemplateRequest.assignments(this.assignments);
            taskManagementCreateTaskListTemplateRequest.due(this.due);
            taskManagementCreateTaskListTemplateRequest.timeFrame(this.timeFrame);
            taskManagementCreateTaskListTemplateRequest.taskTemplates(this.taskTemplates);
            taskManagementCreateTaskListTemplateRequest.status(this.status);
            return taskManagementCreateTaskListTemplateRequest;
        }

        /**
         * Execute createTaskListTemplate request
         * @return TaskManagementCreateTaskListTemplateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created a new task list template </td><td>  -  </td></tr>
         </table>
         */
        public TaskManagementCreateTaskListTemplateResponse execute() throws ApiException {
            TaskManagementCreateTaskListTemplateRequest taskManagementCreateTaskListTemplateRequest = buildBodyParams();
            ApiResponse<TaskManagementCreateTaskListTemplateResponse> localVarResp = createTaskListTemplateWithHttpInfo(companyId, taskManagementCreateTaskListTemplateRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTaskListTemplate request with HTTP info returned
         * @return ApiResponse&lt;TaskManagementCreateTaskListTemplateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created a new task list template </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaskManagementCreateTaskListTemplateResponse> executeWithHttpInfo() throws ApiException {
            TaskManagementCreateTaskListTemplateRequest taskManagementCreateTaskListTemplateRequest = buildBodyParams();
            return createTaskListTemplateWithHttpInfo(companyId, taskManagementCreateTaskListTemplateRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute createTaskListTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created a new task list template </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaskManagementCreateTaskListTemplateResponse> _callback) throws ApiException {
            TaskManagementCreateTaskListTemplateRequest taskManagementCreateTaskListTemplateRequest = buildBodyParams();
            return createTaskListTemplateAsync(companyId, taskManagementCreateTaskListTemplateRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Create Task List Template
     * 
     * @param companyId Company ID (required)
     * @param taskManagementCreateTaskListTemplateRequest  (required)
     * @return CreateTaskListTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created a new task list template </td><td>  -  </td></tr>
     </table>
     */
    public CreateTaskListTemplateRequestBuilder createTaskListTemplate(String title, String recurrence, List<TaskManagementCreateTaskListTemplateRequestAssignmentsInner> assignments, Long companyId) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        if (recurrence == null) throw new IllegalArgumentException("\"recurrence\" is required but got null");
            

        if (assignments == null) throw new IllegalArgumentException("\"assignments\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new CreateTaskListTemplateRequestBuilder(title, recurrence, assignments, companyId);
    }
    private okhttp3.Call createTaskTagsCall(Long companyId, TaskManagementCreateTaskTagsRequest taskManagementCreateTaskTagsRequest, String xApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taskManagementCreateTaskTagsRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/task_tags"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTaskTagsValidateBeforeCall(Long companyId, TaskManagementCreateTaskTagsRequest taskManagementCreateTaskTagsRequest, String xApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createTaskTags(Async)");
        }

        // verify the required parameter 'taskManagementCreateTaskTagsRequest' is set
        if (taskManagementCreateTaskTagsRequest == null) {
            throw new ApiException("Missing the required parameter 'taskManagementCreateTaskTagsRequest' when calling createTaskTags(Async)");
        }

        return createTaskTagsCall(companyId, taskManagementCreateTaskTagsRequest, xApiVersion, _callback);

    }


    private ApiResponse<Void> createTaskTagsWithHttpInfo(Long companyId, TaskManagementCreateTaskTagsRequest taskManagementCreateTaskTagsRequest, String xApiVersion) throws ApiException {
        okhttp3.Call localVarCall = createTaskTagsValidateBeforeCall(companyId, taskManagementCreateTaskTagsRequest, xApiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createTaskTagsAsync(Long companyId, TaskManagementCreateTaskTagsRequest taskManagementCreateTaskTagsRequest, String xApiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTaskTagsValidateBeforeCall(companyId, taskManagementCreateTaskTagsRequest, xApiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateTaskTagsRequestBuilder {
        private final List<TaskManagementCreateTaskTagsRequestTagsInner> tags;
        private final Integer companyId;
        private final Long companyId;
        private String xApiVersion;

        private CreateTaskTagsRequestBuilder(List<TaskManagementCreateTaskTagsRequestTagsInner> tags, Integer companyId, Long companyId) {
            this.tags = tags;
            this.companyId = companyId;
            this.companyId = companyId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return CreateTaskTagsRequestBuilder
         */
        public CreateTaskTagsRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Build call for createTaskTags
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TaskManagementCreateTaskTagsRequest taskManagementCreateTaskTagsRequest = buildBodyParams();
            return createTaskTagsCall(companyId, taskManagementCreateTaskTagsRequest, xApiVersion, _callback);
        }

        private TaskManagementCreateTaskTagsRequest buildBodyParams() {
            TaskManagementCreateTaskTagsRequest taskManagementCreateTaskTagsRequest = new TaskManagementCreateTaskTagsRequest();
            taskManagementCreateTaskTagsRequest.tags(this.tags);
            taskManagementCreateTaskTagsRequest.companyId(this.companyId);
            return taskManagementCreateTaskTagsRequest;
        }

        /**
         * Execute createTaskTags request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TaskManagementCreateTaskTagsRequest taskManagementCreateTaskTagsRequest = buildBodyParams();
            createTaskTagsWithHttpInfo(companyId, taskManagementCreateTaskTagsRequest, xApiVersion);
        }

        /**
         * Execute createTaskTags request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TaskManagementCreateTaskTagsRequest taskManagementCreateTaskTagsRequest = buildBodyParams();
            return createTaskTagsWithHttpInfo(companyId, taskManagementCreateTaskTagsRequest, xApiVersion);
        }

        /**
         * Execute createTaskTags request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TaskManagementCreateTaskTagsRequest taskManagementCreateTaskTagsRequest = buildBodyParams();
            return createTaskTagsAsync(companyId, taskManagementCreateTaskTagsRequest, xApiVersion, _callback);
        }
    }

    /**
     * Create Task Tags
     * 
     * @param companyId Company ID (required)
     * @param taskManagementCreateTaskTagsRequest  (required)
     * @return CreateTaskTagsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public CreateTaskTagsRequestBuilder createTaskTags(List<TaskManagementCreateTaskTagsRequestTagsInner> tags, Integer companyId, Long companyId) throws IllegalArgumentException {
        if (tags == null) throw new IllegalArgumentException("\"tags\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new CreateTaskTagsRequestBuilder(tags, companyId, companyId);
    }
    private okhttp3.Call deleteTaskListTemplateCall(Long companyId, String uuid, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/task_list_templates/{uuid}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTaskListTemplateValidateBeforeCall(Long companyId, String uuid, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling deleteTaskListTemplate(Async)");
        }

        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteTaskListTemplate(Async)");
        }

        return deleteTaskListTemplateCall(companyId, uuid, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<Void> deleteTaskListTemplateWithHttpInfo(Long companyId, String uuid, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = deleteTaskListTemplateValidateBeforeCall(companyId, uuid, xApiVersion, xCompanyGuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteTaskListTemplateAsync(Long companyId, String uuid, String xApiVersion, UUID xCompanyGuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTaskListTemplateValidateBeforeCall(companyId, uuid, xApiVersion, xCompanyGuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteTaskListTemplateRequestBuilder {
        private final Long companyId;
        private final String uuid;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private DeleteTaskListTemplateRequestBuilder(Long companyId, String uuid) {
            this.companyId = companyId;
            this.uuid = uuid;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return DeleteTaskListTemplateRequestBuilder
         */
        public DeleteTaskListTemplateRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return DeleteTaskListTemplateRequestBuilder
         */
        public DeleteTaskListTemplateRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for deleteTaskListTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTaskListTemplateCall(companyId, uuid, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute deleteTaskListTemplate request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteTaskListTemplateWithHttpInfo(companyId, uuid, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute deleteTaskListTemplate request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteTaskListTemplateWithHttpInfo(companyId, uuid, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute deleteTaskListTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteTaskListTemplateAsync(companyId, uuid, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Delete Task List Template
     * 
     * @param companyId Company ID (required)
     * @param uuid Task List Template UUID (required)
     * @return DeleteTaskListTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTaskListTemplateRequestBuilder deleteTaskListTemplate(Long companyId, String uuid) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (uuid == null) throw new IllegalArgumentException("\"uuid\" is required but got null");
            

        return new DeleteTaskListTemplateRequestBuilder(companyId, uuid);
    }
    private okhttp3.Call deleteTaskTagsCall(Long companyId, TaskManagementDeleteTaskTagsRequest taskManagementDeleteTaskTagsRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taskManagementDeleteTaskTagsRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/task_tags"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTaskTagsValidateBeforeCall(Long companyId, TaskManagementDeleteTaskTagsRequest taskManagementDeleteTaskTagsRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling deleteTaskTags(Async)");
        }

        // verify the required parameter 'taskManagementDeleteTaskTagsRequest' is set
        if (taskManagementDeleteTaskTagsRequest == null) {
            throw new ApiException("Missing the required parameter 'taskManagementDeleteTaskTagsRequest' when calling deleteTaskTags(Async)");
        }

        return deleteTaskTagsCall(companyId, taskManagementDeleteTaskTagsRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<Void> deleteTaskTagsWithHttpInfo(Long companyId, TaskManagementDeleteTaskTagsRequest taskManagementDeleteTaskTagsRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = deleteTaskTagsValidateBeforeCall(companyId, taskManagementDeleteTaskTagsRequest, xApiVersion, xCompanyGuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteTaskTagsAsync(Long companyId, TaskManagementDeleteTaskTagsRequest taskManagementDeleteTaskTagsRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTaskTagsValidateBeforeCall(companyId, taskManagementDeleteTaskTagsRequest, xApiVersion, xCompanyGuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteTaskTagsRequestBuilder {
        private final Integer companyId;
        private final List<String> uuids;
        private final Long companyId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private DeleteTaskTagsRequestBuilder(Integer companyId, List<String> uuids, Long companyId) {
            this.companyId = companyId;
            this.uuids = uuids;
            this.companyId = companyId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return DeleteTaskTagsRequestBuilder
         */
        public DeleteTaskTagsRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return DeleteTaskTagsRequestBuilder
         */
        public DeleteTaskTagsRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for deleteTaskTags
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TaskManagementDeleteTaskTagsRequest taskManagementDeleteTaskTagsRequest = buildBodyParams();
            return deleteTaskTagsCall(companyId, taskManagementDeleteTaskTagsRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private TaskManagementDeleteTaskTagsRequest buildBodyParams() {
            TaskManagementDeleteTaskTagsRequest taskManagementDeleteTaskTagsRequest = new TaskManagementDeleteTaskTagsRequest();
            taskManagementDeleteTaskTagsRequest.companyId(this.companyId);
            taskManagementDeleteTaskTagsRequest.uuids(this.uuids);
            return taskManagementDeleteTaskTagsRequest;
        }

        /**
         * Execute deleteTaskTags request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TaskManagementDeleteTaskTagsRequest taskManagementDeleteTaskTagsRequest = buildBodyParams();
            deleteTaskTagsWithHttpInfo(companyId, taskManagementDeleteTaskTagsRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute deleteTaskTags request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TaskManagementDeleteTaskTagsRequest taskManagementDeleteTaskTagsRequest = buildBodyParams();
            return deleteTaskTagsWithHttpInfo(companyId, taskManagementDeleteTaskTagsRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute deleteTaskTags request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TaskManagementDeleteTaskTagsRequest taskManagementDeleteTaskTagsRequest = buildBodyParams();
            return deleteTaskTagsAsync(companyId, taskManagementDeleteTaskTagsRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Delete Task Tags
     * 
     * @param companyId Company ID (required)
     * @param taskManagementDeleteTaskTagsRequest  (required)
     * @return DeleteTaskTagsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTaskTagsRequestBuilder deleteTaskTags(Integer companyId, List<String> uuids, Long companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (uuids == null) throw new IllegalArgumentException("\"uuids\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new DeleteTaskTagsRequestBuilder(companyId, uuids, companyId);
    }
    private okhttp3.Call editTaskListTemplateCall(Long companyId, String uuid, TaskManagementEditTaskListTemplateRequest taskManagementEditTaskListTemplateRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taskManagementEditTaskListTemplateRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/task_list_templates/{uuid}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editTaskListTemplateValidateBeforeCall(Long companyId, String uuid, TaskManagementEditTaskListTemplateRequest taskManagementEditTaskListTemplateRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling editTaskListTemplate(Async)");
        }

        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling editTaskListTemplate(Async)");
        }

        // verify the required parameter 'taskManagementEditTaskListTemplateRequest' is set
        if (taskManagementEditTaskListTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'taskManagementEditTaskListTemplateRequest' when calling editTaskListTemplate(Async)");
        }

        return editTaskListTemplateCall(companyId, uuid, taskManagementEditTaskListTemplateRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<TaskManagementEditTaskListTemplateResponse> editTaskListTemplateWithHttpInfo(Long companyId, String uuid, TaskManagementEditTaskListTemplateRequest taskManagementEditTaskListTemplateRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = editTaskListTemplateValidateBeforeCall(companyId, uuid, taskManagementEditTaskListTemplateRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<TaskManagementEditTaskListTemplateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editTaskListTemplateAsync(Long companyId, String uuid, TaskManagementEditTaskListTemplateRequest taskManagementEditTaskListTemplateRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<TaskManagementEditTaskListTemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = editTaskListTemplateValidateBeforeCall(companyId, uuid, taskManagementEditTaskListTemplateRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<TaskManagementEditTaskListTemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditTaskListTemplateRequestBuilder {
        private final Long companyId;
        private final String uuid;
        private String title;
        private String description;
        private Integer status;
        private List<TaskManagementEditTaskListTemplateRequestTaskTemplatesInner> taskTemplates;
        private String recurrence;
        private List<TaskManagementCreateTaskListTemplateRequestAssignmentsInner> assignments;
        private String due;
        private TaskManagementEditTaskListTemplateRequestTimeFrame timeFrame;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private EditTaskListTemplateRequestBuilder(Long companyId, String uuid) {
            this.companyId = companyId;
            this.uuid = uuid;
        }

        /**
         * Set title
         * @param title  (optional)
         * @return EditTaskListTemplateRequestBuilder
         */
        public EditTaskListTemplateRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set description
         * @param description  (optional)
         * @return EditTaskListTemplateRequestBuilder
         */
        public EditTaskListTemplateRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return EditTaskListTemplateRequestBuilder
         */
        public EditTaskListTemplateRequestBuilder status(Integer status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set taskTemplates
         * @param taskTemplates  (optional)
         * @return EditTaskListTemplateRequestBuilder
         */
        public EditTaskListTemplateRequestBuilder taskTemplates(List<TaskManagementEditTaskListTemplateRequestTaskTemplatesInner> taskTemplates) {
            this.taskTemplates = taskTemplates;
            return this;
        }
        
        /**
         * Set recurrence
         * @param recurrence recurrence rules as defined by the RFC 5545 spec (optional)
         * @return EditTaskListTemplateRequestBuilder
         */
        public EditTaskListTemplateRequestBuilder recurrence(String recurrence) {
            this.recurrence = recurrence;
            return this;
        }
        
        /**
         * Set assignments
         * @param assignments  (optional)
         * @return EditTaskListTemplateRequestBuilder
         */
        public EditTaskListTemplateRequestBuilder assignments(List<TaskManagementCreateTaskListTemplateRequestAssignmentsInner> assignments) {
            this.assignments = assignments;
            return this;
        }
        
        /**
         * Set due
         * @param due A date with YYYY-MM-DD format (optional)
         * @return EditTaskListTemplateRequestBuilder
         */
        public EditTaskListTemplateRequestBuilder due(String due) {
            this.due = due;
            return this;
        }
        
        /**
         * Set timeFrame
         * @param timeFrame  (optional)
         * @return EditTaskListTemplateRequestBuilder
         */
        public EditTaskListTemplateRequestBuilder timeFrame(TaskManagementEditTaskListTemplateRequestTimeFrame timeFrame) {
            this.timeFrame = timeFrame;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return EditTaskListTemplateRequestBuilder
         */
        public EditTaskListTemplateRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return EditTaskListTemplateRequestBuilder
         */
        public EditTaskListTemplateRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for editTaskListTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The task list template </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TaskManagementEditTaskListTemplateRequest taskManagementEditTaskListTemplateRequest = buildBodyParams();
            return editTaskListTemplateCall(companyId, uuid, taskManagementEditTaskListTemplateRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private TaskManagementEditTaskListTemplateRequest buildBodyParams() {
            TaskManagementEditTaskListTemplateRequest taskManagementEditTaskListTemplateRequest = new TaskManagementEditTaskListTemplateRequest();
            taskManagementEditTaskListTemplateRequest.title(this.title);
            taskManagementEditTaskListTemplateRequest.description(this.description);
            taskManagementEditTaskListTemplateRequest.status(this.status);
            taskManagementEditTaskListTemplateRequest.taskTemplates(this.taskTemplates);
            taskManagementEditTaskListTemplateRequest.recurrence(this.recurrence);
            taskManagementEditTaskListTemplateRequest.assignments(this.assignments);
            taskManagementEditTaskListTemplateRequest.due(this.due);
            taskManagementEditTaskListTemplateRequest.timeFrame(this.timeFrame);
            return taskManagementEditTaskListTemplateRequest;
        }

        /**
         * Execute editTaskListTemplate request
         * @return TaskManagementEditTaskListTemplateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The task list template </td><td>  -  </td></tr>
         </table>
         */
        public TaskManagementEditTaskListTemplateResponse execute() throws ApiException {
            TaskManagementEditTaskListTemplateRequest taskManagementEditTaskListTemplateRequest = buildBodyParams();
            ApiResponse<TaskManagementEditTaskListTemplateResponse> localVarResp = editTaskListTemplateWithHttpInfo(companyId, uuid, taskManagementEditTaskListTemplateRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editTaskListTemplate request with HTTP info returned
         * @return ApiResponse&lt;TaskManagementEditTaskListTemplateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The task list template </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaskManagementEditTaskListTemplateResponse> executeWithHttpInfo() throws ApiException {
            TaskManagementEditTaskListTemplateRequest taskManagementEditTaskListTemplateRequest = buildBodyParams();
            return editTaskListTemplateWithHttpInfo(companyId, uuid, taskManagementEditTaskListTemplateRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute editTaskListTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The task list template </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaskManagementEditTaskListTemplateResponse> _callback) throws ApiException {
            TaskManagementEditTaskListTemplateRequest taskManagementEditTaskListTemplateRequest = buildBodyParams();
            return editTaskListTemplateAsync(companyId, uuid, taskManagementEditTaskListTemplateRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * edit task list template
     * 
     * @param companyId Company ID (required)
     * @param uuid Task List Template UUID (required)
     * @param taskManagementEditTaskListTemplateRequest  (required)
     * @return EditTaskListTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The task list template </td><td>  -  </td></tr>
     </table>
     */
    public EditTaskListTemplateRequestBuilder editTaskListTemplate(Long companyId, String uuid) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (uuid == null) throw new IllegalArgumentException("\"uuid\" is required but got null");
            

        return new EditTaskListTemplateRequestBuilder(companyId, uuid);
    }
    private okhttp3.Call getSettingsCall(Long companyId, String xApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/task_management_settings"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSettingsValidateBeforeCall(Long companyId, String xApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getSettings(Async)");
        }

        return getSettingsCall(companyId, xApiVersion, _callback);

    }


    private ApiResponse<TaskManagementGetSettingsResponse> getSettingsWithHttpInfo(Long companyId, String xApiVersion) throws ApiException {
        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(companyId, xApiVersion, null);
        Type localVarReturnType = new TypeToken<TaskManagementGetSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSettingsAsync(Long companyId, String xApiVersion, final ApiCallback<TaskManagementGetSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(companyId, xApiVersion, _callback);
        Type localVarReturnType = new TypeToken<TaskManagementGetSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSettingsRequestBuilder {
        private final Long companyId;
        private String xApiVersion;

        private GetSettingsRequestBuilder(Long companyId) {
            this.companyId = companyId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetSettingsRequestBuilder
         */
        public GetSettingsRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Build call for getSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSettingsCall(companyId, xApiVersion, _callback);
        }


        /**
         * Execute getSettings request
         * @return TaskManagementGetSettingsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TaskManagementGetSettingsResponse execute() throws ApiException {
            ApiResponse<TaskManagementGetSettingsResponse> localVarResp = getSettingsWithHttpInfo(companyId, xApiVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSettings request with HTTP info returned
         * @return ApiResponse&lt;TaskManagementGetSettingsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaskManagementGetSettingsResponse> executeWithHttpInfo() throws ApiException {
            return getSettingsWithHttpInfo(companyId, xApiVersion);
        }

        /**
         * Execute getSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaskManagementGetSettingsResponse> _callback) throws ApiException {
            return getSettingsAsync(companyId, xApiVersion, _callback);
        }
    }

    /**
     * Gets task management settings for a company
     * 
     * @param companyId Company ID (required)
     * @return GetSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetSettingsRequestBuilder getSettings(Long companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new GetSettingsRequestBuilder(companyId);
    }
    private okhttp3.Call getTaskListCall(Long companyId, Long listId, String xApiVersion, UUID xCompanyGuid, Long userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/task_lists/{list_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaskListValidateBeforeCall(Long companyId, Long listId, String xApiVersion, UUID xCompanyGuid, Long userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getTaskList(Async)");
        }

        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getTaskList(Async)");
        }

        return getTaskListCall(companyId, listId, xApiVersion, xCompanyGuid, userId, _callback);

    }


    private ApiResponse<TaskManagementGetTaskListResponse> getTaskListWithHttpInfo(Long companyId, Long listId, String xApiVersion, UUID xCompanyGuid, Long userId) throws ApiException {
        okhttp3.Call localVarCall = getTaskListValidateBeforeCall(companyId, listId, xApiVersion, xCompanyGuid, userId, null);
        Type localVarReturnType = new TypeToken<TaskManagementGetTaskListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTaskListAsync(Long companyId, Long listId, String xApiVersion, UUID xCompanyGuid, Long userId, final ApiCallback<TaskManagementGetTaskListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaskListValidateBeforeCall(companyId, listId, xApiVersion, xCompanyGuid, userId, _callback);
        Type localVarReturnType = new TypeToken<TaskManagementGetTaskListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTaskListRequestBuilder {
        private final Long companyId;
        private final Long listId;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private Long userId;

        private GetTaskListRequestBuilder(Long companyId, Long listId) {
            this.companyId = companyId;
            this.listId = listId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetTaskListRequestBuilder
         */
        public GetTaskListRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetTaskListRequestBuilder
         */
        public GetTaskListRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set userId
         * @param userId User ID (optional)
         * @return GetTaskListRequestBuilder
         */
        public GetTaskListRequestBuilder userId(Long userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Build call for getTaskList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTaskListCall(companyId, listId, xApiVersion, xCompanyGuid, userId, _callback);
        }


        /**
         * Execute getTaskList request
         * @return TaskManagementGetTaskListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TaskManagementGetTaskListResponse execute() throws ApiException {
            ApiResponse<TaskManagementGetTaskListResponse> localVarResp = getTaskListWithHttpInfo(companyId, listId, xApiVersion, xCompanyGuid, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTaskList request with HTTP info returned
         * @return ApiResponse&lt;TaskManagementGetTaskListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaskManagementGetTaskListResponse> executeWithHttpInfo() throws ApiException {
            return getTaskListWithHttpInfo(companyId, listId, xApiVersion, xCompanyGuid, userId);
        }

        /**
         * Execute getTaskList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaskManagementGetTaskListResponse> _callback) throws ApiException {
            return getTaskListAsync(companyId, listId, xApiVersion, xCompanyGuid, userId, _callback);
        }
    }

    /**
     * Retrieve Task List
     * 
     * @param companyId Company ID (required)
     * @param listId List ID (required)
     * @return GetTaskListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetTaskListRequestBuilder getTaskList(Long companyId, Long listId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
        return new GetTaskListRequestBuilder(companyId, listId);
    }
    private okhttp3.Call getTaskListTemplateCall(Long companyId, String uuid, String xApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/task_list_templates/{uuid}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaskListTemplateValidateBeforeCall(Long companyId, String uuid, String xApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getTaskListTemplate(Async)");
        }

        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getTaskListTemplate(Async)");
        }

        return getTaskListTemplateCall(companyId, uuid, xApiVersion, _callback);

    }


    private ApiResponse<TaskManagementGetTaskListTemplateResponse> getTaskListTemplateWithHttpInfo(Long companyId, String uuid, String xApiVersion) throws ApiException {
        okhttp3.Call localVarCall = getTaskListTemplateValidateBeforeCall(companyId, uuid, xApiVersion, null);
        Type localVarReturnType = new TypeToken<TaskManagementGetTaskListTemplateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTaskListTemplateAsync(Long companyId, String uuid, String xApiVersion, final ApiCallback<TaskManagementGetTaskListTemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaskListTemplateValidateBeforeCall(companyId, uuid, xApiVersion, _callback);
        Type localVarReturnType = new TypeToken<TaskManagementGetTaskListTemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTaskListTemplateRequestBuilder {
        private final Long companyId;
        private final String uuid;
        private String xApiVersion;

        private GetTaskListTemplateRequestBuilder(Long companyId, String uuid) {
            this.companyId = companyId;
            this.uuid = uuid;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetTaskListTemplateRequestBuilder
         */
        public GetTaskListTemplateRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Build call for getTaskListTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The task list template </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTaskListTemplateCall(companyId, uuid, xApiVersion, _callback);
        }


        /**
         * Execute getTaskListTemplate request
         * @return TaskManagementGetTaskListTemplateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The task list template </td><td>  -  </td></tr>
         </table>
         */
        public TaskManagementGetTaskListTemplateResponse execute() throws ApiException {
            ApiResponse<TaskManagementGetTaskListTemplateResponse> localVarResp = getTaskListTemplateWithHttpInfo(companyId, uuid, xApiVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTaskListTemplate request with HTTP info returned
         * @return ApiResponse&lt;TaskManagementGetTaskListTemplateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The task list template </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaskManagementGetTaskListTemplateResponse> executeWithHttpInfo() throws ApiException {
            return getTaskListTemplateWithHttpInfo(companyId, uuid, xApiVersion);
        }

        /**
         * Execute getTaskListTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The task list template </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaskManagementGetTaskListTemplateResponse> _callback) throws ApiException {
            return getTaskListTemplateAsync(companyId, uuid, xApiVersion, _callback);
        }
    }

    /**
     * Retrieve Task List Template
     * 
     * @param companyId Company ID (required)
     * @param uuid Task List Template UUID (required)
     * @return GetTaskListTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The task list template </td><td>  -  </td></tr>
     </table>
     */
    public GetTaskListTemplateRequestBuilder getTaskListTemplate(Long companyId, String uuid) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (uuid == null) throw new IllegalArgumentException("\"uuid\" is required but got null");
            

        return new GetTaskListTemplateRequestBuilder(companyId, uuid);
    }
    private okhttp3.Call getTaskListTemplatesCall(Long companyId, String xApiVersion, UUID xCompanyGuid, Long locationId, Long departmentId, Long roleId, String cursor, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/task_list_templates"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (departmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("department_id", departmentId));
        }

        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id", roleId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaskListTemplatesValidateBeforeCall(Long companyId, String xApiVersion, UUID xCompanyGuid, Long locationId, Long departmentId, Long roleId, String cursor, Long limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getTaskListTemplates(Async)");
        }

        return getTaskListTemplatesCall(companyId, xApiVersion, xCompanyGuid, locationId, departmentId, roleId, cursor, limit, _callback);

    }


    private ApiResponse<TaskManagementGetTaskListTemplates200Response> getTaskListTemplatesWithHttpInfo(Long companyId, String xApiVersion, UUID xCompanyGuid, Long locationId, Long departmentId, Long roleId, String cursor, Long limit) throws ApiException {
        okhttp3.Call localVarCall = getTaskListTemplatesValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, locationId, departmentId, roleId, cursor, limit, null);
        Type localVarReturnType = new TypeToken<TaskManagementGetTaskListTemplates200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTaskListTemplatesAsync(Long companyId, String xApiVersion, UUID xCompanyGuid, Long locationId, Long departmentId, Long roleId, String cursor, Long limit, final ApiCallback<TaskManagementGetTaskListTemplates200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaskListTemplatesValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, locationId, departmentId, roleId, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<TaskManagementGetTaskListTemplates200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTaskListTemplatesRequestBuilder {
        private final Long companyId;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private Long locationId;
        private Long departmentId;
        private Long roleId;
        private String cursor;
        private Long limit;

        private GetTaskListTemplatesRequestBuilder(Long companyId) {
            this.companyId = companyId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetTaskListTemplatesRequestBuilder
         */
        public GetTaskListTemplatesRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetTaskListTemplatesRequestBuilder
         */
        public GetTaskListTemplatesRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set locationId
         * @param locationId Location ID (optional)
         * @return GetTaskListTemplatesRequestBuilder
         */
        public GetTaskListTemplatesRequestBuilder locationId(Long locationId) {
            this.locationId = locationId;
            return this;
        }
        
        /**
         * Set departmentId
         * @param departmentId Department ID (optional)
         * @return GetTaskListTemplatesRequestBuilder
         */
        public GetTaskListTemplatesRequestBuilder departmentId(Long departmentId) {
            this.departmentId = departmentId;
            return this;
        }
        
        /**
         * Set roleId
         * @param roleId Role ID (optional)
         * @return GetTaskListTemplatesRequestBuilder
         */
        public GetTaskListTemplatesRequestBuilder roleId(Long roleId) {
            this.roleId = roleId;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Cursor for the next or previous page of results. (optional)
         * @return GetTaskListTemplatesRequestBuilder
         */
        public GetTaskListTemplatesRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The number of results desired per page. (optional)
         * @return GetTaskListTemplatesRequestBuilder
         */
        public GetTaskListTemplatesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getTaskListTemplates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The task list templates </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTaskListTemplatesCall(companyId, xApiVersion, xCompanyGuid, locationId, departmentId, roleId, cursor, limit, _callback);
        }


        /**
         * Execute getTaskListTemplates request
         * @return TaskManagementGetTaskListTemplates200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The task list templates </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public TaskManagementGetTaskListTemplates200Response execute() throws ApiException {
            ApiResponse<TaskManagementGetTaskListTemplates200Response> localVarResp = getTaskListTemplatesWithHttpInfo(companyId, xApiVersion, xCompanyGuid, locationId, departmentId, roleId, cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTaskListTemplates request with HTTP info returned
         * @return ApiResponse&lt;TaskManagementGetTaskListTemplates200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The task list templates </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaskManagementGetTaskListTemplates200Response> executeWithHttpInfo() throws ApiException {
            return getTaskListTemplatesWithHttpInfo(companyId, xApiVersion, xCompanyGuid, locationId, departmentId, roleId, cursor, limit);
        }

        /**
         * Execute getTaskListTemplates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The task list templates </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaskManagementGetTaskListTemplates200Response> _callback) throws ApiException {
            return getTaskListTemplatesAsync(companyId, xApiVersion, xCompanyGuid, locationId, departmentId, roleId, cursor, limit, _callback);
        }
    }

    /**
     * Get task list templates
     * 
     * @param companyId Company ID (required)
     * @return GetTaskListTemplatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The task list templates </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetTaskListTemplatesRequestBuilder getTaskListTemplates(Long companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new GetTaskListTemplatesRequestBuilder(companyId);
    }
    private okhttp3.Call getTaskListsCall(Long companyId, String xApiVersion, UUID xCompanyGuid, Long userId, Long locationId, String uuid, String activeOnDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/task_lists"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (uuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uuid", uuid));
        }

        if (activeOnDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active_on_date", activeOnDate));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaskListsValidateBeforeCall(Long companyId, String xApiVersion, UUID xCompanyGuid, Long userId, Long locationId, String uuid, String activeOnDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getTaskLists(Async)");
        }

        return getTaskListsCall(companyId, xApiVersion, xCompanyGuid, userId, locationId, uuid, activeOnDate, _callback);

    }


    private ApiResponse<TaskManagementGetTaskListsResponse> getTaskListsWithHttpInfo(Long companyId, String xApiVersion, UUID xCompanyGuid, Long userId, Long locationId, String uuid, String activeOnDate) throws ApiException {
        okhttp3.Call localVarCall = getTaskListsValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, userId, locationId, uuid, activeOnDate, null);
        Type localVarReturnType = new TypeToken<TaskManagementGetTaskListsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTaskListsAsync(Long companyId, String xApiVersion, UUID xCompanyGuid, Long userId, Long locationId, String uuid, String activeOnDate, final ApiCallback<TaskManagementGetTaskListsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaskListsValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, userId, locationId, uuid, activeOnDate, _callback);
        Type localVarReturnType = new TypeToken<TaskManagementGetTaskListsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTaskListsRequestBuilder {
        private final Long companyId;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private Long userId;
        private Long locationId;
        private String uuid;
        private String activeOnDate;

        private GetTaskListsRequestBuilder(Long companyId) {
            this.companyId = companyId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetTaskListsRequestBuilder
         */
        public GetTaskListsRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetTaskListsRequestBuilder
         */
        public GetTaskListsRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set userId
         * @param userId User ID (optional)
         * @return GetTaskListsRequestBuilder
         */
        public GetTaskListsRequestBuilder userId(Long userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set locationId
         * @param locationId Location ID (optional)
         * @return GetTaskListsRequestBuilder
         */
        public GetTaskListsRequestBuilder locationId(Long locationId) {
            this.locationId = locationId;
            return this;
        }
        
        /**
         * Set uuid
         * @param uuid Task List Template UUID (optional)
         * @return GetTaskListsRequestBuilder
         */
        public GetTaskListsRequestBuilder uuid(String uuid) {
            this.uuid = uuid;
            return this;
        }
        
        /**
         * Set activeOnDate
         * @param activeOnDate Show only tasks lists that were active on a date (YYYY-MM-DD) (optional)
         * @return GetTaskListsRequestBuilder
         */
        public GetTaskListsRequestBuilder activeOnDate(String activeOnDate) {
            this.activeOnDate = activeOnDate;
            return this;
        }
        
        /**
         * Build call for getTaskLists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTaskListsCall(companyId, xApiVersion, xCompanyGuid, userId, locationId, uuid, activeOnDate, _callback);
        }


        /**
         * Execute getTaskLists request
         * @return TaskManagementGetTaskListsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TaskManagementGetTaskListsResponse execute() throws ApiException {
            ApiResponse<TaskManagementGetTaskListsResponse> localVarResp = getTaskListsWithHttpInfo(companyId, xApiVersion, xCompanyGuid, userId, locationId, uuid, activeOnDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTaskLists request with HTTP info returned
         * @return ApiResponse&lt;TaskManagementGetTaskListsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaskManagementGetTaskListsResponse> executeWithHttpInfo() throws ApiException {
            return getTaskListsWithHttpInfo(companyId, xApiVersion, xCompanyGuid, userId, locationId, uuid, activeOnDate);
        }

        /**
         * Execute getTaskLists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaskManagementGetTaskListsResponse> _callback) throws ApiException {
            return getTaskListsAsync(companyId, xApiVersion, xCompanyGuid, userId, locationId, uuid, activeOnDate, _callback);
        }
    }

    /**
     * List Task Lists
     * 
     * @param companyId Company ID (required)
     * @return GetTaskListsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetTaskListsRequestBuilder getTaskLists(Long companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new GetTaskListsRequestBuilder(companyId);
    }
    private okhttp3.Call listTaskListsSummaryCall(Long companyId, Long locationId, String date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/task_list_daily_summary"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTaskListsSummaryValidateBeforeCall(Long companyId, Long locationId, String date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling listTaskListsSummary(Async)");
        }

        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling listTaskListsSummary(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling listTaskListsSummary(Async)");
        }

        return listTaskListsSummaryCall(companyId, locationId, date, _callback);

    }


    private ApiResponse<TaskManagementListTaskListsSummary200Response> listTaskListsSummaryWithHttpInfo(Long companyId, Long locationId, String date) throws ApiException {
        okhttp3.Call localVarCall = listTaskListsSummaryValidateBeforeCall(companyId, locationId, date, null);
        Type localVarReturnType = new TypeToken<TaskManagementListTaskListsSummary200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTaskListsSummaryAsync(Long companyId, Long locationId, String date, final ApiCallback<TaskManagementListTaskListsSummary200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTaskListsSummaryValidateBeforeCall(companyId, locationId, date, _callback);
        Type localVarReturnType = new TypeToken<TaskManagementListTaskListsSummary200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTaskListsSummaryRequestBuilder {
        private final Long companyId;
        private final Long locationId;
        private final String date;

        private ListTaskListsSummaryRequestBuilder(Long companyId, Long locationId, String date) {
            this.companyId = companyId;
            this.locationId = locationId;
            this.date = date;
        }

        /**
         * Build call for listTaskListsSummary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Task list daily summary </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTaskListsSummaryCall(companyId, locationId, date, _callback);
        }


        /**
         * Execute listTaskListsSummary request
         * @return TaskManagementListTaskListsSummary200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Task list daily summary </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public TaskManagementListTaskListsSummary200Response execute() throws ApiException {
            ApiResponse<TaskManagementListTaskListsSummary200Response> localVarResp = listTaskListsSummaryWithHttpInfo(companyId, locationId, date);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTaskListsSummary request with HTTP info returned
         * @return ApiResponse&lt;TaskManagementListTaskListsSummary200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Task list daily summary </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaskManagementListTaskListsSummary200Response> executeWithHttpInfo() throws ApiException {
            return listTaskListsSummaryWithHttpInfo(companyId, locationId, date);
        }

        /**
         * Execute listTaskListsSummary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Task list daily summary </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaskManagementListTaskListsSummary200Response> _callback) throws ApiException {
            return listTaskListsSummaryAsync(companyId, locationId, date, _callback);
        }
    }

    /**
     * List Task Lists Summary
     * 
     * @param companyId Company ID (required)
     * @param locationId Location ID (required)
     * @param date Date of requested task lists (required)
     * @return ListTaskListsSummaryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task list daily summary </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ListTaskListsSummaryRequestBuilder listTaskListsSummary(Long companyId, Long locationId, String date) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (locationId == null) throw new IllegalArgumentException("\"locationId\" is required but got null");
        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
            

        return new ListTaskListsSummaryRequestBuilder(companyId, locationId, date);
    }
    private okhttp3.Call markCompleteCall(Long companyId, Long listId, Long taskId, TaskManagementMarkCompleteRequest taskManagementMarkCompleteRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taskManagementMarkCompleteRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/task_lists/{list_id}/tasks/{task_id}/complete"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markCompleteValidateBeforeCall(Long companyId, Long listId, Long taskId, TaskManagementMarkCompleteRequest taskManagementMarkCompleteRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling markComplete(Async)");
        }

        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling markComplete(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling markComplete(Async)");
        }

        // verify the required parameter 'taskManagementMarkCompleteRequest' is set
        if (taskManagementMarkCompleteRequest == null) {
            throw new ApiException("Missing the required parameter 'taskManagementMarkCompleteRequest' when calling markComplete(Async)");
        }

        return markCompleteCall(companyId, listId, taskId, taskManagementMarkCompleteRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<TaskManagementMarkCompleteResponse> markCompleteWithHttpInfo(Long companyId, Long listId, Long taskId, TaskManagementMarkCompleteRequest taskManagementMarkCompleteRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = markCompleteValidateBeforeCall(companyId, listId, taskId, taskManagementMarkCompleteRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<TaskManagementMarkCompleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call markCompleteAsync(Long companyId, Long listId, Long taskId, TaskManagementMarkCompleteRequest taskManagementMarkCompleteRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<TaskManagementMarkCompleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = markCompleteValidateBeforeCall(companyId, listId, taskId, taskManagementMarkCompleteRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<TaskManagementMarkCompleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MarkCompleteRequestBuilder {
        private final Integer userId;
        private final Long companyId;
        private final Long listId;
        private final Long taskId;
        private Object completionValue;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private MarkCompleteRequestBuilder(Integer userId, Long companyId, Long listId, Long taskId) {
            this.userId = userId;
            this.companyId = companyId;
            this.listId = listId;
            this.taskId = taskId;
        }

        /**
         * Set completionValue
         * @param completionValue  (optional)
         * @return MarkCompleteRequestBuilder
         */
        public MarkCompleteRequestBuilder completionValue(Object completionValue) {
            this.completionValue = completionValue;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return MarkCompleteRequestBuilder
         */
        public MarkCompleteRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return MarkCompleteRequestBuilder
         */
        public MarkCompleteRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for markComplete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TaskManagementMarkCompleteRequest taskManagementMarkCompleteRequest = buildBodyParams();
            return markCompleteCall(companyId, listId, taskId, taskManagementMarkCompleteRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private TaskManagementMarkCompleteRequest buildBodyParams() {
            TaskManagementMarkCompleteRequest taskManagementMarkCompleteRequest = new TaskManagementMarkCompleteRequest();
            taskManagementMarkCompleteRequest.userId(this.userId);
            taskManagementMarkCompleteRequest.completionValue(this.completionValue);
            return taskManagementMarkCompleteRequest;
        }

        /**
         * Execute markComplete request
         * @return TaskManagementMarkCompleteResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TaskManagementMarkCompleteResponse execute() throws ApiException {
            TaskManagementMarkCompleteRequest taskManagementMarkCompleteRequest = buildBodyParams();
            ApiResponse<TaskManagementMarkCompleteResponse> localVarResp = markCompleteWithHttpInfo(companyId, listId, taskId, taskManagementMarkCompleteRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute markComplete request with HTTP info returned
         * @return ApiResponse&lt;TaskManagementMarkCompleteResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaskManagementMarkCompleteResponse> executeWithHttpInfo() throws ApiException {
            TaskManagementMarkCompleteRequest taskManagementMarkCompleteRequest = buildBodyParams();
            return markCompleteWithHttpInfo(companyId, listId, taskId, taskManagementMarkCompleteRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute markComplete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaskManagementMarkCompleteResponse> _callback) throws ApiException {
            TaskManagementMarkCompleteRequest taskManagementMarkCompleteRequest = buildBodyParams();
            return markCompleteAsync(companyId, listId, taskId, taskManagementMarkCompleteRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Complete Task
     * 
     * @param companyId Company ID (required)
     * @param listId Task List ID (required)
     * @param taskId Task ID (required)
     * @param taskManagementMarkCompleteRequest  (required)
     * @return MarkCompleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MarkCompleteRequestBuilder markComplete(Integer userId, Long companyId, Long listId, Long taskId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
        return new MarkCompleteRequestBuilder(userId, companyId, listId, taskId);
    }
}
