/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DepartmentsCreateNewDepartmentRequest;
import com.konfigthis.client.model.DepartmentsCreateNewDepartmentResponse;
import com.konfigthis.client.model.DepartmentsGetDepartmentResponse;
import com.konfigthis.client.model.DepartmentsListResponse;
import com.konfigthis.client.model.DepartmentsUpdateDepartmentRequest;
import com.konfigthis.client.model.DepartmentsUpdateDepartmentResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DepartmentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DepartmentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DepartmentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewDepartmentCall(Long companyId, DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = departmentsCreateNewDepartmentRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/departments"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewDepartmentValidateBeforeCall(Long companyId, DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createNewDepartment(Async)");
        }

        // verify the required parameter 'departmentsCreateNewDepartmentRequest' is set
        if (departmentsCreateNewDepartmentRequest == null) {
            throw new ApiException("Missing the required parameter 'departmentsCreateNewDepartmentRequest' when calling createNewDepartment(Async)");
        }

        return createNewDepartmentCall(companyId, departmentsCreateNewDepartmentRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<DepartmentsCreateNewDepartmentResponse> createNewDepartmentWithHttpInfo(Long companyId, DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = createNewDepartmentValidateBeforeCall(companyId, departmentsCreateNewDepartmentRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<DepartmentsCreateNewDepartmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewDepartmentAsync(Long companyId, DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<DepartmentsCreateNewDepartmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewDepartmentValidateBeforeCall(companyId, departmentsCreateNewDepartmentRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<DepartmentsCreateNewDepartmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewDepartmentRequestBuilder {
        private final Double locationId;
        private final String name;
        private final Boolean _default;
        private final Long companyId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private CreateNewDepartmentRequestBuilder(double locationId, String name, Boolean _default, Long companyId) {
            this.locationId = locationId;
            this.name = name;
            this._default = _default;
            this.companyId = companyId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return CreateNewDepartmentRequestBuilder
         */
        public CreateNewDepartmentRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return CreateNewDepartmentRequestBuilder
         */
        public CreateNewDepartmentRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for createNewDepartment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest = buildBodyParams();
            return createNewDepartmentCall(companyId, departmentsCreateNewDepartmentRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private DepartmentsCreateNewDepartmentRequest buildBodyParams() {
            DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest = new DepartmentsCreateNewDepartmentRequest();
            departmentsCreateNewDepartmentRequest.locationId(this.locationId);
            departmentsCreateNewDepartmentRequest.name(this.name);
            departmentsCreateNewDepartmentRequest._default(this._default);
            return departmentsCreateNewDepartmentRequest;
        }

        /**
         * Execute createNewDepartment request
         * @return DepartmentsCreateNewDepartmentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public DepartmentsCreateNewDepartmentResponse execute() throws ApiException {
            DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest = buildBodyParams();
            ApiResponse<DepartmentsCreateNewDepartmentResponse> localVarResp = createNewDepartmentWithHttpInfo(companyId, departmentsCreateNewDepartmentRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewDepartment request with HTTP info returned
         * @return ApiResponse&lt;DepartmentsCreateNewDepartmentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DepartmentsCreateNewDepartmentResponse> executeWithHttpInfo() throws ApiException {
            DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest = buildBodyParams();
            return createNewDepartmentWithHttpInfo(companyId, departmentsCreateNewDepartmentRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute createNewDepartment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DepartmentsCreateNewDepartmentResponse> _callback) throws ApiException {
            DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest = buildBodyParams();
            return createNewDepartmentAsync(companyId, departmentsCreateNewDepartmentRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Create Department
     * 
     * @param companyId Company ID (required)
     * @param departmentsCreateNewDepartmentRequest  (required)
     * @return CreateNewDepartmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewDepartmentRequestBuilder createNewDepartment(double locationId, String name, Boolean _default, Long companyId) throws IllegalArgumentException {
        
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (_default == null) throw new IllegalArgumentException("\"_default\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new CreateNewDepartmentRequestBuilder(locationId, name, _default, companyId);
    }
    private okhttp3.Call deleteByIdCall(Long companyId, Long departmentId, String xApiVersion, UUID xCompanyGuid, Long transferTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/departments/{department_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "department_id" + "}", localVarApiClient.escapeString(departmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (transferTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transfer_to", transferTo));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(Long companyId, Long departmentId, String xApiVersion, UUID xCompanyGuid, Long transferTo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling deleteById(Async)");
        }

        // verify the required parameter 'departmentId' is set
        if (departmentId == null) {
            throw new ApiException("Missing the required parameter 'departmentId' when calling deleteById(Async)");
        }

        return deleteByIdCall(companyId, departmentId, xApiVersion, xCompanyGuid, transferTo, _callback);

    }


    private ApiResponse<Void> deleteByIdWithHttpInfo(Long companyId, Long departmentId, String xApiVersion, UUID xCompanyGuid, Long transferTo) throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(companyId, departmentId, xApiVersion, xCompanyGuid, transferTo, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteByIdAsync(Long companyId, Long departmentId, String xApiVersion, UUID xCompanyGuid, Long transferTo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(companyId, departmentId, xApiVersion, xCompanyGuid, transferTo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {
        private final Long companyId;
        private final Long departmentId;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private Long transferTo;

        private DeleteByIdRequestBuilder(Long companyId, Long departmentId) {
            this.companyId = companyId;
            this.departmentId = departmentId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return DeleteByIdRequestBuilder
         */
        public DeleteByIdRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return DeleteByIdRequestBuilder
         */
        public DeleteByIdRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set transferTo
         * @param transferTo Department ID to move roles and shifts to (optional)
         * @return DeleteByIdRequestBuilder
         */
        public DeleteByIdRequestBuilder transferTo(Long transferTo) {
            this.transferTo = transferTo;
            return this;
        }
        
        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdCall(companyId, departmentId, xApiVersion, xCompanyGuid, transferTo, _callback);
        }


        /**
         * Execute deleteById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteByIdWithHttpInfo(companyId, departmentId, xApiVersion, xCompanyGuid, transferTo);
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteByIdWithHttpInfo(companyId, departmentId, xApiVersion, xCompanyGuid, transferTo);
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteByIdAsync(companyId, departmentId, xApiVersion, xCompanyGuid, transferTo, _callback);
        }
    }

    /**
     * Delete Department
     * 
     * @param companyId Company ID (required)
     * @param departmentId Department ID (required)
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByIdRequestBuilder deleteById(Long companyId, Long departmentId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (departmentId == null) throw new IllegalArgumentException("\"departmentId\" is required but got null");
        return new DeleteByIdRequestBuilder(companyId, departmentId);
    }
    private okhttp3.Call getDepartmentCall(Long companyId, Long departmentId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/departments/{department_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "department_id" + "}", localVarApiClient.escapeString(departmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDepartmentValidateBeforeCall(Long companyId, Long departmentId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getDepartment(Async)");
        }

        // verify the required parameter 'departmentId' is set
        if (departmentId == null) {
            throw new ApiException("Missing the required parameter 'departmentId' when calling getDepartment(Async)");
        }

        return getDepartmentCall(companyId, departmentId, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<DepartmentsGetDepartmentResponse> getDepartmentWithHttpInfo(Long companyId, Long departmentId, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = getDepartmentValidateBeforeCall(companyId, departmentId, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<DepartmentsGetDepartmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDepartmentAsync(Long companyId, Long departmentId, String xApiVersion, UUID xCompanyGuid, final ApiCallback<DepartmentsGetDepartmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDepartmentValidateBeforeCall(companyId, departmentId, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<DepartmentsGetDepartmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDepartmentRequestBuilder {
        private final Long companyId;
        private final Long departmentId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private GetDepartmentRequestBuilder(Long companyId, Long departmentId) {
            this.companyId = companyId;
            this.departmentId = departmentId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetDepartmentRequestBuilder
         */
        public GetDepartmentRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetDepartmentRequestBuilder
         */
        public GetDepartmentRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for getDepartment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDepartmentCall(companyId, departmentId, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute getDepartment request
         * @return DepartmentsGetDepartmentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public DepartmentsGetDepartmentResponse execute() throws ApiException {
            ApiResponse<DepartmentsGetDepartmentResponse> localVarResp = getDepartmentWithHttpInfo(companyId, departmentId, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDepartment request with HTTP info returned
         * @return ApiResponse&lt;DepartmentsGetDepartmentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DepartmentsGetDepartmentResponse> executeWithHttpInfo() throws ApiException {
            return getDepartmentWithHttpInfo(companyId, departmentId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute getDepartment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DepartmentsGetDepartmentResponse> _callback) throws ApiException {
            return getDepartmentAsync(companyId, departmentId, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Retrieve Department
     * 
     * @param companyId Company ID (required)
     * @param departmentId Department ID (required)
     * @return GetDepartmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetDepartmentRequestBuilder getDepartment(Long companyId, Long departmentId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (departmentId == null) throw new IllegalArgumentException("\"departmentId\" is required but got null");
        return new GetDepartmentRequestBuilder(companyId, departmentId);
    }
    private okhttp3.Call listCall(Long companyId, String xApiVersion, UUID xCompanyGuid, String modifiedSince, String cursor, Long limit, Long locationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/departments"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (modifiedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_since", modifiedSince));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Long companyId, String xApiVersion, UUID xCompanyGuid, String modifiedSince, String cursor, Long limit, Long locationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling list(Async)");
        }

        return listCall(companyId, xApiVersion, xCompanyGuid, modifiedSince, cursor, limit, locationId, _callback);

    }


    private ApiResponse<DepartmentsListResponse> listWithHttpInfo(Long companyId, String xApiVersion, UUID xCompanyGuid, String modifiedSince, String cursor, Long limit, Long locationId) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, modifiedSince, cursor, limit, locationId, null);
        Type localVarReturnType = new TypeToken<DepartmentsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Long companyId, String xApiVersion, UUID xCompanyGuid, String modifiedSince, String cursor, Long limit, Long locationId, final ApiCallback<DepartmentsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, modifiedSince, cursor, limit, locationId, _callback);
        Type localVarReturnType = new TypeToken<DepartmentsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final Long companyId;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private String modifiedSince;
        private String cursor;
        private Long limit;
        private Long locationId;

        private ListRequestBuilder(Long companyId) {
            this.companyId = companyId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set modifiedSince
         * @param modifiedSince Return departments that have been modified since the specified date. Format YYYY-MM-DD (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder modifiedSince(String modifiedSince) {
            this.modifiedSince = modifiedSince;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Cursor for the next or previous page of results. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The number of results desired per page. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set locationId
         * @param locationId Return departments that match the provided location ID (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder locationId(Long locationId) {
            this.locationId = locationId;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(companyId, xApiVersion, xCompanyGuid, modifiedSince, cursor, limit, locationId, _callback);
        }


        /**
         * Execute list request
         * @return DepartmentsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public DepartmentsListResponse execute() throws ApiException {
            ApiResponse<DepartmentsListResponse> localVarResp = listWithHttpInfo(companyId, xApiVersion, xCompanyGuid, modifiedSince, cursor, limit, locationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;DepartmentsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DepartmentsListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(companyId, xApiVersion, xCompanyGuid, modifiedSince, cursor, limit, locationId);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DepartmentsListResponse> _callback) throws ApiException {
            return listAsync(companyId, xApiVersion, xCompanyGuid, modifiedSince, cursor, limit, locationId, _callback);
        }
    }

    /**
     * List Departments
     * 
     * @param companyId Company ID (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list(Long companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new ListRequestBuilder(companyId);
    }
    private okhttp3.Call updateDepartmentCall(Long companyId, Long departmentId, DepartmentsUpdateDepartmentRequest departmentsUpdateDepartmentRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = departmentsUpdateDepartmentRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/departments/{department_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "department_id" + "}", localVarApiClient.escapeString(departmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDepartmentValidateBeforeCall(Long companyId, Long departmentId, DepartmentsUpdateDepartmentRequest departmentsUpdateDepartmentRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updateDepartment(Async)");
        }

        // verify the required parameter 'departmentId' is set
        if (departmentId == null) {
            throw new ApiException("Missing the required parameter 'departmentId' when calling updateDepartment(Async)");
        }

        // verify the required parameter 'departmentsUpdateDepartmentRequest' is set
        if (departmentsUpdateDepartmentRequest == null) {
            throw new ApiException("Missing the required parameter 'departmentsUpdateDepartmentRequest' when calling updateDepartment(Async)");
        }

        return updateDepartmentCall(companyId, departmentId, departmentsUpdateDepartmentRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<DepartmentsUpdateDepartmentResponse> updateDepartmentWithHttpInfo(Long companyId, Long departmentId, DepartmentsUpdateDepartmentRequest departmentsUpdateDepartmentRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = updateDepartmentValidateBeforeCall(companyId, departmentId, departmentsUpdateDepartmentRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<DepartmentsUpdateDepartmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDepartmentAsync(Long companyId, Long departmentId, DepartmentsUpdateDepartmentRequest departmentsUpdateDepartmentRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<DepartmentsUpdateDepartmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDepartmentValidateBeforeCall(companyId, departmentId, departmentsUpdateDepartmentRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<DepartmentsUpdateDepartmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDepartmentRequestBuilder {
        private final String name;
        private final Boolean _default;
        private final Long companyId;
        private final Long departmentId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private UpdateDepartmentRequestBuilder(String name, Boolean _default, Long companyId, Long departmentId) {
            this.name = name;
            this._default = _default;
            this.companyId = companyId;
            this.departmentId = departmentId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return UpdateDepartmentRequestBuilder
         */
        public UpdateDepartmentRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return UpdateDepartmentRequestBuilder
         */
        public UpdateDepartmentRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for updateDepartment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DepartmentsUpdateDepartmentRequest departmentsUpdateDepartmentRequest = buildBodyParams();
            return updateDepartmentCall(companyId, departmentId, departmentsUpdateDepartmentRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private DepartmentsUpdateDepartmentRequest buildBodyParams() {
            DepartmentsUpdateDepartmentRequest departmentsUpdateDepartmentRequest = new DepartmentsUpdateDepartmentRequest();
            departmentsUpdateDepartmentRequest.name(this.name);
            departmentsUpdateDepartmentRequest._default(this._default);
            return departmentsUpdateDepartmentRequest;
        }

        /**
         * Execute updateDepartment request
         * @return DepartmentsUpdateDepartmentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public DepartmentsUpdateDepartmentResponse execute() throws ApiException {
            DepartmentsUpdateDepartmentRequest departmentsUpdateDepartmentRequest = buildBodyParams();
            ApiResponse<DepartmentsUpdateDepartmentResponse> localVarResp = updateDepartmentWithHttpInfo(companyId, departmentId, departmentsUpdateDepartmentRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDepartment request with HTTP info returned
         * @return ApiResponse&lt;DepartmentsUpdateDepartmentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DepartmentsUpdateDepartmentResponse> executeWithHttpInfo() throws ApiException {
            DepartmentsUpdateDepartmentRequest departmentsUpdateDepartmentRequest = buildBodyParams();
            return updateDepartmentWithHttpInfo(companyId, departmentId, departmentsUpdateDepartmentRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute updateDepartment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DepartmentsUpdateDepartmentResponse> _callback) throws ApiException {
            DepartmentsUpdateDepartmentRequest departmentsUpdateDepartmentRequest = buildBodyParams();
            return updateDepartmentAsync(companyId, departmentId, departmentsUpdateDepartmentRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Update Department
     * 
     * @param companyId Company ID (required)
     * @param departmentId Department ID (required)
     * @param departmentsUpdateDepartmentRequest  (required)
     * @return UpdateDepartmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDepartmentRequestBuilder updateDepartment(String name, Boolean _default, Long companyId, Long departmentId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (_default == null) throw new IllegalArgumentException("\"_default\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (departmentId == null) throw new IllegalArgumentException("\"departmentId\" is required but got null");
        return new UpdateDepartmentRequestBuilder(name, _default, companyId, departmentId);
    }
}
