/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.LogBookCreateCategoryRequest;
import com.konfigthis.client.model.LogBookCreateCategoryResponse;
import com.konfigthis.client.model.LogBookCreateCommentRequest;
import com.konfigthis.client.model.LogBookCreateCommentResponse;
import com.konfigthis.client.model.LogBookCreatePostRequest;
import com.konfigthis.client.model.LogBookCreatePostRequestAttachmentsInner;
import com.konfigthis.client.model.LogBookCreatePostResponse;
import com.konfigthis.client.model.LogBookGetCommentResponse;
import com.konfigthis.client.model.LogBookGetPostResponse;
import com.konfigthis.client.model.LogBookListCategoriesResponse;
import com.konfigthis.client.model.LogBookListCommentsResponse;
import com.konfigthis.client.model.LogBookListPostsResponse;
import com.konfigthis.client.model.LogBookUpdateCategoryByIdRequest;
import com.konfigthis.client.model.LogBookUpdateCategoryByIdResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LogBookApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LogBookApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LogBookApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCategoryCall(Long companyId, LogBookCreateCategoryRequest logBookCreateCategoryRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = logBookCreateCategoryRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/log_book_categories"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCategoryValidateBeforeCall(Long companyId, LogBookCreateCategoryRequest logBookCreateCategoryRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createCategory(Async)");
        }

        // verify the required parameter 'logBookCreateCategoryRequest' is set
        if (logBookCreateCategoryRequest == null) {
            throw new ApiException("Missing the required parameter 'logBookCreateCategoryRequest' when calling createCategory(Async)");
        }

        return createCategoryCall(companyId, logBookCreateCategoryRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<LogBookCreateCategoryResponse> createCategoryWithHttpInfo(Long companyId, LogBookCreateCategoryRequest logBookCreateCategoryRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = createCategoryValidateBeforeCall(companyId, logBookCreateCategoryRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<LogBookCreateCategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCategoryAsync(Long companyId, LogBookCreateCategoryRequest logBookCreateCategoryRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<LogBookCreateCategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCategoryValidateBeforeCall(companyId, logBookCreateCategoryRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<LogBookCreateCategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCategoryRequestBuilder {
        private final String name;
        private final Long companyId;
        private Integer col;
        private Integer sort;
        private String fieldType;
        private Boolean notify;
        private Boolean required;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private CreateCategoryRequestBuilder(String name, Long companyId) {
            this.name = name;
            this.companyId = companyId;
        }

        /**
         * Set col
         * @param col  (optional)
         * @return CreateCategoryRequestBuilder
         */
        public CreateCategoryRequestBuilder col(Integer col) {
            this.col = col;
            return this;
        }
        
        /**
         * Set sort
         * @param sort  (optional)
         * @return CreateCategoryRequestBuilder
         */
        public CreateCategoryRequestBuilder sort(Integer sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set fieldType
         * @param fieldType  (optional)
         * @return CreateCategoryRequestBuilder
         */
        public CreateCategoryRequestBuilder fieldType(String fieldType) {
            this.fieldType = fieldType;
            return this;
        }
        
        /**
         * Set notify
         * @param notify  (optional)
         * @return CreateCategoryRequestBuilder
         */
        public CreateCategoryRequestBuilder notify(Boolean notify) {
            this.notify = notify;
            return this;
        }
        
        /**
         * Set required
         * @param required  (optional)
         * @return CreateCategoryRequestBuilder
         */
        public CreateCategoryRequestBuilder required(Boolean required) {
            this.required = required;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return CreateCategoryRequestBuilder
         */
        public CreateCategoryRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return CreateCategoryRequestBuilder
         */
        public CreateCategoryRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for createCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LogBookCreateCategoryRequest logBookCreateCategoryRequest = buildBodyParams();
            return createCategoryCall(companyId, logBookCreateCategoryRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private LogBookCreateCategoryRequest buildBodyParams() {
            LogBookCreateCategoryRequest logBookCreateCategoryRequest = new LogBookCreateCategoryRequest();
            logBookCreateCategoryRequest.name(this.name);
            logBookCreateCategoryRequest.col(this.col);
            logBookCreateCategoryRequest.sort(this.sort);
            if (this.fieldType != null)
            logBookCreateCategoryRequest.fieldType(LogBookCreateCategoryRequest.FieldTypeEnum.fromValue(this.fieldType));
            logBookCreateCategoryRequest.notify(this.notify);
            logBookCreateCategoryRequest.required(this.required);
            return logBookCreateCategoryRequest;
        }

        /**
         * Execute createCategory request
         * @return LogBookCreateCategoryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public LogBookCreateCategoryResponse execute() throws ApiException {
            LogBookCreateCategoryRequest logBookCreateCategoryRequest = buildBodyParams();
            ApiResponse<LogBookCreateCategoryResponse> localVarResp = createCategoryWithHttpInfo(companyId, logBookCreateCategoryRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCategory request with HTTP info returned
         * @return ApiResponse&lt;LogBookCreateCategoryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LogBookCreateCategoryResponse> executeWithHttpInfo() throws ApiException {
            LogBookCreateCategoryRequest logBookCreateCategoryRequest = buildBodyParams();
            return createCategoryWithHttpInfo(companyId, logBookCreateCategoryRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute createCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LogBookCreateCategoryResponse> _callback) throws ApiException {
            LogBookCreateCategoryRequest logBookCreateCategoryRequest = buildBodyParams();
            return createCategoryAsync(companyId, logBookCreateCategoryRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Create Log Book Category
     * Beta
     * @param companyId Company ID (required)
     * @param logBookCreateCategoryRequest  (required)
     * @return CreateCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateCategoryRequestBuilder createCategory(String name, Long companyId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new CreateCategoryRequestBuilder(name, companyId);
    }
    private okhttp3.Call createCommentCall(Long companyId, LogBookCreateCommentRequest logBookCreateCommentRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = logBookCreateCommentRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/log_book_comments"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCommentValidateBeforeCall(Long companyId, LogBookCreateCommentRequest logBookCreateCommentRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createComment(Async)");
        }

        // verify the required parameter 'logBookCreateCommentRequest' is set
        if (logBookCreateCommentRequest == null) {
            throw new ApiException("Missing the required parameter 'logBookCreateCommentRequest' when calling createComment(Async)");
        }

        return createCommentCall(companyId, logBookCreateCommentRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<LogBookCreateCommentResponse> createCommentWithHttpInfo(Long companyId, LogBookCreateCommentRequest logBookCreateCommentRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = createCommentValidateBeforeCall(companyId, logBookCreateCommentRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<LogBookCreateCommentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCommentAsync(Long companyId, LogBookCreateCommentRequest logBookCreateCommentRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<LogBookCreateCommentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCommentValidateBeforeCall(companyId, logBookCreateCommentRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<LogBookCreateCommentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCommentRequestBuilder {
        private final Long logBookId;
        private final String message;
        private final Long companyId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private CreateCommentRequestBuilder(Long logBookId, String message, Long companyId) {
            this.logBookId = logBookId;
            this.message = message;
            this.companyId = companyId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return CreateCommentRequestBuilder
         */
        public CreateCommentRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return CreateCommentRequestBuilder
         */
        public CreateCommentRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for createComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LogBookCreateCommentRequest logBookCreateCommentRequest = buildBodyParams();
            return createCommentCall(companyId, logBookCreateCommentRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private LogBookCreateCommentRequest buildBodyParams() {
            LogBookCreateCommentRequest logBookCreateCommentRequest = new LogBookCreateCommentRequest();
            logBookCreateCommentRequest.logBookId(this.logBookId);
            logBookCreateCommentRequest.message(this.message);
            return logBookCreateCommentRequest;
        }

        /**
         * Execute createComment request
         * @return LogBookCreateCommentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public LogBookCreateCommentResponse execute() throws ApiException {
            LogBookCreateCommentRequest logBookCreateCommentRequest = buildBodyParams();
            ApiResponse<LogBookCreateCommentResponse> localVarResp = createCommentWithHttpInfo(companyId, logBookCreateCommentRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createComment request with HTTP info returned
         * @return ApiResponse&lt;LogBookCreateCommentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LogBookCreateCommentResponse> executeWithHttpInfo() throws ApiException {
            LogBookCreateCommentRequest logBookCreateCommentRequest = buildBodyParams();
            return createCommentWithHttpInfo(companyId, logBookCreateCommentRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute createComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LogBookCreateCommentResponse> _callback) throws ApiException {
            LogBookCreateCommentRequest logBookCreateCommentRequest = buildBodyParams();
            return createCommentAsync(companyId, logBookCreateCommentRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Create Log Book Comment
     * Beta
     * @param companyId Company ID (required)
     * @param logBookCreateCommentRequest  (required)
     * @return CreateCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateCommentRequestBuilder createComment(Long logBookId, String message, Long companyId) throws IllegalArgumentException {
        if (logBookId == null) throw new IllegalArgumentException("\"logBookId\" is required but got null");
        if (message == null) throw new IllegalArgumentException("\"message\" is required but got null");
            if (message != null && message.length() < 1) {
              throw new IllegalArgumentException("Invalid value for message. Length must be greater than or equal to 1.");
            }

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new CreateCommentRequestBuilder(logBookId, message, companyId);
    }
    private okhttp3.Call createPostCall(Long companyId, LogBookCreatePostRequest logBookCreatePostRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = logBookCreatePostRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/log_book_posts"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPostValidateBeforeCall(Long companyId, LogBookCreatePostRequest logBookCreatePostRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createPost(Async)");
        }

        // verify the required parameter 'logBookCreatePostRequest' is set
        if (logBookCreatePostRequest == null) {
            throw new ApiException("Missing the required parameter 'logBookCreatePostRequest' when calling createPost(Async)");
        }

        return createPostCall(companyId, logBookCreatePostRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<LogBookCreatePostResponse> createPostWithHttpInfo(Long companyId, LogBookCreatePostRequest logBookCreatePostRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = createPostValidateBeforeCall(companyId, logBookCreatePostRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<LogBookCreatePostResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPostAsync(Long companyId, LogBookCreatePostRequest logBookCreatePostRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<LogBookCreatePostResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPostValidateBeforeCall(companyId, logBookCreatePostRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<LogBookCreatePostResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePostRequestBuilder {
        private final Long locationId;
        private final Long logBookCategoryId;
        private final String date;
        private final String message;
        private final Long companyId;
        private List<LogBookCreatePostRequestAttachmentsInner> attachments;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private CreatePostRequestBuilder(Long locationId, Long logBookCategoryId, String date, String message, Long companyId) {
            this.locationId = locationId;
            this.logBookCategoryId = logBookCategoryId;
            this.date = date;
            this.message = message;
            this.companyId = companyId;
        }

        /**
         * Set attachments
         * @param attachments  (optional)
         * @return CreatePostRequestBuilder
         */
        public CreatePostRequestBuilder attachments(List<LogBookCreatePostRequestAttachmentsInner> attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return CreatePostRequestBuilder
         */
        public CreatePostRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return CreatePostRequestBuilder
         */
        public CreatePostRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for createPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LogBookCreatePostRequest logBookCreatePostRequest = buildBodyParams();
            return createPostCall(companyId, logBookCreatePostRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private LogBookCreatePostRequest buildBodyParams() {
            LogBookCreatePostRequest logBookCreatePostRequest = new LogBookCreatePostRequest();
            logBookCreatePostRequest.locationId(this.locationId);
            logBookCreatePostRequest.logBookCategoryId(this.logBookCategoryId);
            logBookCreatePostRequest.date(this.date);
            logBookCreatePostRequest.message(this.message);
            logBookCreatePostRequest.attachments(this.attachments);
            return logBookCreatePostRequest;
        }

        /**
         * Execute createPost request
         * @return LogBookCreatePostResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public LogBookCreatePostResponse execute() throws ApiException {
            LogBookCreatePostRequest logBookCreatePostRequest = buildBodyParams();
            ApiResponse<LogBookCreatePostResponse> localVarResp = createPostWithHttpInfo(companyId, logBookCreatePostRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPost request with HTTP info returned
         * @return ApiResponse&lt;LogBookCreatePostResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LogBookCreatePostResponse> executeWithHttpInfo() throws ApiException {
            LogBookCreatePostRequest logBookCreatePostRequest = buildBodyParams();
            return createPostWithHttpInfo(companyId, logBookCreatePostRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute createPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LogBookCreatePostResponse> _callback) throws ApiException {
            LogBookCreatePostRequest logBookCreatePostRequest = buildBodyParams();
            return createPostAsync(companyId, logBookCreatePostRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Create Log Book Post
     * Beta
     * @param companyId Company ID (required)
     * @param logBookCreatePostRequest  (required)
     * @return CreatePostRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreatePostRequestBuilder createPost(Long locationId, Long logBookCategoryId, String date, String message, Long companyId) throws IllegalArgumentException {
        if (locationId == null) throw new IllegalArgumentException("\"locationId\" is required but got null");
        if (logBookCategoryId == null) throw new IllegalArgumentException("\"logBookCategoryId\" is required but got null");
        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
            

        if (message == null) throw new IllegalArgumentException("\"message\" is required but got null");
            if (message != null && message.length() < 1) {
              throw new IllegalArgumentException("Invalid value for message. Length must be greater than or equal to 1.");
            }

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new CreatePostRequestBuilder(locationId, logBookCategoryId, date, message, companyId);
    }
    private okhttp3.Call deleteCategoryByIdCall(Long companyId, Long id, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/log_book_categories/{id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCategoryByIdValidateBeforeCall(Long companyId, Long id, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling deleteCategoryById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCategoryById(Async)");
        }

        return deleteCategoryByIdCall(companyId, id, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<Void> deleteCategoryByIdWithHttpInfo(Long companyId, Long id, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = deleteCategoryByIdValidateBeforeCall(companyId, id, xApiVersion, xCompanyGuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCategoryByIdAsync(Long companyId, Long id, String xApiVersion, UUID xCompanyGuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCategoryByIdValidateBeforeCall(companyId, id, xApiVersion, xCompanyGuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCategoryByIdRequestBuilder {
        private final Long companyId;
        private final Long id;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private DeleteCategoryByIdRequestBuilder(Long companyId, Long id) {
            this.companyId = companyId;
            this.id = id;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return DeleteCategoryByIdRequestBuilder
         */
        public DeleteCategoryByIdRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return DeleteCategoryByIdRequestBuilder
         */
        public DeleteCategoryByIdRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for deleteCategoryById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCategoryByIdCall(companyId, id, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute deleteCategoryById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCategoryByIdWithHttpInfo(companyId, id, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute deleteCategoryById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCategoryByIdWithHttpInfo(companyId, id, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute deleteCategoryById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCategoryByIdAsync(companyId, id, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Delete Log Book Category
     * Beta
     * @param companyId Company ID (required)
     * @param id Category ID (required)
     * @return DeleteCategoryByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCategoryByIdRequestBuilder deleteCategoryById(Long companyId, Long id) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DeleteCategoryByIdRequestBuilder(companyId, id);
    }
    private okhttp3.Call deleteCommentCall(Long companyId, Long id, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/log_book_comments/{id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCommentValidateBeforeCall(Long companyId, Long id, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling deleteComment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteComment(Async)");
        }

        return deleteCommentCall(companyId, id, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<Void> deleteCommentWithHttpInfo(Long companyId, Long id, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = deleteCommentValidateBeforeCall(companyId, id, xApiVersion, xCompanyGuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCommentAsync(Long companyId, Long id, String xApiVersion, UUID xCompanyGuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCommentValidateBeforeCall(companyId, id, xApiVersion, xCompanyGuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCommentRequestBuilder {
        private final Long companyId;
        private final Long id;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private DeleteCommentRequestBuilder(Long companyId, Long id) {
            this.companyId = companyId;
            this.id = id;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return DeleteCommentRequestBuilder
         */
        public DeleteCommentRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return DeleteCommentRequestBuilder
         */
        public DeleteCommentRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for deleteComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCommentCall(companyId, id, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute deleteComment request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCommentWithHttpInfo(companyId, id, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute deleteComment request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCommentWithHttpInfo(companyId, id, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute deleteComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCommentAsync(companyId, id, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Delete Log Book Comment
     * Beta
     * @param companyId Company ID (required)
     * @param id Log Book Comment ID (required)
     * @return DeleteCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCommentRequestBuilder deleteComment(Long companyId, Long id) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DeleteCommentRequestBuilder(companyId, id);
    }
    private okhttp3.Call deletePostCall(Long companyId, Long id, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/log_book_posts/{id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePostValidateBeforeCall(Long companyId, Long id, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling deletePost(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletePost(Async)");
        }

        return deletePostCall(companyId, id, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<Void> deletePostWithHttpInfo(Long companyId, Long id, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = deletePostValidateBeforeCall(companyId, id, xApiVersion, xCompanyGuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePostAsync(Long companyId, Long id, String xApiVersion, UUID xCompanyGuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePostValidateBeforeCall(companyId, id, xApiVersion, xCompanyGuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePostRequestBuilder {
        private final Long companyId;
        private final Long id;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private DeletePostRequestBuilder(Long companyId, Long id) {
            this.companyId = companyId;
            this.id = id;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return DeletePostRequestBuilder
         */
        public DeletePostRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return DeletePostRequestBuilder
         */
        public DeletePostRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for deletePost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePostCall(companyId, id, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute deletePost request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePostWithHttpInfo(companyId, id, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute deletePost request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePostWithHttpInfo(companyId, id, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute deletePost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePostAsync(companyId, id, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Delete Log Book Post
     * Beta
     * @param companyId Company ID (required)
     * @param id Log Book Post ID (required)
     * @return DeletePostRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeletePostRequestBuilder deletePost(Long companyId, Long id) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DeletePostRequestBuilder(companyId, id);
    }
    private okhttp3.Call getCommentCall(Long companyId, Long id, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/log_book_comments/{id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommentValidateBeforeCall(Long companyId, Long id, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getComment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getComment(Async)");
        }

        return getCommentCall(companyId, id, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<LogBookGetCommentResponse> getCommentWithHttpInfo(Long companyId, Long id, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = getCommentValidateBeforeCall(companyId, id, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<LogBookGetCommentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCommentAsync(Long companyId, Long id, String xApiVersion, UUID xCompanyGuid, final ApiCallback<LogBookGetCommentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommentValidateBeforeCall(companyId, id, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<LogBookGetCommentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCommentRequestBuilder {
        private final Long companyId;
        private final Long id;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private GetCommentRequestBuilder(Long companyId, Long id) {
            this.companyId = companyId;
            this.id = id;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetCommentRequestBuilder
         */
        public GetCommentRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetCommentRequestBuilder
         */
        public GetCommentRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for getComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCommentCall(companyId, id, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute getComment request
         * @return LogBookGetCommentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public LogBookGetCommentResponse execute() throws ApiException {
            ApiResponse<LogBookGetCommentResponse> localVarResp = getCommentWithHttpInfo(companyId, id, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getComment request with HTTP info returned
         * @return ApiResponse&lt;LogBookGetCommentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LogBookGetCommentResponse> executeWithHttpInfo() throws ApiException {
            return getCommentWithHttpInfo(companyId, id, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute getComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LogBookGetCommentResponse> _callback) throws ApiException {
            return getCommentAsync(companyId, id, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Retrieve Log Book Comment
     * Beta
     * @param companyId Company ID (required)
     * @param id Log Book Comment ID (required)
     * @return GetCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCommentRequestBuilder getComment(Long companyId, Long id) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetCommentRequestBuilder(companyId, id);
    }
    private okhttp3.Call getPostCall(Long companyId, Long id, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/log_book_posts/{id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPostValidateBeforeCall(Long companyId, Long id, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getPost(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPost(Async)");
        }

        return getPostCall(companyId, id, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<LogBookGetPostResponse> getPostWithHttpInfo(Long companyId, Long id, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = getPostValidateBeforeCall(companyId, id, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<LogBookGetPostResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPostAsync(Long companyId, Long id, String xApiVersion, UUID xCompanyGuid, final ApiCallback<LogBookGetPostResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPostValidateBeforeCall(companyId, id, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<LogBookGetPostResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPostRequestBuilder {
        private final Long companyId;
        private final Long id;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private GetPostRequestBuilder(Long companyId, Long id) {
            this.companyId = companyId;
            this.id = id;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetPostRequestBuilder
         */
        public GetPostRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetPostRequestBuilder
         */
        public GetPostRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for getPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPostCall(companyId, id, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute getPost request
         * @return LogBookGetPostResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public LogBookGetPostResponse execute() throws ApiException {
            ApiResponse<LogBookGetPostResponse> localVarResp = getPostWithHttpInfo(companyId, id, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPost request with HTTP info returned
         * @return ApiResponse&lt;LogBookGetPostResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LogBookGetPostResponse> executeWithHttpInfo() throws ApiException {
            return getPostWithHttpInfo(companyId, id, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute getPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LogBookGetPostResponse> _callback) throws ApiException {
            return getPostAsync(companyId, id, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Retrieve Log Book Post
     * Beta
     * @param companyId Company ID (required)
     * @param id Log Book Post ID (required)
     * @return GetPostRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetPostRequestBuilder getPost(Long companyId, Long id) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetPostRequestBuilder(companyId, id);
    }
    private okhttp3.Call listCategoriesCall(Long companyId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/log_book_categories"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCategoriesValidateBeforeCall(Long companyId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling listCategories(Async)");
        }

        return listCategoriesCall(companyId, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<LogBookListCategoriesResponse> listCategoriesWithHttpInfo(Long companyId, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = listCategoriesValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<LogBookListCategoriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCategoriesAsync(Long companyId, String xApiVersion, UUID xCompanyGuid, final ApiCallback<LogBookListCategoriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCategoriesValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<LogBookListCategoriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCategoriesRequestBuilder {
        private final Long companyId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private ListCategoriesRequestBuilder(Long companyId) {
            this.companyId = companyId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return ListCategoriesRequestBuilder
         */
        public ListCategoriesRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return ListCategoriesRequestBuilder
         */
        public ListCategoriesRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for listCategories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCategoriesCall(companyId, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute listCategories request
         * @return LogBookListCategoriesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public LogBookListCategoriesResponse execute() throws ApiException {
            ApiResponse<LogBookListCategoriesResponse> localVarResp = listCategoriesWithHttpInfo(companyId, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCategories request with HTTP info returned
         * @return ApiResponse&lt;LogBookListCategoriesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LogBookListCategoriesResponse> executeWithHttpInfo() throws ApiException {
            return listCategoriesWithHttpInfo(companyId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute listCategories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LogBookListCategoriesResponse> _callback) throws ApiException {
            return listCategoriesAsync(companyId, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * List Log Book Categories
     * Beta
     * @param companyId Company ID (required)
     * @return ListCategoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListCategoriesRequestBuilder listCategories(Long companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new ListCategoriesRequestBuilder(companyId);
    }
    private okhttp3.Call listCommentsCall(Long companyId, List<Long> logBookIds, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/log_book_comments"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (logBookIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "log_book_ids", logBookIds));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCommentsValidateBeforeCall(Long companyId, List<Long> logBookIds, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling listComments(Async)");
        }

        // verify the required parameter 'logBookIds' is set
        if (logBookIds == null) {
            throw new ApiException("Missing the required parameter 'logBookIds' when calling listComments(Async)");
        }

        return listCommentsCall(companyId, logBookIds, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<LogBookListCommentsResponse> listCommentsWithHttpInfo(Long companyId, List<Long> logBookIds, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = listCommentsValidateBeforeCall(companyId, logBookIds, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<LogBookListCommentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCommentsAsync(Long companyId, List<Long> logBookIds, String xApiVersion, UUID xCompanyGuid, final ApiCallback<LogBookListCommentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCommentsValidateBeforeCall(companyId, logBookIds, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<LogBookListCommentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCommentsRequestBuilder {
        private final Long companyId;
        private final List<Long> logBookIds;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private ListCommentsRequestBuilder(Long companyId, List<Long> logBookIds) {
            this.companyId = companyId;
            this.logBookIds = logBookIds;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return ListCommentsRequestBuilder
         */
        public ListCommentsRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return ListCommentsRequestBuilder
         */
        public ListCommentsRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for listComments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCommentsCall(companyId, logBookIds, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute listComments request
         * @return LogBookListCommentsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public LogBookListCommentsResponse execute() throws ApiException {
            ApiResponse<LogBookListCommentsResponse> localVarResp = listCommentsWithHttpInfo(companyId, logBookIds, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listComments request with HTTP info returned
         * @return ApiResponse&lt;LogBookListCommentsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LogBookListCommentsResponse> executeWithHttpInfo() throws ApiException {
            return listCommentsWithHttpInfo(companyId, logBookIds, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute listComments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LogBookListCommentsResponse> _callback) throws ApiException {
            return listCommentsAsync(companyId, logBookIds, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * List Log Book Comments
     * Beta
     * @param companyId Company ID (required)
     * @param logBookIds Log book post id associated with log book comments (required)
     * @return ListCommentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListCommentsRequestBuilder listComments(Long companyId, List<Long> logBookIds) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (logBookIds == null) throw new IllegalArgumentException("\"logBookIds\" is required but got null");
        return new ListCommentsRequestBuilder(companyId, logBookIds);
    }
    private okhttp3.Call listPostsCall(Long companyId, String xApiVersion, UUID xCompanyGuid, Long locationId, Long logBookCategoryId, Long userId, String date, String postedDateGte, String postedDateLte, String message, String orderField, String orderDir, String cursor, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/log_book_posts"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (logBookCategoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("log_book_category_id", logBookCategoryId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (postedDateGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("posted_date_gte", postedDateGte));
        }

        if (postedDateLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("posted_date_lte", postedDateLte));
        }

        if (message != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("message", message));
        }

        if (orderField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_field", orderField));
        }

        if (orderDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_dir", orderDir));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPostsValidateBeforeCall(Long companyId, String xApiVersion, UUID xCompanyGuid, Long locationId, Long logBookCategoryId, Long userId, String date, String postedDateGte, String postedDateLte, String message, String orderField, String orderDir, String cursor, Long limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling listPosts(Async)");
        }

        return listPostsCall(companyId, xApiVersion, xCompanyGuid, locationId, logBookCategoryId, userId, date, postedDateGte, postedDateLte, message, orderField, orderDir, cursor, limit, _callback);

    }


    private ApiResponse<LogBookListPostsResponse> listPostsWithHttpInfo(Long companyId, String xApiVersion, UUID xCompanyGuid, Long locationId, Long logBookCategoryId, Long userId, String date, String postedDateGte, String postedDateLte, String message, String orderField, String orderDir, String cursor, Long limit) throws ApiException {
        okhttp3.Call localVarCall = listPostsValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, locationId, logBookCategoryId, userId, date, postedDateGte, postedDateLte, message, orderField, orderDir, cursor, limit, null);
        Type localVarReturnType = new TypeToken<LogBookListPostsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPostsAsync(Long companyId, String xApiVersion, UUID xCompanyGuid, Long locationId, Long logBookCategoryId, Long userId, String date, String postedDateGte, String postedDateLte, String message, String orderField, String orderDir, String cursor, Long limit, final ApiCallback<LogBookListPostsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPostsValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, locationId, logBookCategoryId, userId, date, postedDateGte, postedDateLte, message, orderField, orderDir, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<LogBookListPostsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPostsRequestBuilder {
        private final Long companyId;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private Long locationId;
        private Long logBookCategoryId;
        private Long userId;
        private String date;
        private String postedDateGte;
        private String postedDateLte;
        private String message;
        private String orderField;
        private String orderDir;
        private String cursor;
        private Long limit;

        private ListPostsRequestBuilder(Long companyId) {
            this.companyId = companyId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return ListPostsRequestBuilder
         */
        public ListPostsRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return ListPostsRequestBuilder
         */
        public ListPostsRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set locationId
         * @param locationId Location ID (optional)
         * @return ListPostsRequestBuilder
         */
        public ListPostsRequestBuilder locationId(Long locationId) {
            this.locationId = locationId;
            return this;
        }
        
        /**
         * Set logBookCategoryId
         * @param logBookCategoryId Log Book Category ID (optional)
         * @return ListPostsRequestBuilder
         */
        public ListPostsRequestBuilder logBookCategoryId(Long logBookCategoryId) {
            this.logBookCategoryId = logBookCategoryId;
            return this;
        }
        
        /**
         * Set userId
         * @param userId Post Author User ID (optional)
         * @return ListPostsRequestBuilder
         */
        public ListPostsRequestBuilder userId(Long userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set date
         * @param date Date of log book creation, format YYYY-MM-DD (optional)
         * @return ListPostsRequestBuilder
         */
        public ListPostsRequestBuilder date(String date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set postedDateGte
         * @param postedDateGte List only log book posts from dates inclusive after, format YYYY-MM-DD (optional)
         * @return ListPostsRequestBuilder
         */
        public ListPostsRequestBuilder postedDateGte(String postedDateGte) {
            this.postedDateGte = postedDateGte;
            return this;
        }
        
        /**
         * Set postedDateLte
         * @param postedDateLte List only log book posts from dates inclusive before, format YYYY-MM-DD (optional)
         * @return ListPostsRequestBuilder
         */
        public ListPostsRequestBuilder postedDateLte(String postedDateLte) {
            this.postedDateLte = postedDateLte;
            return this;
        }
        
        /**
         * Set message
         * @param message List only posts containing the message (optional)
         * @return ListPostsRequestBuilder
         */
        public ListPostsRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Set orderField
         * @param orderField Order listed log book posts by a field (optional)
         * @return ListPostsRequestBuilder
         */
        public ListPostsRequestBuilder orderField(String orderField) {
            this.orderField = orderField;
            return this;
        }
        
        /**
         * Set orderDir
         * @param orderDir Specified direction to order listed log book posts (optional)
         * @return ListPostsRequestBuilder
         */
        public ListPostsRequestBuilder orderDir(String orderDir) {
            this.orderDir = orderDir;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Cursor for the next or previous page of results. (optional)
         * @return ListPostsRequestBuilder
         */
        public ListPostsRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The number of results desired per page. (optional)
         * @return ListPostsRequestBuilder
         */
        public ListPostsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listPosts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPostsCall(companyId, xApiVersion, xCompanyGuid, locationId, logBookCategoryId, userId, date, postedDateGte, postedDateLte, message, orderField, orderDir, cursor, limit, _callback);
        }


        /**
         * Execute listPosts request
         * @return LogBookListPostsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public LogBookListPostsResponse execute() throws ApiException {
            ApiResponse<LogBookListPostsResponse> localVarResp = listPostsWithHttpInfo(companyId, xApiVersion, xCompanyGuid, locationId, logBookCategoryId, userId, date, postedDateGte, postedDateLte, message, orderField, orderDir, cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPosts request with HTTP info returned
         * @return ApiResponse&lt;LogBookListPostsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LogBookListPostsResponse> executeWithHttpInfo() throws ApiException {
            return listPostsWithHttpInfo(companyId, xApiVersion, xCompanyGuid, locationId, logBookCategoryId, userId, date, postedDateGte, postedDateLte, message, orderField, orderDir, cursor, limit);
        }

        /**
         * Execute listPosts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LogBookListPostsResponse> _callback) throws ApiException {
            return listPostsAsync(companyId, xApiVersion, xCompanyGuid, locationId, logBookCategoryId, userId, date, postedDateGte, postedDateLte, message, orderField, orderDir, cursor, limit, _callback);
        }
    }

    /**
     * List Log Book Posts
     * Beta
     * @param companyId Company ID (required)
     * @return ListPostsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListPostsRequestBuilder listPosts(Long companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new ListPostsRequestBuilder(companyId);
    }
    private okhttp3.Call updateCategoryByIdCall(Long companyId, Long id, LogBookUpdateCategoryByIdRequest logBookUpdateCategoryByIdRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = logBookUpdateCategoryByIdRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/log_book_categories/{id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCategoryByIdValidateBeforeCall(Long companyId, Long id, LogBookUpdateCategoryByIdRequest logBookUpdateCategoryByIdRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updateCategoryById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCategoryById(Async)");
        }

        // verify the required parameter 'logBookUpdateCategoryByIdRequest' is set
        if (logBookUpdateCategoryByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'logBookUpdateCategoryByIdRequest' when calling updateCategoryById(Async)");
        }

        return updateCategoryByIdCall(companyId, id, logBookUpdateCategoryByIdRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<LogBookUpdateCategoryByIdResponse> updateCategoryByIdWithHttpInfo(Long companyId, Long id, LogBookUpdateCategoryByIdRequest logBookUpdateCategoryByIdRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = updateCategoryByIdValidateBeforeCall(companyId, id, logBookUpdateCategoryByIdRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<LogBookUpdateCategoryByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCategoryByIdAsync(Long companyId, Long id, LogBookUpdateCategoryByIdRequest logBookUpdateCategoryByIdRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<LogBookUpdateCategoryByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCategoryByIdValidateBeforeCall(companyId, id, logBookUpdateCategoryByIdRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<LogBookUpdateCategoryByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCategoryByIdRequestBuilder {
        private final Long companyId;
        private final Long id;
        private String name;
        private Integer col;
        private Integer sort;
        private String fieldType;
        private Boolean notify;
        private Boolean required;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private UpdateCategoryByIdRequestBuilder(Long companyId, Long id) {
            this.companyId = companyId;
            this.id = id;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return UpdateCategoryByIdRequestBuilder
         */
        public UpdateCategoryByIdRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set col
         * @param col  (optional)
         * @return UpdateCategoryByIdRequestBuilder
         */
        public UpdateCategoryByIdRequestBuilder col(Integer col) {
            this.col = col;
            return this;
        }
        
        /**
         * Set sort
         * @param sort  (optional)
         * @return UpdateCategoryByIdRequestBuilder
         */
        public UpdateCategoryByIdRequestBuilder sort(Integer sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set fieldType
         * @param fieldType  (optional)
         * @return UpdateCategoryByIdRequestBuilder
         */
        public UpdateCategoryByIdRequestBuilder fieldType(String fieldType) {
            this.fieldType = fieldType;
            return this;
        }
        
        /**
         * Set notify
         * @param notify  (optional)
         * @return UpdateCategoryByIdRequestBuilder
         */
        public UpdateCategoryByIdRequestBuilder notify(Boolean notify) {
            this.notify = notify;
            return this;
        }
        
        /**
         * Set required
         * @param required  (optional)
         * @return UpdateCategoryByIdRequestBuilder
         */
        public UpdateCategoryByIdRequestBuilder required(Boolean required) {
            this.required = required;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return UpdateCategoryByIdRequestBuilder
         */
        public UpdateCategoryByIdRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return UpdateCategoryByIdRequestBuilder
         */
        public UpdateCategoryByIdRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for updateCategoryById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LogBookUpdateCategoryByIdRequest logBookUpdateCategoryByIdRequest = buildBodyParams();
            return updateCategoryByIdCall(companyId, id, logBookUpdateCategoryByIdRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private LogBookUpdateCategoryByIdRequest buildBodyParams() {
            LogBookUpdateCategoryByIdRequest logBookUpdateCategoryByIdRequest = new LogBookUpdateCategoryByIdRequest();
            logBookUpdateCategoryByIdRequest.name(this.name);
            logBookUpdateCategoryByIdRequest.col(this.col);
            logBookUpdateCategoryByIdRequest.sort(this.sort);
            if (this.fieldType != null)
            logBookUpdateCategoryByIdRequest.fieldType(LogBookUpdateCategoryByIdRequest.FieldTypeEnum.fromValue(this.fieldType));
            logBookUpdateCategoryByIdRequest.notify(this.notify);
            logBookUpdateCategoryByIdRequest.required(this.required);
            return logBookUpdateCategoryByIdRequest;
        }

        /**
         * Execute updateCategoryById request
         * @return LogBookUpdateCategoryByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public LogBookUpdateCategoryByIdResponse execute() throws ApiException {
            LogBookUpdateCategoryByIdRequest logBookUpdateCategoryByIdRequest = buildBodyParams();
            ApiResponse<LogBookUpdateCategoryByIdResponse> localVarResp = updateCategoryByIdWithHttpInfo(companyId, id, logBookUpdateCategoryByIdRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCategoryById request with HTTP info returned
         * @return ApiResponse&lt;LogBookUpdateCategoryByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LogBookUpdateCategoryByIdResponse> executeWithHttpInfo() throws ApiException {
            LogBookUpdateCategoryByIdRequest logBookUpdateCategoryByIdRequest = buildBodyParams();
            return updateCategoryByIdWithHttpInfo(companyId, id, logBookUpdateCategoryByIdRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute updateCategoryById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LogBookUpdateCategoryByIdResponse> _callback) throws ApiException {
            LogBookUpdateCategoryByIdRequest logBookUpdateCategoryByIdRequest = buildBodyParams();
            return updateCategoryByIdAsync(companyId, id, logBookUpdateCategoryByIdRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Update Log Book Category
     * Beta
     * @param companyId Company ID (required)
     * @param id Category ID (required)
     * @param logBookUpdateCategoryByIdRequest  (required)
     * @return UpdateCategoryByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCategoryByIdRequestBuilder updateCategoryById(Long companyId, Long id) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UpdateCategoryByIdRequestBuilder(companyId, id);
    }
}
