/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ScheduleEnforcementListScheduledShiftsResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ScheduleEnforcementApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScheduleEnforcementApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ScheduleEnforcementApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call listScheduledShiftsCall(Long companyId, String id, Integer locationId, String xApiVersion, UUID xCompanyGuid, Integer gracePeriod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/shifts_scheduled/{id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (gracePeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("grace_period", gracePeriod));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listScheduledShiftsValidateBeforeCall(Long companyId, String id, Integer locationId, String xApiVersion, UUID xCompanyGuid, Integer gracePeriod, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling listScheduledShifts(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listScheduledShifts(Async)");
        }

        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling listScheduledShifts(Async)");
        }

        return listScheduledShiftsCall(companyId, id, locationId, xApiVersion, xCompanyGuid, gracePeriod, _callback);

    }


    private ApiResponse<ScheduleEnforcementListScheduledShiftsResponse> listScheduledShiftsWithHttpInfo(Long companyId, String id, Integer locationId, String xApiVersion, UUID xCompanyGuid, Integer gracePeriod) throws ApiException {
        okhttp3.Call localVarCall = listScheduledShiftsValidateBeforeCall(companyId, id, locationId, xApiVersion, xCompanyGuid, gracePeriod, null);
        Type localVarReturnType = new TypeToken<ScheduleEnforcementListScheduledShiftsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listScheduledShiftsAsync(Long companyId, String id, Integer locationId, String xApiVersion, UUID xCompanyGuid, Integer gracePeriod, final ApiCallback<ScheduleEnforcementListScheduledShiftsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listScheduledShiftsValidateBeforeCall(companyId, id, locationId, xApiVersion, xCompanyGuid, gracePeriod, _callback);
        Type localVarReturnType = new TypeToken<ScheduleEnforcementListScheduledShiftsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListScheduledShiftsRequestBuilder {
        private final Long companyId;
        private final String id;
        private final Integer locationId;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private Integer gracePeriod;

        private ListScheduledShiftsRequestBuilder(Long companyId, String id, Integer locationId) {
            this.companyId = companyId;
            this.id = id;
            this.locationId = locationId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return ListScheduledShiftsRequestBuilder
         */
        public ListScheduledShiftsRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return ListScheduledShiftsRequestBuilder
         */
        public ListScheduledShiftsRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set gracePeriod
         * @param gracePeriod Grace period in minutes. (optional)
         * @return ListScheduledShiftsRequestBuilder
         */
        public ListScheduledShiftsRequestBuilder gracePeriod(Integer gracePeriod) {
            this.gracePeriod = gracePeriod;
            return this;
        }
        
        /**
         * Build call for listScheduledShifts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listScheduledShiftsCall(companyId, id, locationId, xApiVersion, xCompanyGuid, gracePeriod, _callback);
        }


        /**
         * Execute listScheduledShifts request
         * @return ScheduleEnforcementListScheduledShiftsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ScheduleEnforcementListScheduledShiftsResponse execute() throws ApiException {
            ApiResponse<ScheduleEnforcementListScheduledShiftsResponse> localVarResp = listScheduledShiftsWithHttpInfo(companyId, id, locationId, xApiVersion, xCompanyGuid, gracePeriod);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listScheduledShifts request with HTTP info returned
         * @return ApiResponse&lt;ScheduleEnforcementListScheduledShiftsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScheduleEnforcementListScheduledShiftsResponse> executeWithHttpInfo() throws ApiException {
            return listScheduledShiftsWithHttpInfo(companyId, id, locationId, xApiVersion, xCompanyGuid, gracePeriod);
        }

        /**
         * Execute listScheduledShifts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScheduleEnforcementListScheduledShiftsResponse> _callback) throws ApiException {
            return listScheduledShiftsAsync(companyId, id, locationId, xApiVersion, xCompanyGuid, gracePeriod, _callback);
        }
    }

    /**
     * List Scheduled Shifts
     * 
     * @param companyId Company ID (required)
     * @param id Specified user_id of the user to check if scheduled. If the value begins with punch_id: then this specifies a user punch_id. (required)
     * @param locationId Location ID. (required)
     * @return ListScheduledShiftsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListScheduledShiftsRequestBuilder listScheduledShifts(Long companyId, String id, Integer locationId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (locationId == null) throw new IllegalArgumentException("\"locationId\" is required but got null");
        return new ListScheduledShiftsRequestBuilder(companyId, id, locationId);
    }
}
