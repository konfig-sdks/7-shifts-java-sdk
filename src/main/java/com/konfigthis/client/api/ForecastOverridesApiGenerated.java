/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ForecastOverridesBulkCreateProjectedForecastOverrideRequest;
import com.konfigthis.client.model.ForecastOverridesBulkCreateProjectedForecastOverrideRequestDataInner;
import com.konfigthis.client.model.ForecastOverridesBulkCreateProjectedForecastOverrideResponse;
import com.konfigthis.client.model.ForecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner;
import com.konfigthis.client.model.ForecastOverridesCreateDailyProjectedForecastOverrideRequest;
import com.konfigthis.client.model.ForecastOverridesCreateDailyProjectedForecastOverrideResponse;
import com.konfigthis.client.model.ForecastOverridesOverrideIntervalRequest;
import com.konfigthis.client.model.ForecastOverridesSyncProjectedForecastOverrideRequest;
import com.konfigthis.client.model.ForecastOverridesSyncProjectedSalesIntervalRequest;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ForecastOverridesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ForecastOverridesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ForecastOverridesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call bulkCreateProjectedForecastOverrideCall(Long companyId, Long locationId, ForecastOverridesBulkCreateProjectedForecastOverrideRequest forecastOverridesBulkCreateProjectedForecastOverrideRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = forecastOverridesBulkCreateProjectedForecastOverrideRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/location/{location_id}/forecast_overrides"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "location_id" + "}", localVarApiClient.escapeString(locationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkCreateProjectedForecastOverrideValidateBeforeCall(Long companyId, Long locationId, ForecastOverridesBulkCreateProjectedForecastOverrideRequest forecastOverridesBulkCreateProjectedForecastOverrideRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling bulkCreateProjectedForecastOverride(Async)");
        }

        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling bulkCreateProjectedForecastOverride(Async)");
        }

        // verify the required parameter 'forecastOverridesBulkCreateProjectedForecastOverrideRequest' is set
        if (forecastOverridesBulkCreateProjectedForecastOverrideRequest == null) {
            throw new ApiException("Missing the required parameter 'forecastOverridesBulkCreateProjectedForecastOverrideRequest' when calling bulkCreateProjectedForecastOverride(Async)");
        }

        return bulkCreateProjectedForecastOverrideCall(companyId, locationId, forecastOverridesBulkCreateProjectedForecastOverrideRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<ForecastOverridesBulkCreateProjectedForecastOverrideResponse> bulkCreateProjectedForecastOverrideWithHttpInfo(Long companyId, Long locationId, ForecastOverridesBulkCreateProjectedForecastOverrideRequest forecastOverridesBulkCreateProjectedForecastOverrideRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = bulkCreateProjectedForecastOverrideValidateBeforeCall(companyId, locationId, forecastOverridesBulkCreateProjectedForecastOverrideRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<ForecastOverridesBulkCreateProjectedForecastOverrideResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call bulkCreateProjectedForecastOverrideAsync(Long companyId, Long locationId, ForecastOverridesBulkCreateProjectedForecastOverrideRequest forecastOverridesBulkCreateProjectedForecastOverrideRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<ForecastOverridesBulkCreateProjectedForecastOverrideResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkCreateProjectedForecastOverrideValidateBeforeCall(companyId, locationId, forecastOverridesBulkCreateProjectedForecastOverrideRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<ForecastOverridesBulkCreateProjectedForecastOverrideResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BulkCreateProjectedForecastOverrideRequestBuilder {
        private final List<ForecastOverridesBulkCreateProjectedForecastOverrideRequestDataInner> data;
        private final Long companyId;
        private final Long locationId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private BulkCreateProjectedForecastOverrideRequestBuilder(List<ForecastOverridesBulkCreateProjectedForecastOverrideRequestDataInner> data, Long companyId, Long locationId) {
            this.data = data;
            this.companyId = companyId;
            this.locationId = locationId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return BulkCreateProjectedForecastOverrideRequestBuilder
         */
        public BulkCreateProjectedForecastOverrideRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return BulkCreateProjectedForecastOverrideRequestBuilder
         */
        public BulkCreateProjectedForecastOverrideRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for bulkCreateProjectedForecastOverride
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ForecastOverridesBulkCreateProjectedForecastOverrideRequest forecastOverridesBulkCreateProjectedForecastOverrideRequest = buildBodyParams();
            return bulkCreateProjectedForecastOverrideCall(companyId, locationId, forecastOverridesBulkCreateProjectedForecastOverrideRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private ForecastOverridesBulkCreateProjectedForecastOverrideRequest buildBodyParams() {
            ForecastOverridesBulkCreateProjectedForecastOverrideRequest forecastOverridesBulkCreateProjectedForecastOverrideRequest = new ForecastOverridesBulkCreateProjectedForecastOverrideRequest();
            forecastOverridesBulkCreateProjectedForecastOverrideRequest.data(this.data);
            return forecastOverridesBulkCreateProjectedForecastOverrideRequest;
        }

        /**
         * Execute bulkCreateProjectedForecastOverride request
         * @return ForecastOverridesBulkCreateProjectedForecastOverrideResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ForecastOverridesBulkCreateProjectedForecastOverrideResponse execute() throws ApiException {
            ForecastOverridesBulkCreateProjectedForecastOverrideRequest forecastOverridesBulkCreateProjectedForecastOverrideRequest = buildBodyParams();
            ApiResponse<ForecastOverridesBulkCreateProjectedForecastOverrideResponse> localVarResp = bulkCreateProjectedForecastOverrideWithHttpInfo(companyId, locationId, forecastOverridesBulkCreateProjectedForecastOverrideRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute bulkCreateProjectedForecastOverride request with HTTP info returned
         * @return ApiResponse&lt;ForecastOverridesBulkCreateProjectedForecastOverrideResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ForecastOverridesBulkCreateProjectedForecastOverrideResponse> executeWithHttpInfo() throws ApiException {
            ForecastOverridesBulkCreateProjectedForecastOverrideRequest forecastOverridesBulkCreateProjectedForecastOverrideRequest = buildBodyParams();
            return bulkCreateProjectedForecastOverrideWithHttpInfo(companyId, locationId, forecastOverridesBulkCreateProjectedForecastOverrideRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute bulkCreateProjectedForecastOverride request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ForecastOverridesBulkCreateProjectedForecastOverrideResponse> _callback) throws ApiException {
            ForecastOverridesBulkCreateProjectedForecastOverrideRequest forecastOverridesBulkCreateProjectedForecastOverrideRequest = buildBodyParams();
            return bulkCreateProjectedForecastOverrideAsync(companyId, locationId, forecastOverridesBulkCreateProjectedForecastOverrideRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Create Bulk Daily Projected Forecast Overrides
     * 
     * @param companyId Company ID (required)
     * @param locationId Location ID (required)
     * @param forecastOverridesBulkCreateProjectedForecastOverrideRequest  (required)
     * @return BulkCreateProjectedForecastOverrideRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BulkCreateProjectedForecastOverrideRequestBuilder bulkCreateProjectedForecastOverride(List<ForecastOverridesBulkCreateProjectedForecastOverrideRequestDataInner> data, Long companyId, Long locationId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (locationId == null) throw new IllegalArgumentException("\"locationId\" is required but got null");
        return new BulkCreateProjectedForecastOverrideRequestBuilder(data, companyId, locationId);
    }
    private okhttp3.Call bulkCreateProjectedSalesIntervalOverrideCall(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, List<ForecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner> forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/locations/{location_id}/forecast_overrides_intervals"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "location_id" + "}", localVarApiClient.escapeString(locationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkCreateProjectedSalesIntervalOverrideValidateBeforeCall(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, List<ForecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner> forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling bulkCreateProjectedSalesIntervalOverride(Async)");
        }

        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling bulkCreateProjectedSalesIntervalOverride(Async)");
        }

        return bulkCreateProjectedSalesIntervalOverrideCall(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner, _callback);

    }


    private ApiResponse<Void> bulkCreateProjectedSalesIntervalOverrideWithHttpInfo(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, List<ForecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner> forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner) throws ApiException {
        okhttp3.Call localVarCall = bulkCreateProjectedSalesIntervalOverrideValidateBeforeCall(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call bulkCreateProjectedSalesIntervalOverrideAsync(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, List<ForecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner> forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkCreateProjectedSalesIntervalOverrideValidateBeforeCall(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class BulkCreateProjectedSalesIntervalOverrideRequestBuilder {
        private final Long companyId;
        private final Long locationId;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private List<ForecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner> forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner;

        private BulkCreateProjectedSalesIntervalOverrideRequestBuilder(Long companyId, Long locationId) {
            this.companyId = companyId;
            this.locationId = locationId;
        }

        /**
         * Set forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner
         * @param forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner  (optional)
         * @return BulkCreateProjectedSalesIntervalOverrideRequestBuilder
         */
        public BulkCreateProjectedSalesIntervalOverrideRequestBuilder forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner(List<ForecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner> forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner) {
            this.forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner = forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner;
            return this;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return BulkCreateProjectedSalesIntervalOverrideRequestBuilder
         */
        public BulkCreateProjectedSalesIntervalOverrideRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return BulkCreateProjectedSalesIntervalOverrideRequestBuilder
         */
        public BulkCreateProjectedSalesIntervalOverrideRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for bulkCreateProjectedSalesIntervalOverride
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<ForecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner> forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner = buildBodyParams();
            return bulkCreateProjectedSalesIntervalOverrideCall(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner, _callback);
        }

        private List<ForecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner> buildBodyParams() {
            return this.forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner;
        }

        /**
         * Execute bulkCreateProjectedSalesIntervalOverride request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            List<ForecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner> forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner = buildBodyParams();
            bulkCreateProjectedSalesIntervalOverrideWithHttpInfo(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner);
        }

        /**
         * Execute bulkCreateProjectedSalesIntervalOverride request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            List<ForecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner> forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner = buildBodyParams();
            return bulkCreateProjectedSalesIntervalOverrideWithHttpInfo(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner);
        }

        /**
         * Execute bulkCreateProjectedSalesIntervalOverride request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            List<ForecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner> forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner = buildBodyParams();
            return bulkCreateProjectedSalesIntervalOverrideAsync(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner, _callback);
        }
    }

    /**
     * Create Bulk Daily Projected Forecast Overrides
     * Overrides many project sales intervals of 15 minutes or 1 hour. (In Development)
     * @param companyId Company ID (required)
     * @param locationId Location ID (required)
     * @return BulkCreateProjectedSalesIntervalOverrideRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public BulkCreateProjectedSalesIntervalOverrideRequestBuilder bulkCreateProjectedSalesIntervalOverride(Long companyId, Long locationId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (locationId == null) throw new IllegalArgumentException("\"locationId\" is required but got null");
        return new BulkCreateProjectedSalesIntervalOverrideRequestBuilder(companyId, locationId);
    }
    private okhttp3.Call createDailyProjectedForecastOverrideCall(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, ForecastOverridesCreateDailyProjectedForecastOverrideRequest forecastOverridesCreateDailyProjectedForecastOverrideRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = forecastOverridesCreateDailyProjectedForecastOverrideRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/location/{location_id}/forecast_override"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "location_id" + "}", localVarApiClient.escapeString(locationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDailyProjectedForecastOverrideValidateBeforeCall(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, ForecastOverridesCreateDailyProjectedForecastOverrideRequest forecastOverridesCreateDailyProjectedForecastOverrideRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createDailyProjectedForecastOverride(Async)");
        }

        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling createDailyProjectedForecastOverride(Async)");
        }

        return createDailyProjectedForecastOverrideCall(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesCreateDailyProjectedForecastOverrideRequest, _callback);

    }


    private ApiResponse<ForecastOverridesCreateDailyProjectedForecastOverrideResponse> createDailyProjectedForecastOverrideWithHttpInfo(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, ForecastOverridesCreateDailyProjectedForecastOverrideRequest forecastOverridesCreateDailyProjectedForecastOverrideRequest) throws ApiException {
        okhttp3.Call localVarCall = createDailyProjectedForecastOverrideValidateBeforeCall(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesCreateDailyProjectedForecastOverrideRequest, null);
        Type localVarReturnType = new TypeToken<ForecastOverridesCreateDailyProjectedForecastOverrideResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createDailyProjectedForecastOverrideAsync(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, ForecastOverridesCreateDailyProjectedForecastOverrideRequest forecastOverridesCreateDailyProjectedForecastOverrideRequest, final ApiCallback<ForecastOverridesCreateDailyProjectedForecastOverrideResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDailyProjectedForecastOverrideValidateBeforeCall(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesCreateDailyProjectedForecastOverrideRequest, _callback);
        Type localVarReturnType = new TypeToken<ForecastOverridesCreateDailyProjectedForecastOverrideResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateDailyProjectedForecastOverrideRequestBuilder {
        private final LocalDate date;
        private final Long value;
        private final String reportType;
        private final Long companyId;
        private final Long locationId;
        private Integer departmentId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private CreateDailyProjectedForecastOverrideRequestBuilder(LocalDate date, Long value, String reportType, Long companyId, Long locationId) {
            this.date = date;
            this.value = value;
            this.reportType = reportType;
            this.companyId = companyId;
            this.locationId = locationId;
        }

        /**
         * Set departmentId
         * @param departmentId Department ID. Optional (optional)
         * @return CreateDailyProjectedForecastOverrideRequestBuilder
         */
        public CreateDailyProjectedForecastOverrideRequestBuilder departmentId(Integer departmentId) {
            this.departmentId = departmentId;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return CreateDailyProjectedForecastOverrideRequestBuilder
         */
        public CreateDailyProjectedForecastOverrideRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return CreateDailyProjectedForecastOverrideRequestBuilder
         */
        public CreateDailyProjectedForecastOverrideRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for createDailyProjectedForecastOverride
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ForecastOverridesCreateDailyProjectedForecastOverrideRequest forecastOverridesCreateDailyProjectedForecastOverrideRequest = buildBodyParams();
            return createDailyProjectedForecastOverrideCall(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesCreateDailyProjectedForecastOverrideRequest, _callback);
        }

        private ForecastOverridesCreateDailyProjectedForecastOverrideRequest buildBodyParams() {
            ForecastOverridesCreateDailyProjectedForecastOverrideRequest forecastOverridesCreateDailyProjectedForecastOverrideRequest = new ForecastOverridesCreateDailyProjectedForecastOverrideRequest();
            forecastOverridesCreateDailyProjectedForecastOverrideRequest.departmentId(this.departmentId);
            forecastOverridesCreateDailyProjectedForecastOverrideRequest.date(this.date);
            forecastOverridesCreateDailyProjectedForecastOverrideRequest.value(this.value);
            if (this.reportType != null)
            forecastOverridesCreateDailyProjectedForecastOverrideRequest.reportType(ForecastOverridesCreateDailyProjectedForecastOverrideRequest.ReportTypeEnum.fromValue(this.reportType));
            return forecastOverridesCreateDailyProjectedForecastOverrideRequest;
        }

        /**
         * Execute createDailyProjectedForecastOverride request
         * @return ForecastOverridesCreateDailyProjectedForecastOverrideResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ForecastOverridesCreateDailyProjectedForecastOverrideResponse execute() throws ApiException {
            ForecastOverridesCreateDailyProjectedForecastOverrideRequest forecastOverridesCreateDailyProjectedForecastOverrideRequest = buildBodyParams();
            ApiResponse<ForecastOverridesCreateDailyProjectedForecastOverrideResponse> localVarResp = createDailyProjectedForecastOverrideWithHttpInfo(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesCreateDailyProjectedForecastOverrideRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createDailyProjectedForecastOverride request with HTTP info returned
         * @return ApiResponse&lt;ForecastOverridesCreateDailyProjectedForecastOverrideResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ForecastOverridesCreateDailyProjectedForecastOverrideResponse> executeWithHttpInfo() throws ApiException {
            ForecastOverridesCreateDailyProjectedForecastOverrideRequest forecastOverridesCreateDailyProjectedForecastOverrideRequest = buildBodyParams();
            return createDailyProjectedForecastOverrideWithHttpInfo(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesCreateDailyProjectedForecastOverrideRequest);
        }

        /**
         * Execute createDailyProjectedForecastOverride request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ForecastOverridesCreateDailyProjectedForecastOverrideResponse> _callback) throws ApiException {
            ForecastOverridesCreateDailyProjectedForecastOverrideRequest forecastOverridesCreateDailyProjectedForecastOverrideRequest = buildBodyParams();
            return createDailyProjectedForecastOverrideAsync(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesCreateDailyProjectedForecastOverrideRequest, _callback);
        }
    }

    /**
     * Create Daily Projected Forecast Override
     * 
     * @param companyId Company ID (required)
     * @param locationId Location ID (required)
     * @return CreateDailyProjectedForecastOverrideRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateDailyProjectedForecastOverrideRequestBuilder createDailyProjectedForecastOverride(LocalDate date, Long value, String reportType, Long companyId, Long locationId) throws IllegalArgumentException {
        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
        if (value == null) throw new IllegalArgumentException("\"value\" is required but got null");
        if (reportType == null) throw new IllegalArgumentException("\"reportType\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (locationId == null) throw new IllegalArgumentException("\"locationId\" is required but got null");
        return new CreateDailyProjectedForecastOverrideRequestBuilder(date, value, reportType, companyId, locationId);
    }
    private okhttp3.Call overrideIntervalCall(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, ForecastOverridesOverrideIntervalRequest forecastOverridesOverrideIntervalRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = forecastOverridesOverrideIntervalRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/locations/{location_id}/forecast_override_interval"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "location_id" + "}", localVarApiClient.escapeString(locationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call overrideIntervalValidateBeforeCall(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, ForecastOverridesOverrideIntervalRequest forecastOverridesOverrideIntervalRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling overrideInterval(Async)");
        }

        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling overrideInterval(Async)");
        }

        return overrideIntervalCall(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesOverrideIntervalRequest, _callback);

    }


    private ApiResponse<Void> overrideIntervalWithHttpInfo(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, ForecastOverridesOverrideIntervalRequest forecastOverridesOverrideIntervalRequest) throws ApiException {
        okhttp3.Call localVarCall = overrideIntervalValidateBeforeCall(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesOverrideIntervalRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call overrideIntervalAsync(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, ForecastOverridesOverrideIntervalRequest forecastOverridesOverrideIntervalRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = overrideIntervalValidateBeforeCall(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesOverrideIntervalRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class OverrideIntervalRequestBuilder {
        private final OffsetDateTime start;
        private final OffsetDateTime end;
        private final Long value;
        private final Long companyId;
        private final Long locationId;
        private Integer departmentId;
        private String reportType;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private OverrideIntervalRequestBuilder(OffsetDateTime start, OffsetDateTime end, Long value, Long companyId, Long locationId) {
            this.start = start;
            this.end = end;
            this.value = value;
            this.companyId = companyId;
            this.locationId = locationId;
        }

        /**
         * Set departmentId
         * @param departmentId Department ID (optional)
         * @return OverrideIntervalRequestBuilder
         */
        public OverrideIntervalRequestBuilder departmentId(Integer departmentId) {
            this.departmentId = departmentId;
            return this;
        }
        
        /**
         * Set reportType
         * @param reportType Type of value to override. Default is sales (optional, default to sales)
         * @return OverrideIntervalRequestBuilder
         */
        public OverrideIntervalRequestBuilder reportType(String reportType) {
            this.reportType = reportType;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return OverrideIntervalRequestBuilder
         */
        public OverrideIntervalRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return OverrideIntervalRequestBuilder
         */
        public OverrideIntervalRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for overrideInterval
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ForecastOverridesOverrideIntervalRequest forecastOverridesOverrideIntervalRequest = buildBodyParams();
            return overrideIntervalCall(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesOverrideIntervalRequest, _callback);
        }

        private ForecastOverridesOverrideIntervalRequest buildBodyParams() {
            ForecastOverridesOverrideIntervalRequest forecastOverridesOverrideIntervalRequest = new ForecastOverridesOverrideIntervalRequest();
            forecastOverridesOverrideIntervalRequest.departmentId(this.departmentId);
            forecastOverridesOverrideIntervalRequest.start(this.start);
            forecastOverridesOverrideIntervalRequest.end(this.end);
            forecastOverridesOverrideIntervalRequest.value(this.value);
            if (this.reportType != null)
            forecastOverridesOverrideIntervalRequest.reportType(ForecastOverridesOverrideIntervalRequest.ReportTypeEnum.fromValue(this.reportType));
            return forecastOverridesOverrideIntervalRequest;
        }

        /**
         * Execute overrideInterval request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ForecastOverridesOverrideIntervalRequest forecastOverridesOverrideIntervalRequest = buildBodyParams();
            overrideIntervalWithHttpInfo(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesOverrideIntervalRequest);
        }

        /**
         * Execute overrideInterval request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ForecastOverridesOverrideIntervalRequest forecastOverridesOverrideIntervalRequest = buildBodyParams();
            return overrideIntervalWithHttpInfo(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesOverrideIntervalRequest);
        }

        /**
         * Execute overrideInterval request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ForecastOverridesOverrideIntervalRequest forecastOverridesOverrideIntervalRequest = buildBodyParams();
            return overrideIntervalAsync(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesOverrideIntervalRequest, _callback);
        }
    }

    /**
     * Create Interval Projected Forecast Override
     * Overrides the project sales interval of 15 minutes or 1 hour.
     * @param companyId Company ID (required)
     * @param locationId Location ID (required)
     * @return OverrideIntervalRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public OverrideIntervalRequestBuilder overrideInterval(OffsetDateTime start, OffsetDateTime end, Long value, Long companyId, Long locationId) throws IllegalArgumentException {
        if (start == null) throw new IllegalArgumentException("\"start\" is required but got null");
        if (end == null) throw new IllegalArgumentException("\"end\" is required but got null");
        if (value == null) throw new IllegalArgumentException("\"value\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (locationId == null) throw new IllegalArgumentException("\"locationId\" is required but got null");
        return new OverrideIntervalRequestBuilder(start, end, value, companyId, locationId);
    }
    private okhttp3.Call syncProjectedForecastOverrideCall(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, ForecastOverridesSyncProjectedForecastOverrideRequest forecastOverridesSyncProjectedForecastOverrideRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = forecastOverridesSyncProjectedForecastOverrideRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/location/{location_id}/forecast_override"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "location_id" + "}", localVarApiClient.escapeString(locationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call syncProjectedForecastOverrideValidateBeforeCall(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, ForecastOverridesSyncProjectedForecastOverrideRequest forecastOverridesSyncProjectedForecastOverrideRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling syncProjectedForecastOverride(Async)");
        }

        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling syncProjectedForecastOverride(Async)");
        }

        return syncProjectedForecastOverrideCall(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesSyncProjectedForecastOverrideRequest, _callback);

    }


    private ApiResponse<Void> syncProjectedForecastOverrideWithHttpInfo(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, ForecastOverridesSyncProjectedForecastOverrideRequest forecastOverridesSyncProjectedForecastOverrideRequest) throws ApiException {
        okhttp3.Call localVarCall = syncProjectedForecastOverrideValidateBeforeCall(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesSyncProjectedForecastOverrideRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call syncProjectedForecastOverrideAsync(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, ForecastOverridesSyncProjectedForecastOverrideRequest forecastOverridesSyncProjectedForecastOverrideRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = syncProjectedForecastOverrideValidateBeforeCall(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesSyncProjectedForecastOverrideRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SyncProjectedForecastOverrideRequestBuilder {
        private final LocalDate startDate;
        private final String reportType;
        private final Long companyId;
        private final Long locationId;
        private LocalDate endDate;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private SyncProjectedForecastOverrideRequestBuilder(LocalDate startDate, String reportType, Long companyId, Long locationId) {
            this.startDate = startDate;
            this.reportType = reportType;
            this.companyId = companyId;
            this.locationId = locationId;
        }

        /**
         * Set endDate
         * @param endDate The ending date of a date range of override data to remove. Optional. Format YYYY-MM-DD (optional)
         * @return SyncProjectedForecastOverrideRequestBuilder
         */
        public SyncProjectedForecastOverrideRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return SyncProjectedForecastOverrideRequestBuilder
         */
        public SyncProjectedForecastOverrideRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return SyncProjectedForecastOverrideRequestBuilder
         */
        public SyncProjectedForecastOverrideRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for syncProjectedForecastOverride
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ForecastOverridesSyncProjectedForecastOverrideRequest forecastOverridesSyncProjectedForecastOverrideRequest = buildBodyParams();
            return syncProjectedForecastOverrideCall(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesSyncProjectedForecastOverrideRequest, _callback);
        }

        private ForecastOverridesSyncProjectedForecastOverrideRequest buildBodyParams() {
            ForecastOverridesSyncProjectedForecastOverrideRequest forecastOverridesSyncProjectedForecastOverrideRequest = new ForecastOverridesSyncProjectedForecastOverrideRequest();
            forecastOverridesSyncProjectedForecastOverrideRequest.startDate(this.startDate);
            forecastOverridesSyncProjectedForecastOverrideRequest.endDate(this.endDate);
            if (this.reportType != null)
            forecastOverridesSyncProjectedForecastOverrideRequest.reportType(ForecastOverridesSyncProjectedForecastOverrideRequest.ReportTypeEnum.fromValue(this.reportType));
            return forecastOverridesSyncProjectedForecastOverrideRequest;
        }

        /**
         * Execute syncProjectedForecastOverride request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ForecastOverridesSyncProjectedForecastOverrideRequest forecastOverridesSyncProjectedForecastOverrideRequest = buildBodyParams();
            syncProjectedForecastOverrideWithHttpInfo(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesSyncProjectedForecastOverrideRequest);
        }

        /**
         * Execute syncProjectedForecastOverride request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ForecastOverridesSyncProjectedForecastOverrideRequest forecastOverridesSyncProjectedForecastOverrideRequest = buildBodyParams();
            return syncProjectedForecastOverrideWithHttpInfo(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesSyncProjectedForecastOverrideRequest);
        }

        /**
         * Execute syncProjectedForecastOverride request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ForecastOverridesSyncProjectedForecastOverrideRequest forecastOverridesSyncProjectedForecastOverrideRequest = buildBodyParams();
            return syncProjectedForecastOverrideAsync(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesSyncProjectedForecastOverrideRequest, _callback);
        }
    }

    /**
     * Sync Daily Projected Forecast Override
     * 
     * @param companyId Company ID (required)
     * @param locationId Location ID (required)
     * @return SyncProjectedForecastOverrideRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public SyncProjectedForecastOverrideRequestBuilder syncProjectedForecastOverride(LocalDate startDate, String reportType, Long companyId, Long locationId) throws IllegalArgumentException {
        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
        if (reportType == null) throw new IllegalArgumentException("\"reportType\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (locationId == null) throw new IllegalArgumentException("\"locationId\" is required but got null");
        return new SyncProjectedForecastOverrideRequestBuilder(startDate, reportType, companyId, locationId);
    }
    private okhttp3.Call syncProjectedSalesIntervalCall(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, ForecastOverridesSyncProjectedSalesIntervalRequest forecastOverridesSyncProjectedSalesIntervalRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = forecastOverridesSyncProjectedSalesIntervalRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/locations/{location_id}/forecast_override_interval"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "location_id" + "}", localVarApiClient.escapeString(locationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call syncProjectedSalesIntervalValidateBeforeCall(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, ForecastOverridesSyncProjectedSalesIntervalRequest forecastOverridesSyncProjectedSalesIntervalRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling syncProjectedSalesInterval(Async)");
        }

        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling syncProjectedSalesInterval(Async)");
        }

        return syncProjectedSalesIntervalCall(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesSyncProjectedSalesIntervalRequest, _callback);

    }


    private ApiResponse<Void> syncProjectedSalesIntervalWithHttpInfo(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, ForecastOverridesSyncProjectedSalesIntervalRequest forecastOverridesSyncProjectedSalesIntervalRequest) throws ApiException {
        okhttp3.Call localVarCall = syncProjectedSalesIntervalValidateBeforeCall(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesSyncProjectedSalesIntervalRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call syncProjectedSalesIntervalAsync(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, ForecastOverridesSyncProjectedSalesIntervalRequest forecastOverridesSyncProjectedSalesIntervalRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = syncProjectedSalesIntervalValidateBeforeCall(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesSyncProjectedSalesIntervalRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SyncProjectedSalesIntervalRequestBuilder {
        private final OffsetDateTime start;
        private final OffsetDateTime end;
        private final Long companyId;
        private final Long locationId;
        private String reportType;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private SyncProjectedSalesIntervalRequestBuilder(OffsetDateTime start, OffsetDateTime end, Long companyId, Long locationId) {
            this.start = start;
            this.end = end;
            this.companyId = companyId;
            this.locationId = locationId;
        }

        /**
         * Set reportType
         * @param reportType Type of value to override. Default is sales (optional, default to sales)
         * @return SyncProjectedSalesIntervalRequestBuilder
         */
        public SyncProjectedSalesIntervalRequestBuilder reportType(String reportType) {
            this.reportType = reportType;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return SyncProjectedSalesIntervalRequestBuilder
         */
        public SyncProjectedSalesIntervalRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return SyncProjectedSalesIntervalRequestBuilder
         */
        public SyncProjectedSalesIntervalRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for syncProjectedSalesInterval
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ForecastOverridesSyncProjectedSalesIntervalRequest forecastOverridesSyncProjectedSalesIntervalRequest = buildBodyParams();
            return syncProjectedSalesIntervalCall(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesSyncProjectedSalesIntervalRequest, _callback);
        }

        private ForecastOverridesSyncProjectedSalesIntervalRequest buildBodyParams() {
            ForecastOverridesSyncProjectedSalesIntervalRequest forecastOverridesSyncProjectedSalesIntervalRequest = new ForecastOverridesSyncProjectedSalesIntervalRequest();
            forecastOverridesSyncProjectedSalesIntervalRequest.start(this.start);
            forecastOverridesSyncProjectedSalesIntervalRequest.end(this.end);
            if (this.reportType != null)
            forecastOverridesSyncProjectedSalesIntervalRequest.reportType(ForecastOverridesSyncProjectedSalesIntervalRequest.ReportTypeEnum.fromValue(this.reportType));
            return forecastOverridesSyncProjectedSalesIntervalRequest;
        }

        /**
         * Execute syncProjectedSalesInterval request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ForecastOverridesSyncProjectedSalesIntervalRequest forecastOverridesSyncProjectedSalesIntervalRequest = buildBodyParams();
            syncProjectedSalesIntervalWithHttpInfo(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesSyncProjectedSalesIntervalRequest);
        }

        /**
         * Execute syncProjectedSalesInterval request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ForecastOverridesSyncProjectedSalesIntervalRequest forecastOverridesSyncProjectedSalesIntervalRequest = buildBodyParams();
            return syncProjectedSalesIntervalWithHttpInfo(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesSyncProjectedSalesIntervalRequest);
        }

        /**
         * Execute syncProjectedSalesInterval request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ForecastOverridesSyncProjectedSalesIntervalRequest forecastOverridesSyncProjectedSalesIntervalRequest = buildBodyParams();
            return syncProjectedSalesIntervalAsync(companyId, locationId, xApiVersion, xCompanyGuid, forecastOverridesSyncProjectedSalesIntervalRequest, _callback);
        }
    }

    /**
     * Sync Interval Projected Forecast Override
     * Syncs the overridden project sales interval of 15 minutes or 1 hour.
     * @param companyId Company ID (required)
     * @param locationId Location ID (required)
     * @return SyncProjectedSalesIntervalRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public SyncProjectedSalesIntervalRequestBuilder syncProjectedSalesInterval(OffsetDateTime start, OffsetDateTime end, Long companyId, Long locationId) throws IllegalArgumentException {
        if (start == null) throw new IllegalArgumentException("\"start\" is required but got null");
        if (end == null) throw new IllegalArgumentException("\"end\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (locationId == null) throw new IllegalArgumentException("\"locationId\" is required but got null");
        return new SyncProjectedSalesIntervalRequestBuilder(start, end, companyId, locationId);
    }
}
