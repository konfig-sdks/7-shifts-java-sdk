/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.TimeOffApproveRequest200Response;
import com.konfigthis.client.model.TimeOffApproveRequestRequest;
import com.konfigthis.client.model.TimeOffApproveRequestResponse;
import com.konfigthis.client.model.TimeOffCreateRequest200Response;
import com.konfigthis.client.model.TimeOffCreateRequestRequest;
import com.konfigthis.client.model.TimeOffCreateRequestRequestHoursInner;
import com.konfigthis.client.model.TimeOffCreateRequestResponse;
import com.konfigthis.client.model.TimeOffDeclineRequest200Response;
import com.konfigthis.client.model.TimeOffDeclineRequestRequest;
import com.konfigthis.client.model.TimeOffDeclineRequestResponse;
import com.konfigthis.client.model.TimeOffGetSettings200Response;
import com.konfigthis.client.model.TimeOffGetSettingsResponse;
import com.konfigthis.client.model.TimeOffGetTimeOffById200Response;
import com.konfigthis.client.model.TimeOffGetTimeOffByIdResponse;
import com.konfigthis.client.model.TimeOffGetTotalHours200Response;
import com.konfigthis.client.model.TimeOffGetTotalHoursResponse;
import com.konfigthis.client.model.TimeOffList200Response;
import com.konfigthis.client.model.TimeOffListResponse;
import com.konfigthis.client.model.TimeOffRemoveResponse;
import com.konfigthis.client.model.TimeOffSetTimeOffSettings200Response;
import com.konfigthis.client.model.TimeOffSetTimeOffSettingsRequest;
import com.konfigthis.client.model.TimeOffSetTimeOffSettingsResponse;
import com.konfigthis.client.model.TimeOffUpdateTimeOffById200Response;
import com.konfigthis.client.model.TimeOffUpdateTimeOffByIdRequest;
import com.konfigthis.client.model.TimeOffUpdateTimeOffByIdResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TimeOffApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimeOffApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TimeOffApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call approveRequestCall(Long timeOffId, String xApiVersion, UUID xCompanyGuid, TimeOffApproveRequestRequest timeOffApproveRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeOffApproveRequestRequest;

        // create path and map variables
        String localVarPath = "/v2/time_off/{time_off_id}/approve"
            .replace("{" + "time_off_id" + "}", localVarApiClient.escapeString(timeOffId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approveRequestValidateBeforeCall(Long timeOffId, String xApiVersion, UUID xCompanyGuid, TimeOffApproveRequestRequest timeOffApproveRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeOffId' is set
        if (timeOffId == null) {
            throw new ApiException("Missing the required parameter 'timeOffId' when calling approveRequest(Async)");
        }

        return approveRequestCall(timeOffId, xApiVersion, xCompanyGuid, timeOffApproveRequestRequest, _callback);

    }


    private ApiResponse<TimeOffApproveRequest200Response> approveRequestWithHttpInfo(Long timeOffId, String xApiVersion, UUID xCompanyGuid, TimeOffApproveRequestRequest timeOffApproveRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = approveRequestValidateBeforeCall(timeOffId, xApiVersion, xCompanyGuid, timeOffApproveRequestRequest, null);
        Type localVarReturnType = new TypeToken<TimeOffApproveRequest200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call approveRequestAsync(Long timeOffId, String xApiVersion, UUID xCompanyGuid, TimeOffApproveRequestRequest timeOffApproveRequestRequest, final ApiCallback<TimeOffApproveRequest200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = approveRequestValidateBeforeCall(timeOffId, xApiVersion, xCompanyGuid, timeOffApproveRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<TimeOffApproveRequest200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ApproveRequestRequestBuilder {
        private final Long timeOffId;
        private String statusActionMessage;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private ApproveRequestRequestBuilder(Long timeOffId) {
            this.timeOffId = timeOffId;
        }

        /**
         * Set statusActionMessage
         * @param statusActionMessage  (optional)
         * @return ApproveRequestRequestBuilder
         */
        public ApproveRequestRequestBuilder statusActionMessage(String statusActionMessage) {
            this.statusActionMessage = statusActionMessage;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return ApproveRequestRequestBuilder
         */
        public ApproveRequestRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return ApproveRequestRequestBuilder
         */
        public ApproveRequestRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for approveRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeOffApproveRequestRequest timeOffApproveRequestRequest = buildBodyParams();
            return approveRequestCall(timeOffId, xApiVersion, xCompanyGuid, timeOffApproveRequestRequest, _callback);
        }

        private TimeOffApproveRequestRequest buildBodyParams() {
            TimeOffApproveRequestRequest timeOffApproveRequestRequest = new TimeOffApproveRequestRequest();
            timeOffApproveRequestRequest.statusActionMessage(this.statusActionMessage);
            return timeOffApproveRequestRequest;
        }

        /**
         * Execute approveRequest request
         * @return TimeOffApproveRequest200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public TimeOffApproveRequest200Response execute() throws ApiException {
            TimeOffApproveRequestRequest timeOffApproveRequestRequest = buildBodyParams();
            ApiResponse<TimeOffApproveRequest200Response> localVarResp = approveRequestWithHttpInfo(timeOffId, xApiVersion, xCompanyGuid, timeOffApproveRequestRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute approveRequest request with HTTP info returned
         * @return ApiResponse&lt;TimeOffApproveRequest200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeOffApproveRequest200Response> executeWithHttpInfo() throws ApiException {
            TimeOffApproveRequestRequest timeOffApproveRequestRequest = buildBodyParams();
            return approveRequestWithHttpInfo(timeOffId, xApiVersion, xCompanyGuid, timeOffApproveRequestRequest);
        }

        /**
         * Execute approveRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeOffApproveRequest200Response> _callback) throws ApiException {
            TimeOffApproveRequestRequest timeOffApproveRequestRequest = buildBodyParams();
            return approveRequestAsync(timeOffId, xApiVersion, xCompanyGuid, timeOffApproveRequestRequest, _callback);
        }
    }

    /**
     * Approve Time Off Request
     * 
     * @param timeOffId Time Off ID (required)
     * @return ApproveRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApproveRequestRequestBuilder approveRequest(Long timeOffId) throws IllegalArgumentException {
        if (timeOffId == null) throw new IllegalArgumentException("\"timeOffId\" is required but got null");
        return new ApproveRequestRequestBuilder(timeOffId);
    }
    private okhttp3.Call createRequestCall(TimeOffCreateRequestRequest timeOffCreateRequestRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeOffCreateRequestRequest;

        // create path and map variables
        String localVarPath = "/v2/time_off";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRequestValidateBeforeCall(TimeOffCreateRequestRequest timeOffCreateRequestRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeOffCreateRequestRequest' is set
        if (timeOffCreateRequestRequest == null) {
            throw new ApiException("Missing the required parameter 'timeOffCreateRequestRequest' when calling createRequest(Async)");
        }

        return createRequestCall(timeOffCreateRequestRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<TimeOffCreateRequest200Response> createRequestWithHttpInfo(TimeOffCreateRequestRequest timeOffCreateRequestRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = createRequestValidateBeforeCall(timeOffCreateRequestRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<TimeOffCreateRequest200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRequestAsync(TimeOffCreateRequestRequest timeOffCreateRequestRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<TimeOffCreateRequest200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRequestValidateBeforeCall(timeOffCreateRequestRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<TimeOffCreateRequest200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRequestRequestBuilder {
        private final Integer userId;
        private final Integer companyId;
        private final String fromDate;
        private final String toDate;
        private final Boolean partial;
        private final Integer status;
        private final String category;
        private String partialFrom;
        private String partialTo;
        private String comments;
        private List<TimeOffCreateRequestRequestHoursInner> hours;
        private Integer statusActionUserId;
        private String statusActionMessage;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private CreateRequestRequestBuilder(Integer userId, Integer companyId, String fromDate, String toDate, Boolean partial, Integer status, String category) {
            this.userId = userId;
            this.companyId = companyId;
            this.fromDate = fromDate;
            this.toDate = toDate;
            this.partial = partial;
            this.status = status;
            this.category = category;
        }

        /**
         * Set partialFrom
         * @param partialFrom  (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder partialFrom(String partialFrom) {
            this.partialFrom = partialFrom;
            return this;
        }
        
        /**
         * Set partialTo
         * @param partialTo  (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder partialTo(String partialTo) {
            this.partialTo = partialTo;
            return this;
        }
        
        /**
         * Set comments
         * @param comments  (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder comments(String comments) {
            this.comments = comments;
            return this;
        }
        
        /**
         * Set hours
         * @param hours  (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder hours(List<TimeOffCreateRequestRequestHoursInner> hours) {
            this.hours = hours;
            return this;
        }
        
        /**
         * Set statusActionUserId
         * @param statusActionUserId  (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder statusActionUserId(Integer statusActionUserId) {
            this.statusActionUserId = statusActionUserId;
            return this;
        }
        
        /**
         * Set statusActionMessage
         * @param statusActionMessage  (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder statusActionMessage(String statusActionMessage) {
            this.statusActionMessage = statusActionMessage;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for createRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeOffCreateRequestRequest timeOffCreateRequestRequest = buildBodyParams();
            return createRequestCall(timeOffCreateRequestRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private TimeOffCreateRequestRequest buildBodyParams() {
            TimeOffCreateRequestRequest timeOffCreateRequestRequest = new TimeOffCreateRequestRequest();
            timeOffCreateRequestRequest.userId(this.userId);
            timeOffCreateRequestRequest.companyId(this.companyId);
            timeOffCreateRequestRequest.fromDate(this.fromDate);
            timeOffCreateRequestRequest.toDate(this.toDate);
            timeOffCreateRequestRequest.partial(this.partial);
            timeOffCreateRequestRequest.partialFrom(this.partialFrom);
            timeOffCreateRequestRequest.partialTo(this.partialTo);
            timeOffCreateRequestRequest.comments(this.comments);
            timeOffCreateRequestRequest.status(this.status);
            timeOffCreateRequestRequest.category(this.category);
            timeOffCreateRequestRequest.hours(this.hours);
            timeOffCreateRequestRequest.statusActionUserId(this.statusActionUserId);
            timeOffCreateRequestRequest.statusActionMessage(this.statusActionMessage);
            return timeOffCreateRequestRequest;
        }

        /**
         * Execute createRequest request
         * @return TimeOffCreateRequest200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public TimeOffCreateRequest200Response execute() throws ApiException {
            TimeOffCreateRequestRequest timeOffCreateRequestRequest = buildBodyParams();
            ApiResponse<TimeOffCreateRequest200Response> localVarResp = createRequestWithHttpInfo(timeOffCreateRequestRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRequest request with HTTP info returned
         * @return ApiResponse&lt;TimeOffCreateRequest200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeOffCreateRequest200Response> executeWithHttpInfo() throws ApiException {
            TimeOffCreateRequestRequest timeOffCreateRequestRequest = buildBodyParams();
            return createRequestWithHttpInfo(timeOffCreateRequestRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute createRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeOffCreateRequest200Response> _callback) throws ApiException {
            TimeOffCreateRequestRequest timeOffCreateRequestRequest = buildBodyParams();
            return createRequestAsync(timeOffCreateRequestRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Create time off
     * 
     * @param timeOffCreateRequestRequest  (required)
     * @return CreateRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestRequestBuilder createRequest(Integer userId, Integer companyId, String fromDate, String toDate, Boolean partial, Integer status, String category) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (fromDate == null) throw new IllegalArgumentException("\"fromDate\" is required but got null");
            

        if (toDate == null) throw new IllegalArgumentException("\"toDate\" is required but got null");
            

        if (partial == null) throw new IllegalArgumentException("\"partial\" is required but got null");
        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
        if (category == null) throw new IllegalArgumentException("\"category\" is required but got null");
            

        return new CreateRequestRequestBuilder(userId, companyId, fromDate, toDate, partial, status, category);
    }
    private okhttp3.Call declineRequestCall(Long timeOffId, String xApiVersion, UUID xCompanyGuid, TimeOffDeclineRequestRequest timeOffDeclineRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeOffDeclineRequestRequest;

        // create path and map variables
        String localVarPath = "/v2/time_off/{time_off_id}/decline"
            .replace("{" + "time_off_id" + "}", localVarApiClient.escapeString(timeOffId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call declineRequestValidateBeforeCall(Long timeOffId, String xApiVersion, UUID xCompanyGuid, TimeOffDeclineRequestRequest timeOffDeclineRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeOffId' is set
        if (timeOffId == null) {
            throw new ApiException("Missing the required parameter 'timeOffId' when calling declineRequest(Async)");
        }

        return declineRequestCall(timeOffId, xApiVersion, xCompanyGuid, timeOffDeclineRequestRequest, _callback);

    }


    private ApiResponse<TimeOffDeclineRequest200Response> declineRequestWithHttpInfo(Long timeOffId, String xApiVersion, UUID xCompanyGuid, TimeOffDeclineRequestRequest timeOffDeclineRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = declineRequestValidateBeforeCall(timeOffId, xApiVersion, xCompanyGuid, timeOffDeclineRequestRequest, null);
        Type localVarReturnType = new TypeToken<TimeOffDeclineRequest200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call declineRequestAsync(Long timeOffId, String xApiVersion, UUID xCompanyGuid, TimeOffDeclineRequestRequest timeOffDeclineRequestRequest, final ApiCallback<TimeOffDeclineRequest200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = declineRequestValidateBeforeCall(timeOffId, xApiVersion, xCompanyGuid, timeOffDeclineRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<TimeOffDeclineRequest200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeclineRequestRequestBuilder {
        private final Long timeOffId;
        private String statusActionMessage;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private DeclineRequestRequestBuilder(Long timeOffId) {
            this.timeOffId = timeOffId;
        }

        /**
         * Set statusActionMessage
         * @param statusActionMessage  (optional)
         * @return DeclineRequestRequestBuilder
         */
        public DeclineRequestRequestBuilder statusActionMessage(String statusActionMessage) {
            this.statusActionMessage = statusActionMessage;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return DeclineRequestRequestBuilder
         */
        public DeclineRequestRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return DeclineRequestRequestBuilder
         */
        public DeclineRequestRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for declineRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeOffDeclineRequestRequest timeOffDeclineRequestRequest = buildBodyParams();
            return declineRequestCall(timeOffId, xApiVersion, xCompanyGuid, timeOffDeclineRequestRequest, _callback);
        }

        private TimeOffDeclineRequestRequest buildBodyParams() {
            TimeOffDeclineRequestRequest timeOffDeclineRequestRequest = new TimeOffDeclineRequestRequest();
            timeOffDeclineRequestRequest.statusActionMessage(this.statusActionMessage);
            return timeOffDeclineRequestRequest;
        }

        /**
         * Execute declineRequest request
         * @return TimeOffDeclineRequest200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public TimeOffDeclineRequest200Response execute() throws ApiException {
            TimeOffDeclineRequestRequest timeOffDeclineRequestRequest = buildBodyParams();
            ApiResponse<TimeOffDeclineRequest200Response> localVarResp = declineRequestWithHttpInfo(timeOffId, xApiVersion, xCompanyGuid, timeOffDeclineRequestRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute declineRequest request with HTTP info returned
         * @return ApiResponse&lt;TimeOffDeclineRequest200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeOffDeclineRequest200Response> executeWithHttpInfo() throws ApiException {
            TimeOffDeclineRequestRequest timeOffDeclineRequestRequest = buildBodyParams();
            return declineRequestWithHttpInfo(timeOffId, xApiVersion, xCompanyGuid, timeOffDeclineRequestRequest);
        }

        /**
         * Execute declineRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeOffDeclineRequest200Response> _callback) throws ApiException {
            TimeOffDeclineRequestRequest timeOffDeclineRequestRequest = buildBodyParams();
            return declineRequestAsync(timeOffId, xApiVersion, xCompanyGuid, timeOffDeclineRequestRequest, _callback);
        }
    }

    /**
     * Decline Time Off Request
     * 
     * @param timeOffId Time Off ID (required)
     * @return DeclineRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public DeclineRequestRequestBuilder declineRequest(Long timeOffId) throws IllegalArgumentException {
        if (timeOffId == null) throw new IllegalArgumentException("\"timeOffId\" is required but got null");
        return new DeclineRequestRequestBuilder(timeOffId);
    }
    private okhttp3.Call getSettingsCall(Long companyId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/time_off_settings/{company_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSettingsValidateBeforeCall(Long companyId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getSettings(Async)");
        }

        return getSettingsCall(companyId, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<TimeOffGetSettings200Response> getSettingsWithHttpInfo(Long companyId, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<TimeOffGetSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSettingsAsync(Long companyId, String xApiVersion, UUID xCompanyGuid, final ApiCallback<TimeOffGetSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<TimeOffGetSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSettingsRequestBuilder {
        private final Long companyId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private GetSettingsRequestBuilder(Long companyId) {
            this.companyId = companyId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetSettingsRequestBuilder
         */
        public GetSettingsRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetSettingsRequestBuilder
         */
        public GetSettingsRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for getSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSettingsCall(companyId, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute getSettings request
         * @return TimeOffGetSettings200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public TimeOffGetSettings200Response execute() throws ApiException {
            ApiResponse<TimeOffGetSettings200Response> localVarResp = getSettingsWithHttpInfo(companyId, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSettings request with HTTP info returned
         * @return ApiResponse&lt;TimeOffGetSettings200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeOffGetSettings200Response> executeWithHttpInfo() throws ApiException {
            return getSettingsWithHttpInfo(companyId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute getSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeOffGetSettings200Response> _callback) throws ApiException {
            return getSettingsAsync(companyId, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Retrieve Time Off Settings
     * 
     * @param companyId Company ID (required)
     * @return GetSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetSettingsRequestBuilder getSettings(Long companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new GetSettingsRequestBuilder(companyId);
    }
    private okhttp3.Call getTimeOffByIdCall(Long timeOffId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/time_off/{time_off_id}"
            .replace("{" + "time_off_id" + "}", localVarApiClient.escapeString(timeOffId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimeOffByIdValidateBeforeCall(Long timeOffId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeOffId' is set
        if (timeOffId == null) {
            throw new ApiException("Missing the required parameter 'timeOffId' when calling getTimeOffById(Async)");
        }

        return getTimeOffByIdCall(timeOffId, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<TimeOffGetTimeOffById200Response> getTimeOffByIdWithHttpInfo(Long timeOffId, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = getTimeOffByIdValidateBeforeCall(timeOffId, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<TimeOffGetTimeOffById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTimeOffByIdAsync(Long timeOffId, String xApiVersion, UUID xCompanyGuid, final ApiCallback<TimeOffGetTimeOffById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimeOffByIdValidateBeforeCall(timeOffId, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<TimeOffGetTimeOffById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTimeOffByIdRequestBuilder {
        private final Long timeOffId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private GetTimeOffByIdRequestBuilder(Long timeOffId) {
            this.timeOffId = timeOffId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetTimeOffByIdRequestBuilder
         */
        public GetTimeOffByIdRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetTimeOffByIdRequestBuilder
         */
        public GetTimeOffByIdRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for getTimeOffById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTimeOffByIdCall(timeOffId, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute getTimeOffById request
         * @return TimeOffGetTimeOffById200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public TimeOffGetTimeOffById200Response execute() throws ApiException {
            ApiResponse<TimeOffGetTimeOffById200Response> localVarResp = getTimeOffByIdWithHttpInfo(timeOffId, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTimeOffById request with HTTP info returned
         * @return ApiResponse&lt;TimeOffGetTimeOffById200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeOffGetTimeOffById200Response> executeWithHttpInfo() throws ApiException {
            return getTimeOffByIdWithHttpInfo(timeOffId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute getTimeOffById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeOffGetTimeOffById200Response> _callback) throws ApiException {
            return getTimeOffByIdAsync(timeOffId, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Retrieve Time Off
     * 
     * @param timeOffId Time Off ID (required)
     * @return GetTimeOffByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetTimeOffByIdRequestBuilder getTimeOffById(Long timeOffId) throws IllegalArgumentException {
        if (timeOffId == null) throw new IllegalArgumentException("\"timeOffId\" is required but got null");
        return new GetTimeOffByIdRequestBuilder(timeOffId);
    }
    private okhttp3.Call getTotalHoursCall(Long companyId, List<Integer> employeeId, String dateStart, String dateEnd, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/time_off/total_hours";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("company_id", companyId));
        }

        if (employeeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "employee_id", employeeId));
        }

        if (dateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_start", dateStart));
        }

        if (dateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_end", dateEnd));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTotalHoursValidateBeforeCall(Long companyId, List<Integer> employeeId, String dateStart, String dateEnd, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getTotalHours(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getTotalHours(Async)");
        }

        // verify the required parameter 'dateStart' is set
        if (dateStart == null) {
            throw new ApiException("Missing the required parameter 'dateStart' when calling getTotalHours(Async)");
        }

        // verify the required parameter 'dateEnd' is set
        if (dateEnd == null) {
            throw new ApiException("Missing the required parameter 'dateEnd' when calling getTotalHours(Async)");
        }

        return getTotalHoursCall(companyId, employeeId, dateStart, dateEnd, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<TimeOffGetTotalHours200Response> getTotalHoursWithHttpInfo(Long companyId, List<Integer> employeeId, String dateStart, String dateEnd, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = getTotalHoursValidateBeforeCall(companyId, employeeId, dateStart, dateEnd, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<TimeOffGetTotalHours200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTotalHoursAsync(Long companyId, List<Integer> employeeId, String dateStart, String dateEnd, String xApiVersion, UUID xCompanyGuid, final ApiCallback<TimeOffGetTotalHours200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTotalHoursValidateBeforeCall(companyId, employeeId, dateStart, dateEnd, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<TimeOffGetTotalHours200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTotalHoursRequestBuilder {
        private final Long companyId;
        private final List<Integer> employeeId;
        private final String dateStart;
        private final String dateEnd;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private GetTotalHoursRequestBuilder(Long companyId, List<Integer> employeeId, String dateStart, String dateEnd) {
            this.companyId = companyId;
            this.employeeId = employeeId;
            this.dateStart = dateStart;
            this.dateEnd = dateEnd;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetTotalHoursRequestBuilder
         */
        public GetTotalHoursRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetTotalHoursRequestBuilder
         */
        public GetTotalHoursRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for getTotalHours
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTotalHoursCall(companyId, employeeId, dateStart, dateEnd, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute getTotalHours request
         * @return TimeOffGetTotalHours200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public TimeOffGetTotalHours200Response execute() throws ApiException {
            ApiResponse<TimeOffGetTotalHours200Response> localVarResp = getTotalHoursWithHttpInfo(companyId, employeeId, dateStart, dateEnd, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTotalHours request with HTTP info returned
         * @return ApiResponse&lt;TimeOffGetTotalHours200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeOffGetTotalHours200Response> executeWithHttpInfo() throws ApiException {
            return getTotalHoursWithHttpInfo(companyId, employeeId, dateStart, dateEnd, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute getTotalHours request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeOffGetTotalHours200Response> _callback) throws ApiException {
            return getTotalHoursAsync(companyId, employeeId, dateStart, dateEnd, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Retrieve Time Off Hours
     * 
     * @param companyId Company ID (required)
     * @param employeeId Employee IDs (required)
     * @param dateStart An ISO 8601 date string (required)
     * @param dateEnd An ISO 8601 date string (required)
     * @return GetTotalHoursRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetTotalHoursRequestBuilder getTotalHours(Long companyId, List<Integer> employeeId, String dateStart, String dateEnd) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
        if (dateStart == null) throw new IllegalArgumentException("\"dateStart\" is required but got null");
            

        if (dateEnd == null) throw new IllegalArgumentException("\"dateEnd\" is required but got null");
            

        return new GetTotalHoursRequestBuilder(companyId, employeeId, dateStart, dateEnd);
    }
    private okhttp3.Call listCall(Long companyId, String xApiVersion, UUID xCompanyGuid, Long locationId, Long userId, Long status, String category, String toDateGte, String sortBy, String sortDir, String cursor, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/time_off";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("company_id", companyId));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (toDateGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to_date_gte", toDateGte));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_dir", sortDir));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Long companyId, String xApiVersion, UUID xCompanyGuid, Long locationId, Long userId, Long status, String category, String toDateGte, String sortBy, String sortDir, String cursor, Long limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling list(Async)");
        }

        return listCall(companyId, xApiVersion, xCompanyGuid, locationId, userId, status, category, toDateGte, sortBy, sortDir, cursor, limit, _callback);

    }


    private ApiResponse<TimeOffList200Response> listWithHttpInfo(Long companyId, String xApiVersion, UUID xCompanyGuid, Long locationId, Long userId, Long status, String category, String toDateGte, String sortBy, String sortDir, String cursor, Long limit) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, locationId, userId, status, category, toDateGte, sortBy, sortDir, cursor, limit, null);
        Type localVarReturnType = new TypeToken<TimeOffList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Long companyId, String xApiVersion, UUID xCompanyGuid, Long locationId, Long userId, Long status, String category, String toDateGte, String sortBy, String sortDir, String cursor, Long limit, final ApiCallback<TimeOffList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, locationId, userId, status, category, toDateGte, sortBy, sortDir, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<TimeOffList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final Long companyId;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private Long locationId;
        private Long userId;
        private Long status;
        private String category;
        private String toDateGte;
        private String sortBy;
        private String sortDir;
        private String cursor;
        private Long limit;

        private ListRequestBuilder(Long companyId) {
            this.companyId = companyId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set locationId
         * @param locationId Location ID (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder locationId(Long locationId) {
            this.locationId = locationId;
            return this;
        }
        
        /**
         * Set userId
         * @param userId User ID (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder userId(Long userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set status
         * @param status Status (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder status(Long status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set category
         * @param category Category (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder category(String category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set toDateGte
         * @param toDateGte Return time offs that end after a specified date. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder toDateGte(String toDateGte) {
            this.toDateGte = toDateGte;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Sort by column (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortDir
         * @param sortDir Sort by direction (asc, desc) (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder sortDir(String sortDir) {
            this.sortDir = sortDir;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Cursor for the next or previous page of results. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The number of results desired per page. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(companyId, xApiVersion, xCompanyGuid, locationId, userId, status, category, toDateGte, sortBy, sortDir, cursor, limit, _callback);
        }


        /**
         * Execute list request
         * @return TimeOffList200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public TimeOffList200Response execute() throws ApiException {
            ApiResponse<TimeOffList200Response> localVarResp = listWithHttpInfo(companyId, xApiVersion, xCompanyGuid, locationId, userId, status, category, toDateGte, sortBy, sortDir, cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;TimeOffList200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeOffList200Response> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(companyId, xApiVersion, xCompanyGuid, locationId, userId, status, category, toDateGte, sortBy, sortDir, cursor, limit);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeOffList200Response> _callback) throws ApiException {
            return listAsync(companyId, xApiVersion, xCompanyGuid, locationId, userId, status, category, toDateGte, sortBy, sortDir, cursor, limit, _callback);
        }
    }

    /**
     * List Time Off
     * 
     * @param companyId Company ID (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list(Long companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new ListRequestBuilder(companyId);
    }
    private okhttp3.Call removeCall(Long timeOffId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/time_off/{time_off_id}"
            .replace("{" + "time_off_id" + "}", localVarApiClient.escapeString(timeOffId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeValidateBeforeCall(Long timeOffId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeOffId' is set
        if (timeOffId == null) {
            throw new ApiException("Missing the required parameter 'timeOffId' when calling remove(Async)");
        }

        return removeCall(timeOffId, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<Void> removeWithHttpInfo(Long timeOffId, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = removeValidateBeforeCall(timeOffId, xApiVersion, xCompanyGuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeAsync(Long timeOffId, String xApiVersion, UUID xCompanyGuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeValidateBeforeCall(timeOffId, xApiVersion, xCompanyGuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveRequestBuilder {
        private final Long timeOffId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private RemoveRequestBuilder(Long timeOffId) {
            this.timeOffId = timeOffId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return RemoveRequestBuilder
         */
        public RemoveRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return RemoveRequestBuilder
         */
        public RemoveRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for remove
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeCall(timeOffId, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute remove request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeWithHttpInfo(timeOffId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute remove request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeWithHttpInfo(timeOffId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute remove request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeAsync(timeOffId, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Delete Time Off
     * 
     * @param timeOffId Time Off ID (required)
     * @return RemoveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public RemoveRequestBuilder remove(Long timeOffId) throws IllegalArgumentException {
        if (timeOffId == null) throw new IllegalArgumentException("\"timeOffId\" is required but got null");
        return new RemoveRequestBuilder(timeOffId);
    }
    private okhttp3.Call setTimeOffSettingsCall(Long companyId, TimeOffSetTimeOffSettingsRequest timeOffSetTimeOffSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeOffSetTimeOffSettingsRequest;

        // create path and map variables
        String localVarPath = "/v2/time_off_settings/{company_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setTimeOffSettingsValidateBeforeCall(Long companyId, TimeOffSetTimeOffSettingsRequest timeOffSetTimeOffSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling setTimeOffSettings(Async)");
        }

        return setTimeOffSettingsCall(companyId, timeOffSetTimeOffSettingsRequest, _callback);

    }


    private ApiResponse<TimeOffSetTimeOffSettings200Response> setTimeOffSettingsWithHttpInfo(Long companyId, TimeOffSetTimeOffSettingsRequest timeOffSetTimeOffSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = setTimeOffSettingsValidateBeforeCall(companyId, timeOffSetTimeOffSettingsRequest, null);
        Type localVarReturnType = new TypeToken<TimeOffSetTimeOffSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setTimeOffSettingsAsync(Long companyId, TimeOffSetTimeOffSettingsRequest timeOffSetTimeOffSettingsRequest, final ApiCallback<TimeOffSetTimeOffSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = setTimeOffSettingsValidateBeforeCall(companyId, timeOffSetTimeOffSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<TimeOffSetTimeOffSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetTimeOffSettingsRequestBuilder {
        private final Long companyId;
        private Boolean paidTimeOff;
        private Boolean sickTimeOff;
        private Boolean timeOffRequestComment;
        private Double timeOffRequestNotice;

        private SetTimeOffSettingsRequestBuilder(Long companyId) {
            this.companyId = companyId;
        }

        /**
         * Set paidTimeOff
         * @param paidTimeOff  (optional)
         * @return SetTimeOffSettingsRequestBuilder
         */
        public SetTimeOffSettingsRequestBuilder paidTimeOff(Boolean paidTimeOff) {
            this.paidTimeOff = paidTimeOff;
            return this;
        }
        
        /**
         * Set sickTimeOff
         * @param sickTimeOff  (optional)
         * @return SetTimeOffSettingsRequestBuilder
         */
        public SetTimeOffSettingsRequestBuilder sickTimeOff(Boolean sickTimeOff) {
            this.sickTimeOff = sickTimeOff;
            return this;
        }
        
        /**
         * Set timeOffRequestComment
         * @param timeOffRequestComment  (optional)
         * @return SetTimeOffSettingsRequestBuilder
         */
        public SetTimeOffSettingsRequestBuilder timeOffRequestComment(Boolean timeOffRequestComment) {
            this.timeOffRequestComment = timeOffRequestComment;
            return this;
        }
        
        /**
         * Set timeOffRequestNotice
         * @param timeOffRequestNotice  (optional)
         * @return SetTimeOffSettingsRequestBuilder
         */
        public SetTimeOffSettingsRequestBuilder timeOffRequestNotice(Double timeOffRequestNotice) {
            this.timeOffRequestNotice = timeOffRequestNotice;
            return this;
        }
        
        /**
         * Build call for setTimeOffSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Time off settings for company saved </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeOffSetTimeOffSettingsRequest timeOffSetTimeOffSettingsRequest = buildBodyParams();
            return setTimeOffSettingsCall(companyId, timeOffSetTimeOffSettingsRequest, _callback);
        }

        private TimeOffSetTimeOffSettingsRequest buildBodyParams() {
            TimeOffSetTimeOffSettingsRequest timeOffSetTimeOffSettingsRequest = new TimeOffSetTimeOffSettingsRequest();
            timeOffSetTimeOffSettingsRequest.paidTimeOff(this.paidTimeOff);
            timeOffSetTimeOffSettingsRequest.sickTimeOff(this.sickTimeOff);
            timeOffSetTimeOffSettingsRequest.timeOffRequestComment(this.timeOffRequestComment);
            timeOffSetTimeOffSettingsRequest.timeOffRequestNotice(this.timeOffRequestNotice);
            return timeOffSetTimeOffSettingsRequest;
        }

        /**
         * Execute setTimeOffSettings request
         * @return TimeOffSetTimeOffSettings200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Time off settings for company saved </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public TimeOffSetTimeOffSettings200Response execute() throws ApiException {
            TimeOffSetTimeOffSettingsRequest timeOffSetTimeOffSettingsRequest = buildBodyParams();
            ApiResponse<TimeOffSetTimeOffSettings200Response> localVarResp = setTimeOffSettingsWithHttpInfo(companyId, timeOffSetTimeOffSettingsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setTimeOffSettings request with HTTP info returned
         * @return ApiResponse&lt;TimeOffSetTimeOffSettings200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Time off settings for company saved </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeOffSetTimeOffSettings200Response> executeWithHttpInfo() throws ApiException {
            TimeOffSetTimeOffSettingsRequest timeOffSetTimeOffSettingsRequest = buildBodyParams();
            return setTimeOffSettingsWithHttpInfo(companyId, timeOffSetTimeOffSettingsRequest);
        }

        /**
         * Execute setTimeOffSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Time off settings for company saved </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeOffSetTimeOffSettings200Response> _callback) throws ApiException {
            TimeOffSetTimeOffSettingsRequest timeOffSetTimeOffSettingsRequest = buildBodyParams();
            return setTimeOffSettingsAsync(companyId, timeOffSetTimeOffSettingsRequest, _callback);
        }
    }

    /**
     * Create Time Off Settings
     * 
     * @param companyId Company ID (required)
     * @return SetTimeOffSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Time off settings for company saved </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public SetTimeOffSettingsRequestBuilder setTimeOffSettings(Long companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new SetTimeOffSettingsRequestBuilder(companyId);
    }
    private okhttp3.Call updateTimeOffByIdCall(Long timeOffId, TimeOffUpdateTimeOffByIdRequest timeOffUpdateTimeOffByIdRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeOffUpdateTimeOffByIdRequest;

        // create path and map variables
        String localVarPath = "/v2/time_off/{time_off_id}"
            .replace("{" + "time_off_id" + "}", localVarApiClient.escapeString(timeOffId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTimeOffByIdValidateBeforeCall(Long timeOffId, TimeOffUpdateTimeOffByIdRequest timeOffUpdateTimeOffByIdRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeOffId' is set
        if (timeOffId == null) {
            throw new ApiException("Missing the required parameter 'timeOffId' when calling updateTimeOffById(Async)");
        }

        // verify the required parameter 'timeOffUpdateTimeOffByIdRequest' is set
        if (timeOffUpdateTimeOffByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'timeOffUpdateTimeOffByIdRequest' when calling updateTimeOffById(Async)");
        }

        return updateTimeOffByIdCall(timeOffId, timeOffUpdateTimeOffByIdRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<TimeOffUpdateTimeOffById200Response> updateTimeOffByIdWithHttpInfo(Long timeOffId, TimeOffUpdateTimeOffByIdRequest timeOffUpdateTimeOffByIdRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = updateTimeOffByIdValidateBeforeCall(timeOffId, timeOffUpdateTimeOffByIdRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<TimeOffUpdateTimeOffById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTimeOffByIdAsync(Long timeOffId, TimeOffUpdateTimeOffByIdRequest timeOffUpdateTimeOffByIdRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<TimeOffUpdateTimeOffById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTimeOffByIdValidateBeforeCall(timeOffId, timeOffUpdateTimeOffByIdRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<TimeOffUpdateTimeOffById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTimeOffByIdRequestBuilder {
        private final Long timeOffId;
        private Integer userId;
        private String fromDate;
        private String toDate;
        private Boolean partial;
        private String partialFrom;
        private String partialTo;
        private String comments;
        private Integer status;
        private String statusActionMessage;
        private String category;
        private List<TimeOffCreateRequestRequestHoursInner> hours;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private UpdateTimeOffByIdRequestBuilder(Long timeOffId) {
            this.timeOffId = timeOffId;
        }

        /**
         * Set userId
         * @param userId  (optional)
         * @return UpdateTimeOffByIdRequestBuilder
         */
        public UpdateTimeOffByIdRequestBuilder userId(Integer userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set fromDate
         * @param fromDate  (optional)
         * @return UpdateTimeOffByIdRequestBuilder
         */
        public UpdateTimeOffByIdRequestBuilder fromDate(String fromDate) {
            this.fromDate = fromDate;
            return this;
        }
        
        /**
         * Set toDate
         * @param toDate  (optional)
         * @return UpdateTimeOffByIdRequestBuilder
         */
        public UpdateTimeOffByIdRequestBuilder toDate(String toDate) {
            this.toDate = toDate;
            return this;
        }
        
        /**
         * Set partial
         * @param partial  (optional)
         * @return UpdateTimeOffByIdRequestBuilder
         */
        public UpdateTimeOffByIdRequestBuilder partial(Boolean partial) {
            this.partial = partial;
            return this;
        }
        
        /**
         * Set partialFrom
         * @param partialFrom  (optional)
         * @return UpdateTimeOffByIdRequestBuilder
         */
        public UpdateTimeOffByIdRequestBuilder partialFrom(String partialFrom) {
            this.partialFrom = partialFrom;
            return this;
        }
        
        /**
         * Set partialTo
         * @param partialTo  (optional)
         * @return UpdateTimeOffByIdRequestBuilder
         */
        public UpdateTimeOffByIdRequestBuilder partialTo(String partialTo) {
            this.partialTo = partialTo;
            return this;
        }
        
        /**
         * Set comments
         * @param comments  (optional)
         * @return UpdateTimeOffByIdRequestBuilder
         */
        public UpdateTimeOffByIdRequestBuilder comments(String comments) {
            this.comments = comments;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateTimeOffByIdRequestBuilder
         */
        public UpdateTimeOffByIdRequestBuilder status(Integer status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set statusActionMessage
         * @param statusActionMessage  (optional)
         * @return UpdateTimeOffByIdRequestBuilder
         */
        public UpdateTimeOffByIdRequestBuilder statusActionMessage(String statusActionMessage) {
            this.statusActionMessage = statusActionMessage;
            return this;
        }
        
        /**
         * Set category
         * @param category  (optional)
         * @return UpdateTimeOffByIdRequestBuilder
         */
        public UpdateTimeOffByIdRequestBuilder category(String category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set hours
         * @param hours  (optional)
         * @return UpdateTimeOffByIdRequestBuilder
         */
        public UpdateTimeOffByIdRequestBuilder hours(List<TimeOffCreateRequestRequestHoursInner> hours) {
            this.hours = hours;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return UpdateTimeOffByIdRequestBuilder
         */
        public UpdateTimeOffByIdRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return UpdateTimeOffByIdRequestBuilder
         */
        public UpdateTimeOffByIdRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for updateTimeOffById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeOffUpdateTimeOffByIdRequest timeOffUpdateTimeOffByIdRequest = buildBodyParams();
            return updateTimeOffByIdCall(timeOffId, timeOffUpdateTimeOffByIdRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private TimeOffUpdateTimeOffByIdRequest buildBodyParams() {
            TimeOffUpdateTimeOffByIdRequest timeOffUpdateTimeOffByIdRequest = new TimeOffUpdateTimeOffByIdRequest();
            timeOffUpdateTimeOffByIdRequest.userId(this.userId);
            timeOffUpdateTimeOffByIdRequest.fromDate(this.fromDate);
            timeOffUpdateTimeOffByIdRequest.toDate(this.toDate);
            timeOffUpdateTimeOffByIdRequest.partial(this.partial);
            timeOffUpdateTimeOffByIdRequest.partialFrom(this.partialFrom);
            timeOffUpdateTimeOffByIdRequest.partialTo(this.partialTo);
            timeOffUpdateTimeOffByIdRequest.comments(this.comments);
            timeOffUpdateTimeOffByIdRequest.status(this.status);
            timeOffUpdateTimeOffByIdRequest.statusActionMessage(this.statusActionMessage);
            timeOffUpdateTimeOffByIdRequest.category(this.category);
            timeOffUpdateTimeOffByIdRequest.hours(this.hours);
            return timeOffUpdateTimeOffByIdRequest;
        }

        /**
         * Execute updateTimeOffById request
         * @return TimeOffUpdateTimeOffById200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public TimeOffUpdateTimeOffById200Response execute() throws ApiException {
            TimeOffUpdateTimeOffByIdRequest timeOffUpdateTimeOffByIdRequest = buildBodyParams();
            ApiResponse<TimeOffUpdateTimeOffById200Response> localVarResp = updateTimeOffByIdWithHttpInfo(timeOffId, timeOffUpdateTimeOffByIdRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTimeOffById request with HTTP info returned
         * @return ApiResponse&lt;TimeOffUpdateTimeOffById200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeOffUpdateTimeOffById200Response> executeWithHttpInfo() throws ApiException {
            TimeOffUpdateTimeOffByIdRequest timeOffUpdateTimeOffByIdRequest = buildBodyParams();
            return updateTimeOffByIdWithHttpInfo(timeOffId, timeOffUpdateTimeOffByIdRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute updateTimeOffById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeOffUpdateTimeOffById200Response> _callback) throws ApiException {
            TimeOffUpdateTimeOffByIdRequest timeOffUpdateTimeOffByIdRequest = buildBodyParams();
            return updateTimeOffByIdAsync(timeOffId, timeOffUpdateTimeOffByIdRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Update Time Off
     * 
     * @param timeOffId Time Off ID (required)
     * @param timeOffUpdateTimeOffByIdRequest  (required)
     * @return UpdateTimeOffByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTimeOffByIdRequestBuilder updateTimeOffById(Long timeOffId) throws IllegalArgumentException {
        if (timeOffId == null) throw new IllegalArgumentException("\"timeOffId\" is required but got null");
        return new UpdateTimeOffByIdRequestBuilder(timeOffId);
    }
}
