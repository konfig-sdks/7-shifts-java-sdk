/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.konfigthis.client.model.ShiftsCreateNewShiftRequest;
import com.konfigthis.client.model.ShiftsCreateNewShiftRequestBreaksInner;
import com.konfigthis.client.model.ShiftsCreateNewShiftResponse;
import com.konfigthis.client.model.ShiftsGetShiftByIdResponse;
import com.konfigthis.client.model.ShiftsListResponse;
import com.konfigthis.client.model.ShiftsUpdateShiftByIdRequest;
import com.konfigthis.client.model.ShiftsUpdateShiftByIdRequestBreaksInner;
import com.konfigthis.client.model.ShiftsUpdateShiftByIdResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ShiftsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ShiftsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ShiftsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewShiftCall(Long companyId, ShiftsCreateNewShiftRequest shiftsCreateNewShiftRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shiftsCreateNewShiftRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/shifts"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewShiftValidateBeforeCall(Long companyId, ShiftsCreateNewShiftRequest shiftsCreateNewShiftRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createNewShift(Async)");
        }

        // verify the required parameter 'shiftsCreateNewShiftRequest' is set
        if (shiftsCreateNewShiftRequest == null) {
            throw new ApiException("Missing the required parameter 'shiftsCreateNewShiftRequest' when calling createNewShift(Async)");
        }

        return createNewShiftCall(companyId, shiftsCreateNewShiftRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<ShiftsCreateNewShiftResponse> createNewShiftWithHttpInfo(Long companyId, ShiftsCreateNewShiftRequest shiftsCreateNewShiftRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = createNewShiftValidateBeforeCall(companyId, shiftsCreateNewShiftRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<ShiftsCreateNewShiftResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewShiftAsync(Long companyId, ShiftsCreateNewShiftRequest shiftsCreateNewShiftRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<ShiftsCreateNewShiftResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewShiftValidateBeforeCall(companyId, shiftsCreateNewShiftRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<ShiftsCreateNewShiftResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewShiftRequestBuilder {
        private final Integer locationId;
        private final OffsetDateTime start;
        private final OffsetDateTime end;
        private final Long companyId;
        private Integer userId;
        private Integer departmentId;
        private Integer roleId;
        private Integer stationId;
        private Boolean close;
        private Boolean businessDecline;
        private String notes;
        private Boolean draft;
        private Boolean notified;
        private Boolean open;
        private Integer openOfferType;
        private Boolean unassigned;
        private Integer unassignedSkillLevel;
        private Integer status;
        private Integer lateMinutes;
        private List<ShiftsCreateNewShiftRequestBreaksInner> breaks;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private CreateNewShiftRequestBuilder(Integer locationId, OffsetDateTime start, OffsetDateTime end, Long companyId) {
            this.locationId = locationId;
            this.start = start;
            this.end = end;
            this.companyId = companyId;
        }

        /**
         * Set userId
         * @param userId User ID (optional)
         * @return CreateNewShiftRequestBuilder
         */
        public CreateNewShiftRequestBuilder userId(Integer userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set departmentId
         * @param departmentId Department ID. Required if the location uses departments. (optional)
         * @return CreateNewShiftRequestBuilder
         */
        public CreateNewShiftRequestBuilder departmentId(Integer departmentId) {
            this.departmentId = departmentId;
            return this;
        }
        
        /**
         * Set roleId
         * @param roleId Role ID. Required if the location uses roles. (optional)
         * @return CreateNewShiftRequestBuilder
         */
        public CreateNewShiftRequestBuilder roleId(Integer roleId) {
            this.roleId = roleId;
            return this;
        }
        
        /**
         * Set stationId
         * @param stationId Station ID (optional)
         * @return CreateNewShiftRequestBuilder
         */
        public CreateNewShiftRequestBuilder stationId(Integer stationId) {
            this.stationId = stationId;
            return this;
        }
        
        /**
         * Set close
         * @param close Set to true if the shift ends at closing time. If set, end is not used. (optional)
         * @return CreateNewShiftRequestBuilder
         */
        public CreateNewShiftRequestBuilder close(Boolean close) {
            this.close = close;
            return this;
        }
        
        /**
         * Set businessDecline
         * @param businessDecline Set to true if the shift ends at business decline. (optional)
         * @return CreateNewShiftRequestBuilder
         */
        public CreateNewShiftRequestBuilder businessDecline(Boolean businessDecline) {
            this.businessDecline = businessDecline;
            return this;
        }
        
        /**
         * Set notes
         * @param notes Notes displayed on a shift. (optional)
         * @return CreateNewShiftRequestBuilder
         */
        public CreateNewShiftRequestBuilder notes(String notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Set draft
         * @param draft If true the shift is not published. (optional)
         * @return CreateNewShiftRequestBuilder
         */
        public CreateNewShiftRequestBuilder draft(Boolean draft) {
            this.draft = draft;
            return this;
        }
        
        /**
         * Set notified
         * @param notified If true the user has been notified of the published shift. (optional)
         * @return CreateNewShiftRequestBuilder
         */
        public CreateNewShiftRequestBuilder notified(Boolean notified) {
            this.notified = notified;
            return this;
        }
        
        /**
         * Set open
         * @param open Set to true if the shift is not assigned to any user. Open shifts can be requested by users. (optional)
         * @return CreateNewShiftRequestBuilder
         */
        public CreateNewShiftRequestBuilder open(Boolean open) {
            this.open = open;
            return this;
        }
        
        /**
         * Set openOfferType
         * @param openOfferType Set when open is true. Set to 1 for everyone can request an open shift; set to 1 if only offered to specified role. (optional)
         * @return CreateNewShiftRequestBuilder
         */
        public CreateNewShiftRequestBuilder openOfferType(Integer openOfferType) {
            this.openOfferType = openOfferType;
            return this;
        }
        
        /**
         * Set unassigned
         * @param unassigned Internal use only (optional)
         * @return CreateNewShiftRequestBuilder
         */
        public CreateNewShiftRequestBuilder unassigned(Boolean unassigned) {
            this.unassigned = unassigned;
            return this;
        }
        
        /**
         * Set unassignedSkillLevel
         * @param unassignedSkillLevel The skill level required for this shift. (optional)
         * @return CreateNewShiftRequestBuilder
         */
        public CreateNewShiftRequestBuilder unassignedSkillLevel(Integer unassignedSkillLevel) {
            this.unassignedSkillLevel = unassignedSkillLevel;
            return this;
        }
        
        /**
         * Set status
         * @param status Shift status type. 0 - none, 1 - sick, 2 - no show, 3 - late, 4 - call out, 5 - left late. (optional)
         * @return CreateNewShiftRequestBuilder
         */
        public CreateNewShiftRequestBuilder status(Integer status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set lateMinutes
         * @param lateMinutes Number of minutes a user can clock in late after the shift starts. (optional)
         * @return CreateNewShiftRequestBuilder
         */
        public CreateNewShiftRequestBuilder lateMinutes(Integer lateMinutes) {
            this.lateMinutes = lateMinutes;
            return this;
        }
        
        /**
         * Set breaks
         * @param breaks Breaks to be created with the shift (optional)
         * @return CreateNewShiftRequestBuilder
         */
        public CreateNewShiftRequestBuilder breaks(List<ShiftsCreateNewShiftRequestBreaksInner> breaks) {
            this.breaks = breaks;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return CreateNewShiftRequestBuilder
         */
        public CreateNewShiftRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return CreateNewShiftRequestBuilder
         */
        public CreateNewShiftRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for createNewShift
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Shift created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ShiftsCreateNewShiftRequest shiftsCreateNewShiftRequest = buildBodyParams();
            return createNewShiftCall(companyId, shiftsCreateNewShiftRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private ShiftsCreateNewShiftRequest buildBodyParams() {
            ShiftsCreateNewShiftRequest shiftsCreateNewShiftRequest = new ShiftsCreateNewShiftRequest();
            shiftsCreateNewShiftRequest.locationId(this.locationId);
            shiftsCreateNewShiftRequest.userId(this.userId);
            shiftsCreateNewShiftRequest.departmentId(this.departmentId);
            shiftsCreateNewShiftRequest.roleId(this.roleId);
            shiftsCreateNewShiftRequest.stationId(this.stationId);
            shiftsCreateNewShiftRequest.start(this.start);
            shiftsCreateNewShiftRequest.end(this.end);
            shiftsCreateNewShiftRequest.close(this.close);
            shiftsCreateNewShiftRequest.businessDecline(this.businessDecline);
            shiftsCreateNewShiftRequest.notes(this.notes);
            shiftsCreateNewShiftRequest.draft(this.draft);
            shiftsCreateNewShiftRequest.notified(this.notified);
            shiftsCreateNewShiftRequest.open(this.open);
            shiftsCreateNewShiftRequest.openOfferType(this.openOfferType);
            shiftsCreateNewShiftRequest.unassigned(this.unassigned);
            if (this.unassignedSkillLevel != null)
            shiftsCreateNewShiftRequest.unassignedSkillLevel(ShiftsCreateNewShiftRequest.UnassignedSkillLevelEnum.fromValue(this.unassignedSkillLevel));
            if (this.status != null)
            shiftsCreateNewShiftRequest.status(ShiftsCreateNewShiftRequest.StatusEnum.fromValue(this.status));
            shiftsCreateNewShiftRequest.lateMinutes(this.lateMinutes);
            shiftsCreateNewShiftRequest.breaks(this.breaks);
            return shiftsCreateNewShiftRequest;
        }

        /**
         * Execute createNewShift request
         * @return ShiftsCreateNewShiftResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Shift created </td><td>  -  </td></tr>
         </table>
         */
        public ShiftsCreateNewShiftResponse execute() throws ApiException {
            ShiftsCreateNewShiftRequest shiftsCreateNewShiftRequest = buildBodyParams();
            ApiResponse<ShiftsCreateNewShiftResponse> localVarResp = createNewShiftWithHttpInfo(companyId, shiftsCreateNewShiftRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewShift request with HTTP info returned
         * @return ApiResponse&lt;ShiftsCreateNewShiftResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Shift created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShiftsCreateNewShiftResponse> executeWithHttpInfo() throws ApiException {
            ShiftsCreateNewShiftRequest shiftsCreateNewShiftRequest = buildBodyParams();
            return createNewShiftWithHttpInfo(companyId, shiftsCreateNewShiftRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute createNewShift request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Shift created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShiftsCreateNewShiftResponse> _callback) throws ApiException {
            ShiftsCreateNewShiftRequest shiftsCreateNewShiftRequest = buildBodyParams();
            return createNewShiftAsync(companyId, shiftsCreateNewShiftRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Create Shift
     * 
     * @param companyId Company ID (required)
     * @param shiftsCreateNewShiftRequest  (required)
     * @return CreateNewShiftRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Shift created </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewShiftRequestBuilder createNewShift(Integer locationId, OffsetDateTime start, OffsetDateTime end, Long companyId) throws IllegalArgumentException {
        if (locationId == null) throw new IllegalArgumentException("\"locationId\" is required but got null");
        if (start == null) throw new IllegalArgumentException("\"start\" is required but got null");
        if (end == null) throw new IllegalArgumentException("\"end\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new CreateNewShiftRequestBuilder(locationId, start, end, companyId);
    }
    private okhttp3.Call deleteShiftByIdCall(Long companyId, Long shiftId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/shifts/{shift_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "shift_id" + "}", localVarApiClient.escapeString(shiftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteShiftByIdValidateBeforeCall(Long companyId, Long shiftId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling deleteShiftById(Async)");
        }

        // verify the required parameter 'shiftId' is set
        if (shiftId == null) {
            throw new ApiException("Missing the required parameter 'shiftId' when calling deleteShiftById(Async)");
        }

        return deleteShiftByIdCall(companyId, shiftId, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<Void> deleteShiftByIdWithHttpInfo(Long companyId, Long shiftId, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = deleteShiftByIdValidateBeforeCall(companyId, shiftId, xApiVersion, xCompanyGuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteShiftByIdAsync(Long companyId, Long shiftId, String xApiVersion, UUID xCompanyGuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteShiftByIdValidateBeforeCall(companyId, shiftId, xApiVersion, xCompanyGuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteShiftByIdRequestBuilder {
        private final Long companyId;
        private final Long shiftId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private DeleteShiftByIdRequestBuilder(Long companyId, Long shiftId) {
            this.companyId = companyId;
            this.shiftId = shiftId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return DeleteShiftByIdRequestBuilder
         */
        public DeleteShiftByIdRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return DeleteShiftByIdRequestBuilder
         */
        public DeleteShiftByIdRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for deleteShiftById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteShiftByIdCall(companyId, shiftId, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute deleteShiftById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteShiftByIdWithHttpInfo(companyId, shiftId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute deleteShiftById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteShiftByIdWithHttpInfo(companyId, shiftId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute deleteShiftById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteShiftByIdAsync(companyId, shiftId, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Delete Shift
     * 
     * @param companyId Company ID (required)
     * @param shiftId Shift ID (required)
     * @return DeleteShiftByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteShiftByIdRequestBuilder deleteShiftById(Long companyId, Long shiftId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (shiftId == null) throw new IllegalArgumentException("\"shiftId\" is required but got null");
        return new DeleteShiftByIdRequestBuilder(companyId, shiftId);
    }
    private okhttp3.Call getShiftByIdCall(Long companyId, Long shiftId, String xApiVersion, UUID xCompanyGuid, Boolean includeDeleted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/shifts/{shift_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "shift_id" + "}", localVarApiClient.escapeString(shiftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_deleted", includeDeleted));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShiftByIdValidateBeforeCall(Long companyId, Long shiftId, String xApiVersion, UUID xCompanyGuid, Boolean includeDeleted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getShiftById(Async)");
        }

        // verify the required parameter 'shiftId' is set
        if (shiftId == null) {
            throw new ApiException("Missing the required parameter 'shiftId' when calling getShiftById(Async)");
        }

        return getShiftByIdCall(companyId, shiftId, xApiVersion, xCompanyGuid, includeDeleted, _callback);

    }


    private ApiResponse<ShiftsGetShiftByIdResponse> getShiftByIdWithHttpInfo(Long companyId, Long shiftId, String xApiVersion, UUID xCompanyGuid, Boolean includeDeleted) throws ApiException {
        okhttp3.Call localVarCall = getShiftByIdValidateBeforeCall(companyId, shiftId, xApiVersion, xCompanyGuid, includeDeleted, null);
        Type localVarReturnType = new TypeToken<ShiftsGetShiftByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getShiftByIdAsync(Long companyId, Long shiftId, String xApiVersion, UUID xCompanyGuid, Boolean includeDeleted, final ApiCallback<ShiftsGetShiftByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShiftByIdValidateBeforeCall(companyId, shiftId, xApiVersion, xCompanyGuid, includeDeleted, _callback);
        Type localVarReturnType = new TypeToken<ShiftsGetShiftByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetShiftByIdRequestBuilder {
        private final Long companyId;
        private final Long shiftId;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private Boolean includeDeleted;

        private GetShiftByIdRequestBuilder(Long companyId, Long shiftId) {
            this.companyId = companyId;
            this.shiftId = shiftId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetShiftByIdRequestBuilder
         */
        public GetShiftByIdRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetShiftByIdRequestBuilder
         */
        public GetShiftByIdRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set includeDeleted
         * @param includeDeleted Return the shift even if its deleted (optional)
         * @return GetShiftByIdRequestBuilder
         */
        public GetShiftByIdRequestBuilder includeDeleted(Boolean includeDeleted) {
            this.includeDeleted = includeDeleted;
            return this;
        }
        
        /**
         * Build call for getShiftById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getShiftByIdCall(companyId, shiftId, xApiVersion, xCompanyGuid, includeDeleted, _callback);
        }


        /**
         * Execute getShiftById request
         * @return ShiftsGetShiftByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ShiftsGetShiftByIdResponse execute() throws ApiException {
            ApiResponse<ShiftsGetShiftByIdResponse> localVarResp = getShiftByIdWithHttpInfo(companyId, shiftId, xApiVersion, xCompanyGuid, includeDeleted);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getShiftById request with HTTP info returned
         * @return ApiResponse&lt;ShiftsGetShiftByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShiftsGetShiftByIdResponse> executeWithHttpInfo() throws ApiException {
            return getShiftByIdWithHttpInfo(companyId, shiftId, xApiVersion, xCompanyGuid, includeDeleted);
        }

        /**
         * Execute getShiftById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShiftsGetShiftByIdResponse> _callback) throws ApiException {
            return getShiftByIdAsync(companyId, shiftId, xApiVersion, xCompanyGuid, includeDeleted, _callback);
        }
    }

    /**
     * Retrieve Shift
     * 
     * @param companyId Company ID (required)
     * @param shiftId Shift ID (required)
     * @return GetShiftByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetShiftByIdRequestBuilder getShiftById(Long companyId, Long shiftId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (shiftId == null) throw new IllegalArgumentException("\"shiftId\" is required but got null");
        return new GetShiftByIdRequestBuilder(companyId, shiftId);
    }
    private okhttp3.Call listCall(Long companyId, String xApiVersion, UUID xCompanyGuid, String cursor, Long limit, Long locationId, List<Integer> shiftIds, Long departmentId, List<Integer> departmentIds, Long roleId, Long userId, OffsetDateTime startLte, OffsetDateTime startGte, OffsetDateTime endLte, OffsetDateTime endGte, Boolean deleted, Boolean draft, Boolean includeDraft, Boolean open, OffsetDateTime modifiedSince, String sortBy, String sortDir, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/shifts"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (shiftIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "shift_ids", shiftIds));
        }

        if (departmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("department_id", departmentId));
        }

        if (departmentIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "department_ids", departmentIds));
        }

        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id", roleId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (startLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start[lte]", startLte));
        }

        if (startGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start[gte]", startGte));
        }

        if (endLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end[lte]", endLte));
        }

        if (endGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end[gte]", endGte));
        }

        if (deleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleted", deleted));
        }

        if (draft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("draft", draft));
        }

        if (includeDraft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_draft", includeDraft));
        }

        if (open != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("open", open));
        }

        if (modifiedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_since", modifiedSince));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_dir", sortDir));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Long companyId, String xApiVersion, UUID xCompanyGuid, String cursor, Long limit, Long locationId, List<Integer> shiftIds, Long departmentId, List<Integer> departmentIds, Long roleId, Long userId, OffsetDateTime startLte, OffsetDateTime startGte, OffsetDateTime endLte, OffsetDateTime endGte, Boolean deleted, Boolean draft, Boolean includeDraft, Boolean open, OffsetDateTime modifiedSince, String sortBy, String sortDir, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling list(Async)");
        }

        return listCall(companyId, xApiVersion, xCompanyGuid, cursor, limit, locationId, shiftIds, departmentId, departmentIds, roleId, userId, startLte, startGte, endLte, endGte, deleted, draft, includeDraft, open, modifiedSince, sortBy, sortDir, _callback);

    }


    private ApiResponse<ShiftsListResponse> listWithHttpInfo(Long companyId, String xApiVersion, UUID xCompanyGuid, String cursor, Long limit, Long locationId, List<Integer> shiftIds, Long departmentId, List<Integer> departmentIds, Long roleId, Long userId, OffsetDateTime startLte, OffsetDateTime startGte, OffsetDateTime endLte, OffsetDateTime endGte, Boolean deleted, Boolean draft, Boolean includeDraft, Boolean open, OffsetDateTime modifiedSince, String sortBy, String sortDir) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, cursor, limit, locationId, shiftIds, departmentId, departmentIds, roleId, userId, startLte, startGte, endLte, endGte, deleted, draft, includeDraft, open, modifiedSince, sortBy, sortDir, null);
        Type localVarReturnType = new TypeToken<ShiftsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Long companyId, String xApiVersion, UUID xCompanyGuid, String cursor, Long limit, Long locationId, List<Integer> shiftIds, Long departmentId, List<Integer> departmentIds, Long roleId, Long userId, OffsetDateTime startLte, OffsetDateTime startGte, OffsetDateTime endLte, OffsetDateTime endGte, Boolean deleted, Boolean draft, Boolean includeDraft, Boolean open, OffsetDateTime modifiedSince, String sortBy, String sortDir, final ApiCallback<ShiftsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, cursor, limit, locationId, shiftIds, departmentId, departmentIds, roleId, userId, startLte, startGte, endLte, endGte, deleted, draft, includeDraft, open, modifiedSince, sortBy, sortDir, _callback);
        Type localVarReturnType = new TypeToken<ShiftsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final Long companyId;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private String cursor;
        private Long limit;
        private Long locationId;
        private List<Integer> shiftIds;
        private Long departmentId;
        private List<Integer> departmentIds;
        private Long roleId;
        private Long userId;
        private OffsetDateTime startLte;
        private OffsetDateTime startGte;
        private OffsetDateTime endLte;
        private OffsetDateTime endGte;
        private Boolean deleted;
        private Boolean draft;
        private Boolean includeDraft;
        private Boolean open;
        private OffsetDateTime modifiedSince;
        private String sortBy;
        private String sortDir;

        private ListRequestBuilder(Long companyId) {
            this.companyId = companyId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Cursor for the next or previous page of results. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The number of results desired per page. (optional, default to 100)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set locationId
         * @param locationId Location ID (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder locationId(Long locationId) {
            this.locationId = locationId;
            return this;
        }
        
        /**
         * Set shiftIds
         * @param shiftIds A comma separated list of Shift IDs (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder shiftIds(List<Integer> shiftIds) {
            this.shiftIds = shiftIds;
            return this;
        }
        
        /**
         * Set departmentId
         * @param departmentId Department ID (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder departmentId(Long departmentId) {
            this.departmentId = departmentId;
            return this;
        }
        
        /**
         * Set departmentIds
         * @param departmentIds Department IDs (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder departmentIds(List<Integer> departmentIds) {
            this.departmentIds = departmentIds;
            return this;
        }
        
        /**
         * Set roleId
         * @param roleId Role ID (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder roleId(Long roleId) {
            this.roleId = roleId;
            return this;
        }
        
        /**
         * Set userId
         * @param userId User ID (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder userId(Long userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set startLte
         * @param startLte Return shifts that start before or on specified date. In ISO8601 Format (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder startLte(OffsetDateTime startLte) {
            this.startLte = startLte;
            return this;
        }
        
        /**
         * Set startGte
         * @param startGte Return shifts that start after or on specified date time. In ISO8601 Format (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder startGte(OffsetDateTime startGte) {
            this.startGte = startGte;
            return this;
        }
        
        /**
         * Set endLte
         * @param endLte Return shifts that end before or on specified date time. In ISO8601 Format (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder endLte(OffsetDateTime endLte) {
            this.endLte = endLte;
            return this;
        }
        
        /**
         * Set endGte
         * @param endGte Return shifts that end after or on specified date time. In ISO8601 Format (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder endGte(OffsetDateTime endGte) {
            this.endGte = endGte;
            return this;
        }
        
        /**
         * Set deleted
         * @param deleted Return shifts that were published and have been deleted. Cannot be combined with draft. (optional, default to false)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder deleted(Boolean deleted) {
            this.deleted = deleted;
            return this;
        }
        
        /**
         * Set draft
         * @param draft Return shifts that are in draft. Draft shifts have created, edited or deleted but not been published. Overrides deleted flag. (optional, default to false)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder draft(Boolean draft) {
            this.draft = draft;
            return this;
        }
        
        /**
         * Set includeDraft
         * @param includeDraft Return shifts that are published, and also shifts in draft. Overrides deleted flag and draft flag. (optional, default to false)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder includeDraft(Boolean includeDraft) {
            this.includeDraft = includeDraft;
            return this;
        }
        
        /**
         * Set open
         * @param open Return shifts that are open. Open shifts means anyone can request to take it and not assigned to any individual. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder open(Boolean open) {
            this.open = open;
            return this;
        }
        
        /**
         * Set modifiedSince
         * @param modifiedSince Return only shifts that have been modified from specified date time. In ISO8601 Format (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder modifiedSince(OffsetDateTime modifiedSince) {
            this.modifiedSince = modifiedSince;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Sort by either start or end (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortDir
         * @param sortDir Sort by direction (asc, desc) (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder sortDir(String sortDir) {
            this.sortDir = sortDir;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(companyId, xApiVersion, xCompanyGuid, cursor, limit, locationId, shiftIds, departmentId, departmentIds, roleId, userId, startLte, startGte, endLte, endGte, deleted, draft, includeDraft, open, modifiedSince, sortBy, sortDir, _callback);
        }


        /**
         * Execute list request
         * @return ShiftsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ShiftsListResponse execute() throws ApiException {
            ApiResponse<ShiftsListResponse> localVarResp = listWithHttpInfo(companyId, xApiVersion, xCompanyGuid, cursor, limit, locationId, shiftIds, departmentId, departmentIds, roleId, userId, startLte, startGte, endLte, endGte, deleted, draft, includeDraft, open, modifiedSince, sortBy, sortDir);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;ShiftsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShiftsListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(companyId, xApiVersion, xCompanyGuid, cursor, limit, locationId, shiftIds, departmentId, departmentIds, roleId, userId, startLte, startGte, endLte, endGte, deleted, draft, includeDraft, open, modifiedSince, sortBy, sortDir);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShiftsListResponse> _callback) throws ApiException {
            return listAsync(companyId, xApiVersion, xCompanyGuid, cursor, limit, locationId, shiftIds, departmentId, departmentIds, roleId, userId, startLte, startGte, endLte, endGte, deleted, draft, includeDraft, open, modifiedSince, sortBy, sortDir, _callback);
        }
    }

    /**
     * List Shifts
     * 
     * @param companyId Company ID (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list(Long companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new ListRequestBuilder(companyId);
    }
    private okhttp3.Call updateShiftByIdCall(Long companyId, Long shiftId, ShiftsUpdateShiftByIdRequest shiftsUpdateShiftByIdRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shiftsUpdateShiftByIdRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/shifts/{shift_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "shift_id" + "}", localVarApiClient.escapeString(shiftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateShiftByIdValidateBeforeCall(Long companyId, Long shiftId, ShiftsUpdateShiftByIdRequest shiftsUpdateShiftByIdRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updateShiftById(Async)");
        }

        // verify the required parameter 'shiftId' is set
        if (shiftId == null) {
            throw new ApiException("Missing the required parameter 'shiftId' when calling updateShiftById(Async)");
        }

        // verify the required parameter 'shiftsUpdateShiftByIdRequest' is set
        if (shiftsUpdateShiftByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'shiftsUpdateShiftByIdRequest' when calling updateShiftById(Async)");
        }

        return updateShiftByIdCall(companyId, shiftId, shiftsUpdateShiftByIdRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<ShiftsUpdateShiftByIdResponse> updateShiftByIdWithHttpInfo(Long companyId, Long shiftId, ShiftsUpdateShiftByIdRequest shiftsUpdateShiftByIdRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = updateShiftByIdValidateBeforeCall(companyId, shiftId, shiftsUpdateShiftByIdRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<ShiftsUpdateShiftByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateShiftByIdAsync(Long companyId, Long shiftId, ShiftsUpdateShiftByIdRequest shiftsUpdateShiftByIdRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<ShiftsUpdateShiftByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateShiftByIdValidateBeforeCall(companyId, shiftId, shiftsUpdateShiftByIdRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<ShiftsUpdateShiftByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateShiftByIdRequestBuilder {
        private final Long companyId;
        private final Long shiftId;
        private Integer locationId;
        private Integer userId;
        private Integer departmentId;
        private Integer roleId;
        private Integer stationId;
        private OffsetDateTime start;
        private OffsetDateTime end;
        private Boolean close;
        private Boolean businessDecline;
        private String notes;
        private Boolean draft;
        private Boolean open;
        private Integer openOfferType;
        private Boolean unassigned;
        private Integer unassignedSkillLevel;
        private Integer status;
        private Integer lateMinutes;
        private List<ShiftsUpdateShiftByIdRequestBreaksInner> breaks;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private UpdateShiftByIdRequestBuilder(Long companyId, Long shiftId) {
            this.companyId = companyId;
            this.shiftId = shiftId;
        }

        /**
         * Set locationId
         * @param locationId Location ID (optional)
         * @return UpdateShiftByIdRequestBuilder
         */
        public UpdateShiftByIdRequestBuilder locationId(Integer locationId) {
            this.locationId = locationId;
            return this;
        }
        
        /**
         * Set userId
         * @param userId User ID (optional)
         * @return UpdateShiftByIdRequestBuilder
         */
        public UpdateShiftByIdRequestBuilder userId(Integer userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set departmentId
         * @param departmentId Department ID. Required if the location uses departments (optional)
         * @return UpdateShiftByIdRequestBuilder
         */
        public UpdateShiftByIdRequestBuilder departmentId(Integer departmentId) {
            this.departmentId = departmentId;
            return this;
        }
        
        /**
         * Set roleId
         * @param roleId Role ID. Required if the location uses roles (optional)
         * @return UpdateShiftByIdRequestBuilder
         */
        public UpdateShiftByIdRequestBuilder roleId(Integer roleId) {
            this.roleId = roleId;
            return this;
        }
        
        /**
         * Set stationId
         * @param stationId The station assigned to the shift (optional)
         * @return UpdateShiftByIdRequestBuilder
         */
        public UpdateShiftByIdRequestBuilder stationId(Integer stationId) {
            this.stationId = stationId;
            return this;
        }
        
        /**
         * Set start
         * @param start Start date time of the shift. UTC in ISO8601 format (optional)
         * @return UpdateShiftByIdRequestBuilder
         */
        public UpdateShiftByIdRequestBuilder start(OffsetDateTime start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set end
         * @param end End date time of the shift. UTC in ISO8601 format (optional)
         * @return UpdateShiftByIdRequestBuilder
         */
        public UpdateShiftByIdRequestBuilder end(OffsetDateTime end) {
            this.end = end;
            return this;
        }
        
        /**
         * Set close
         * @param close Set to true if the shift ends at closing time. If set end is not used. (optional)
         * @return UpdateShiftByIdRequestBuilder
         */
        public UpdateShiftByIdRequestBuilder close(Boolean close) {
            this.close = close;
            return this;
        }
        
        /**
         * Set businessDecline
         * @param businessDecline Set to true if the shift ends at business decline. (optional)
         * @return UpdateShiftByIdRequestBuilder
         */
        public UpdateShiftByIdRequestBuilder businessDecline(Boolean businessDecline) {
            this.businessDecline = businessDecline;
            return this;
        }
        
        /**
         * Set notes
         * @param notes Notes displayed on a shift (optional)
         * @return UpdateShiftByIdRequestBuilder
         */
        public UpdateShiftByIdRequestBuilder notes(String notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Set draft
         * @param draft If true the shift is not published. (optional)
         * @return UpdateShiftByIdRequestBuilder
         */
        public UpdateShiftByIdRequestBuilder draft(Boolean draft) {
            this.draft = draft;
            return this;
        }
        
        /**
         * Set open
         * @param open Set to true if the shift is not assigned to any user. Open shifts can be requested by users. (optional)
         * @return UpdateShiftByIdRequestBuilder
         */
        public UpdateShiftByIdRequestBuilder open(Boolean open) {
            this.open = open;
            return this;
        }
        
        /**
         * Set openOfferType
         * @param openOfferType Set when open is true. Set to 0 when everyone at a location can request an open shift; set to 1 if only offered to specified role. (optional)
         * @return UpdateShiftByIdRequestBuilder
         */
        public UpdateShiftByIdRequestBuilder openOfferType(Integer openOfferType) {
            this.openOfferType = openOfferType;
            return this;
        }
        
        /**
         * Set unassigned
         * @param unassigned When true the shift is unassigned. Internal use only. (optional)
         * @return UpdateShiftByIdRequestBuilder
         */
        public UpdateShiftByIdRequestBuilder unassigned(Boolean unassigned) {
            this.unassigned = unassigned;
            return this;
        }
        
        /**
         * Set unassignedSkillLevel
         * @param unassignedSkillLevel The skill level required for this shift.  * 1: Beginner  * 2: Intermediate  * 3: Experienced  (optional)
         * @return UpdateShiftByIdRequestBuilder
         */
        public UpdateShiftByIdRequestBuilder unassignedSkillLevel(Integer unassignedSkillLevel) {
            this.unassignedSkillLevel = unassignedSkillLevel;
            return this;
        }
        
        /**
         * Set status
         * @param status Shift status type.  * 0: None  * 1: Sick  * 2: No Show  * 3: Late  * 4: Call Out  * 5: Left Late  (optional)
         * @return UpdateShiftByIdRequestBuilder
         */
        public UpdateShiftByIdRequestBuilder status(Integer status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set lateMinutes
         * @param lateMinutes Number of minutes a user can clock in late after the shift starts. (optional)
         * @return UpdateShiftByIdRequestBuilder
         */
        public UpdateShiftByIdRequestBuilder lateMinutes(Integer lateMinutes) {
            this.lateMinutes = lateMinutes;
            return this;
        }
        
        /**
         * Set breaks
         * @param breaks Breaks to be updated with the shift (optional)
         * @return UpdateShiftByIdRequestBuilder
         */
        public UpdateShiftByIdRequestBuilder breaks(List<ShiftsUpdateShiftByIdRequestBreaksInner> breaks) {
            this.breaks = breaks;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return UpdateShiftByIdRequestBuilder
         */
        public UpdateShiftByIdRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return UpdateShiftByIdRequestBuilder
         */
        public UpdateShiftByIdRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for updateShiftById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ShiftsUpdateShiftByIdRequest shiftsUpdateShiftByIdRequest = buildBodyParams();
            return updateShiftByIdCall(companyId, shiftId, shiftsUpdateShiftByIdRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private ShiftsUpdateShiftByIdRequest buildBodyParams() {
            ShiftsUpdateShiftByIdRequest shiftsUpdateShiftByIdRequest = new ShiftsUpdateShiftByIdRequest();
            shiftsUpdateShiftByIdRequest.locationId(this.locationId);
            shiftsUpdateShiftByIdRequest.userId(this.userId);
            shiftsUpdateShiftByIdRequest.departmentId(this.departmentId);
            shiftsUpdateShiftByIdRequest.roleId(this.roleId);
            shiftsUpdateShiftByIdRequest.stationId(this.stationId);
            shiftsUpdateShiftByIdRequest.start(this.start);
            shiftsUpdateShiftByIdRequest.end(this.end);
            shiftsUpdateShiftByIdRequest.close(this.close);
            shiftsUpdateShiftByIdRequest.businessDecline(this.businessDecline);
            shiftsUpdateShiftByIdRequest.notes(this.notes);
            shiftsUpdateShiftByIdRequest.draft(this.draft);
            shiftsUpdateShiftByIdRequest.open(this.open);
            if (this.openOfferType != null)
            shiftsUpdateShiftByIdRequest.openOfferType(ShiftsUpdateShiftByIdRequest.OpenOfferTypeEnum.fromValue(this.openOfferType));
            shiftsUpdateShiftByIdRequest.unassigned(this.unassigned);
            if (this.unassignedSkillLevel != null)
            shiftsUpdateShiftByIdRequest.unassignedSkillLevel(ShiftsUpdateShiftByIdRequest.UnassignedSkillLevelEnum.fromValue(this.unassignedSkillLevel));
            if (this.status != null)
            shiftsUpdateShiftByIdRequest.status(ShiftsUpdateShiftByIdRequest.StatusEnum.fromValue(this.status));
            shiftsUpdateShiftByIdRequest.lateMinutes(this.lateMinutes);
            shiftsUpdateShiftByIdRequest.breaks(this.breaks);
            return shiftsUpdateShiftByIdRequest;
        }

        /**
         * Execute updateShiftById request
         * @return ShiftsUpdateShiftByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ShiftsUpdateShiftByIdResponse execute() throws ApiException {
            ShiftsUpdateShiftByIdRequest shiftsUpdateShiftByIdRequest = buildBodyParams();
            ApiResponse<ShiftsUpdateShiftByIdResponse> localVarResp = updateShiftByIdWithHttpInfo(companyId, shiftId, shiftsUpdateShiftByIdRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateShiftById request with HTTP info returned
         * @return ApiResponse&lt;ShiftsUpdateShiftByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShiftsUpdateShiftByIdResponse> executeWithHttpInfo() throws ApiException {
            ShiftsUpdateShiftByIdRequest shiftsUpdateShiftByIdRequest = buildBodyParams();
            return updateShiftByIdWithHttpInfo(companyId, shiftId, shiftsUpdateShiftByIdRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute updateShiftById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShiftsUpdateShiftByIdResponse> _callback) throws ApiException {
            ShiftsUpdateShiftByIdRequest shiftsUpdateShiftByIdRequest = buildBodyParams();
            return updateShiftByIdAsync(companyId, shiftId, shiftsUpdateShiftByIdRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Update Shift
     * 
     * @param companyId Company ID (required)
     * @param shiftId Shift ID (required)
     * @param shiftsUpdateShiftByIdRequest  (required)
     * @return UpdateShiftByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateShiftByIdRequestBuilder updateShiftById(Long companyId, Long shiftId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (shiftId == null) throw new IllegalArgumentException("\"shiftId\" is required but got null");
        return new UpdateShiftByIdRequestBuilder(companyId, shiftId);
    }
}
