/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AuthenticationGenerateOAuthTokenRequest;
import com.konfigthis.client.model.AuthenticationGenerateOAuthTokenResponse;
import com.konfigthis.client.model.AuthenticationGetIdentityResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AuthenticationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthenticationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call generateOAuthTokenCall(String grantType, String clientId, AuthenticationGenerateOAuthTokenRequest authenticationGenerateOAuthTokenRequest, String clientSecret, String scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://app.7shifts.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticationGenerateOAuthTokenRequest;

        // create path and map variables
        String localVarPath = "/oauth2/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (grantType != null) {
            localVarFormParams.put("grant_type", grantType);
        }

        if (clientId != null) {
            localVarFormParams.put("client_id", clientId);
        }

        if (clientSecret != null) {
            localVarFormParams.put("client_secret", clientSecret);
        }

        if (scope != null) {
            localVarFormParams.put("scope", scope);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateOAuthTokenValidateBeforeCall(String grantType, String clientId, AuthenticationGenerateOAuthTokenRequest authenticationGenerateOAuthTokenRequest, String clientSecret, String scope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'grantType' is set
        if (grantType == null) {
            throw new ApiException("Missing the required parameter 'grantType' when calling generateOAuthToken(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling generateOAuthToken(Async)");
        }

        // verify the required parameter 'authenticationGenerateOAuthTokenRequest' is set
        if (authenticationGenerateOAuthTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticationGenerateOAuthTokenRequest' when calling generateOAuthToken(Async)");
        }

        return generateOAuthTokenCall(grantType, clientId, authenticationGenerateOAuthTokenRequest, clientSecret, scope, _callback);

    }


    private ApiResponse<AuthenticationGenerateOAuthTokenResponse> generateOAuthTokenWithHttpInfo(String grantType, String clientId, AuthenticationGenerateOAuthTokenRequest authenticationGenerateOAuthTokenRequest, String clientSecret, String scope) throws ApiException {
        okhttp3.Call localVarCall = generateOAuthTokenValidateBeforeCall(grantType, clientId, authenticationGenerateOAuthTokenRequest, clientSecret, scope, null);
        Type localVarReturnType = new TypeToken<AuthenticationGenerateOAuthTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateOAuthTokenAsync(String grantType, String clientId, AuthenticationGenerateOAuthTokenRequest authenticationGenerateOAuthTokenRequest, String clientSecret, String scope, final ApiCallback<AuthenticationGenerateOAuthTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateOAuthTokenValidateBeforeCall(grantType, clientId, authenticationGenerateOAuthTokenRequest, clientSecret, scope, _callback);
        Type localVarReturnType = new TypeToken<AuthenticationGenerateOAuthTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateOAuthTokenRequestBuilder {
        private final String grantType;
        private final String clientId;
        private String clientSecret;
        private String scope;

        private GenerateOAuthTokenRequestBuilder(String grantType, String clientId) {
            this.grantType = grantType;
            this.clientId = clientId;
        }

        /**
         * Set clientSecret
         * @param clientSecret  (optional)
         * @return GenerateOAuthTokenRequestBuilder
         */
        public GenerateOAuthTokenRequestBuilder clientSecret(String clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }
        
        /**
         * Set scope
         * @param scope A space-delimited list of scopes. (optional)
         * @return GenerateOAuthTokenRequestBuilder
         */
        public GenerateOAuthTokenRequestBuilder scope(String scope) {
            this.scope = scope;
            return this;
        }
        
        /**
         * Build call for generateOAuthToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AuthenticationGenerateOAuthTokenRequest authenticationGenerateOAuthTokenRequest = buildBodyParams();
            return generateOAuthTokenCall(grantType, clientId, authenticationGenerateOAuthTokenRequest, clientSecret, scope, _callback);
        }

        private AuthenticationGenerateOAuthTokenRequest buildBodyParams() {
            AuthenticationGenerateOAuthTokenRequest authenticationGenerateOAuthTokenRequest = new AuthenticationGenerateOAuthTokenRequest();
            if (this.grantType != null)
            authenticationGenerateOAuthTokenRequest.grantType(AuthenticationGenerateOAuthTokenRequest.GrantTypeEnum.fromValue(this.grantType));
            authenticationGenerateOAuthTokenRequest.clientId(this.clientId);
            authenticationGenerateOAuthTokenRequest.clientSecret(this.clientSecret);
            authenticationGenerateOAuthTokenRequest.scope(this.scope);
            return authenticationGenerateOAuthTokenRequest;
        }

        /**
         * Execute generateOAuthToken request
         * @return AuthenticationGenerateOAuthTokenResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AuthenticationGenerateOAuthTokenResponse execute() throws ApiException {
            AuthenticationGenerateOAuthTokenRequest authenticationGenerateOAuthTokenRequest = buildBodyParams();
            ApiResponse<AuthenticationGenerateOAuthTokenResponse> localVarResp = generateOAuthTokenWithHttpInfo(grantType, clientId, authenticationGenerateOAuthTokenRequest, clientSecret, scope);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateOAuthToken request with HTTP info returned
         * @return ApiResponse&lt;AuthenticationGenerateOAuthTokenResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthenticationGenerateOAuthTokenResponse> executeWithHttpInfo() throws ApiException {
            AuthenticationGenerateOAuthTokenRequest authenticationGenerateOAuthTokenRequest = buildBodyParams();
            return generateOAuthTokenWithHttpInfo(grantType, clientId, authenticationGenerateOAuthTokenRequest, clientSecret, scope);
        }

        /**
         * Execute generateOAuthToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthenticationGenerateOAuthTokenResponse> _callback) throws ApiException {
            AuthenticationGenerateOAuthTokenRequest authenticationGenerateOAuthTokenRequest = buildBodyParams();
            return generateOAuthTokenAsync(grantType, clientId, authenticationGenerateOAuthTokenRequest, clientSecret, scope, _callback);
        }
    }

    /**
     * Create OAuth Token
     * 
     * @param grantType Token grant type. For Partner OAuth tokens specifying client_credentials (required)
     * @param clientId  (required)
     * @param authenticationGenerateOAuthTokenRequest  (required)
     * @return GenerateOAuthTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GenerateOAuthTokenRequestBuilder generateOAuthToken(String grantType, String clientId) throws IllegalArgumentException {
        if (grantType == null) throw new IllegalArgumentException("\"grantType\" is required but got null");
            

        if (clientId == null) throw new IllegalArgumentException("\"clientId\" is required but got null");
            

        return new GenerateOAuthTokenRequestBuilder(grantType, clientId);
    }
    private okhttp3.Call getIdentityCall(String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/whoami";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIdentityValidateBeforeCall(String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        return getIdentityCall(xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<AuthenticationGetIdentityResponse> getIdentityWithHttpInfo(String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = getIdentityValidateBeforeCall(xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<AuthenticationGetIdentityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getIdentityAsync(String xApiVersion, UUID xCompanyGuid, final ApiCallback<AuthenticationGetIdentityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIdentityValidateBeforeCall(xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<AuthenticationGetIdentityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetIdentityRequestBuilder {
        private String xApiVersion;
        private UUID xCompanyGuid;

        private GetIdentityRequestBuilder() {
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetIdentityRequestBuilder
         */
        public GetIdentityRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetIdentityRequestBuilder
         */
        public GetIdentityRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for getIdentity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getIdentityCall(xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute getIdentity request
         * @return AuthenticationGetIdentityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AuthenticationGetIdentityResponse execute() throws ApiException {
            ApiResponse<AuthenticationGetIdentityResponse> localVarResp = getIdentityWithHttpInfo(xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getIdentity request with HTTP info returned
         * @return ApiResponse&lt;AuthenticationGetIdentityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthenticationGetIdentityResponse> executeWithHttpInfo() throws ApiException {
            return getIdentityWithHttpInfo(xApiVersion, xCompanyGuid);
        }

        /**
         * Execute getIdentity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthenticationGetIdentityResponse> _callback) throws ApiException {
            return getIdentityAsync(xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Retrieve Identity
     * 
     * @return GetIdentityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetIdentityRequestBuilder getIdentity() throws IllegalArgumentException {
        return new GetIdentityRequestBuilder();
    }
}
