/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.konfigthis.client.model.ReceiptsCreateReceiptRequest;
import com.konfigthis.client.model.ReceiptsCreateReceiptRequestAllOfReceiptLines;
import com.konfigthis.client.model.ReceiptsCreateReceiptRequestAllOfTipDetails;
import com.konfigthis.client.model.ReceiptsCreateReceiptResponse;
import com.konfigthis.client.model.ReceiptsGetReceiptResponse;
import com.konfigthis.client.model.ReceiptsGetSummaryResponse;
import com.konfigthis.client.model.ReceiptsListResponse;
import com.konfigthis.client.model.ReceiptsUpdateReceiptRequest;
import com.konfigthis.client.model.ReceiptsUpdateReceiptRequestReceiptLinesInner;
import com.konfigthis.client.model.ReceiptsUpdateReceiptRequestTipDetailsInner;
import com.konfigthis.client.model.ReceiptsUpdateReceiptResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ReceiptsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReceiptsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ReceiptsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createReceiptCall(Long companyId, ReceiptsCreateReceiptRequest receiptsCreateReceiptRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = receiptsCreateReceiptRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/receipts"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReceiptValidateBeforeCall(Long companyId, ReceiptsCreateReceiptRequest receiptsCreateReceiptRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createReceipt(Async)");
        }

        // verify the required parameter 'receiptsCreateReceiptRequest' is set
        if (receiptsCreateReceiptRequest == null) {
            throw new ApiException("Missing the required parameter 'receiptsCreateReceiptRequest' when calling createReceipt(Async)");
        }

        return createReceiptCall(companyId, receiptsCreateReceiptRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<ReceiptsCreateReceiptResponse> createReceiptWithHttpInfo(Long companyId, ReceiptsCreateReceiptRequest receiptsCreateReceiptRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = createReceiptValidateBeforeCall(companyId, receiptsCreateReceiptRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<ReceiptsCreateReceiptResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createReceiptAsync(Long companyId, ReceiptsCreateReceiptRequest receiptsCreateReceiptRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<ReceiptsCreateReceiptResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReceiptValidateBeforeCall(companyId, receiptsCreateReceiptRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<ReceiptsCreateReceiptResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateReceiptRequestBuilder {
        private final Long companyId;
        private Integer locationId;
        private OffsetDateTime receiptDate;
        private Integer netTotal;
        private Integer grossTotal;
        private Integer totalReceiptDiscounts;
        private Integer tips;
        private String externalUserId;
        private String revenueCenter;
        private List<ReceiptsCreateReceiptRequestAllOfReceiptLines> receiptLines;
        private List<ReceiptsCreateReceiptRequestAllOfTipDetails> tipDetails;
        private String status;
        private String orderType;
        private String diningOption;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private CreateReceiptRequestBuilder(Long companyId) {
            this.companyId = companyId;
        }

        /**
         * Set locationId
         * @param locationId The 7shifts location_id this receipt belongs to (optional)
         * @return CreateReceiptRequestBuilder
         */
        public CreateReceiptRequestBuilder locationId(Integer locationId) {
            this.locationId = locationId;
            return this;
        }
        
        /**
         * Set receiptDate
         * @param receiptDate Receipt create date time. UTC date time in ISO8601 format (optional)
         * @return CreateReceiptRequestBuilder
         */
        public CreateReceiptRequestBuilder receiptDate(OffsetDateTime receiptDate) {
            this.receiptDate = receiptDate;
            return this;
        }
        
        /**
         * Set netTotal
         * @param netTotal The net total of the receipt pre tax, post-discounts, pre tips. In cents (optional)
         * @return CreateReceiptRequestBuilder
         */
        public CreateReceiptRequestBuilder netTotal(Integer netTotal) {
            this.netTotal = netTotal;
            return this;
        }
        
        /**
         * Set grossTotal
         * @param grossTotal The gross total of the receipt in cents (optional)
         * @return CreateReceiptRequestBuilder
         */
        public CreateReceiptRequestBuilder grossTotal(Integer grossTotal) {
            this.grossTotal = grossTotal;
            return this;
        }
        
        /**
         * Set totalReceiptDiscounts
         * @param totalReceiptDiscounts The total discounts of the receipt in cents (optional)
         * @return CreateReceiptRequestBuilder
         */
        public CreateReceiptRequestBuilder totalReceiptDiscounts(Integer totalReceiptDiscounts) {
            this.totalReceiptDiscounts = totalReceiptDiscounts;
            return this;
        }
        
        /**
         * Set tips
         * @param tips Total tips in cents (optional)
         * @return CreateReceiptRequestBuilder
         */
        public CreateReceiptRequestBuilder tips(Integer tips) {
            this.tips = tips;
            return this;
        }
        
        /**
         * Set externalUserId
         * @param externalUserId External user ID of the sales receipt in your system (must be unique per 7shifts location). (optional)
         * @return CreateReceiptRequestBuilder
         */
        public CreateReceiptRequestBuilder externalUserId(String externalUserId) {
            this.externalUserId = externalUserId;
            return this;
        }
        
        /**
         * Set revenueCenter
         * @param revenueCenter Label for the revenue centre for the receipt (optional)
         * @return CreateReceiptRequestBuilder
         */
        public CreateReceiptRequestBuilder revenueCenter(String revenueCenter) {
            this.revenueCenter = revenueCenter;
            return this;
        }
        
        /**
         * Set receiptLines
         * @param receiptLines Receipt line items (optional)
         * @return CreateReceiptRequestBuilder
         */
        public CreateReceiptRequestBuilder receiptLines(List<ReceiptsCreateReceiptRequestAllOfReceiptLines> receiptLines) {
            this.receiptLines = receiptLines;
            return this;
        }
        
        /**
         * Set tipDetails
         * @param tipDetails Tip line items (optional)
         * @return CreateReceiptRequestBuilder
         */
        public CreateReceiptRequestBuilder tipDetails(List<ReceiptsCreateReceiptRequestAllOfTipDetails> tipDetails) {
            this.tipDetails = tipDetails;
            return this;
        }
        
        /**
         * Set status
         * @param status Status of the receipt (optional)
         * @return CreateReceiptRequestBuilder
         */
        public CreateReceiptRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set orderType
         * @param orderType Order type (optional)
         * @return CreateReceiptRequestBuilder
         */
        public CreateReceiptRequestBuilder orderType(String orderType) {
            this.orderType = orderType;
            return this;
        }
        
        /**
         * Set diningOption
         * @param diningOption Dining option (optional)
         * @return CreateReceiptRequestBuilder
         */
        public CreateReceiptRequestBuilder diningOption(String diningOption) {
            this.diningOption = diningOption;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return CreateReceiptRequestBuilder
         */
        public CreateReceiptRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return CreateReceiptRequestBuilder
         */
        public CreateReceiptRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for createReceipt
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ReceiptsCreateReceiptRequest receiptsCreateReceiptRequest = buildBodyParams();
            return createReceiptCall(companyId, receiptsCreateReceiptRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private ReceiptsCreateReceiptRequest buildBodyParams() {
            ReceiptsCreateReceiptRequest receiptsCreateReceiptRequest = new ReceiptsCreateReceiptRequest();
            receiptsCreateReceiptRequest.receiptId(this.receiptId);
            return receiptsCreateReceiptRequest;
        }

        /**
         * Execute createReceipt request
         * @return ReceiptsCreateReceiptResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ReceiptsCreateReceiptResponse execute() throws ApiException {
            ReceiptsCreateReceiptRequest receiptsCreateReceiptRequest = buildBodyParams();
            ApiResponse<ReceiptsCreateReceiptResponse> localVarResp = createReceiptWithHttpInfo(companyId, receiptsCreateReceiptRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createReceipt request with HTTP info returned
         * @return ApiResponse&lt;ReceiptsCreateReceiptResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReceiptsCreateReceiptResponse> executeWithHttpInfo() throws ApiException {
            ReceiptsCreateReceiptRequest receiptsCreateReceiptRequest = buildBodyParams();
            return createReceiptWithHttpInfo(companyId, receiptsCreateReceiptRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute createReceipt request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReceiptsCreateReceiptResponse> _callback) throws ApiException {
            ReceiptsCreateReceiptRequest receiptsCreateReceiptRequest = buildBodyParams();
            return createReceiptAsync(companyId, receiptsCreateReceiptRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Create Receipt
     * 
     * @param companyId Company ID (required)
     * @param receiptsCreateReceiptRequest Receipt (required)
     * @return CreateReceiptRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateReceiptRequestBuilder createReceipt(Long companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new CreateReceiptRequestBuilder(companyId);
    }
    private okhttp3.Call getReceiptCall(Long companyId, UUID receiptId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/receipts/{receipt_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "receipt_id" + "}", localVarApiClient.escapeString(receiptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReceiptValidateBeforeCall(Long companyId, UUID receiptId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getReceipt(Async)");
        }

        // verify the required parameter 'receiptId' is set
        if (receiptId == null) {
            throw new ApiException("Missing the required parameter 'receiptId' when calling getReceipt(Async)");
        }

        return getReceiptCall(companyId, receiptId, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<ReceiptsGetReceiptResponse> getReceiptWithHttpInfo(Long companyId, UUID receiptId, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = getReceiptValidateBeforeCall(companyId, receiptId, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<ReceiptsGetReceiptResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getReceiptAsync(Long companyId, UUID receiptId, String xApiVersion, UUID xCompanyGuid, final ApiCallback<ReceiptsGetReceiptResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReceiptValidateBeforeCall(companyId, receiptId, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<ReceiptsGetReceiptResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetReceiptRequestBuilder {
        private final Long companyId;
        private final UUID receiptId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private GetReceiptRequestBuilder(Long companyId, UUID receiptId) {
            this.companyId = companyId;
            this.receiptId = receiptId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetReceiptRequestBuilder
         */
        public GetReceiptRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetReceiptRequestBuilder
         */
        public GetReceiptRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for getReceipt
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getReceiptCall(companyId, receiptId, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute getReceipt request
         * @return ReceiptsGetReceiptResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ReceiptsGetReceiptResponse execute() throws ApiException {
            ApiResponse<ReceiptsGetReceiptResponse> localVarResp = getReceiptWithHttpInfo(companyId, receiptId, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getReceipt request with HTTP info returned
         * @return ApiResponse&lt;ReceiptsGetReceiptResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReceiptsGetReceiptResponse> executeWithHttpInfo() throws ApiException {
            return getReceiptWithHttpInfo(companyId, receiptId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute getReceipt request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReceiptsGetReceiptResponse> _callback) throws ApiException {
            return getReceiptAsync(companyId, receiptId, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Retrieve Receipt
     * 
     * @param companyId Company ID (required)
     * @param receiptId Receipt UUID (required)
     * @return GetReceiptRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetReceiptRequestBuilder getReceipt(Long companyId, UUID receiptId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (receiptId == null) throw new IllegalArgumentException("\"receiptId\" is required but got null");
            

        return new GetReceiptRequestBuilder(companyId, receiptId);
    }
    private okhttp3.Call getSummaryCall(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, OffsetDateTime receiptDateGte, OffsetDateTime receiptDateLte, OffsetDateTime modifiedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/receipts_summary"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (receiptDateGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("receipt_date[gte]", receiptDateGte));
        }

        if (receiptDateLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("receipt_date[lte]", receiptDateLte));
        }

        if (modifiedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_since", modifiedSince));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSummaryValidateBeforeCall(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, OffsetDateTime receiptDateGte, OffsetDateTime receiptDateLte, OffsetDateTime modifiedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getSummary(Async)");
        }

        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling getSummary(Async)");
        }

        return getSummaryCall(companyId, locationId, xApiVersion, xCompanyGuid, receiptDateGte, receiptDateLte, modifiedSince, _callback);

    }


    private ApiResponse<ReceiptsGetSummaryResponse> getSummaryWithHttpInfo(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, OffsetDateTime receiptDateGte, OffsetDateTime receiptDateLte, OffsetDateTime modifiedSince) throws ApiException {
        okhttp3.Call localVarCall = getSummaryValidateBeforeCall(companyId, locationId, xApiVersion, xCompanyGuid, receiptDateGte, receiptDateLte, modifiedSince, null);
        Type localVarReturnType = new TypeToken<ReceiptsGetSummaryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSummaryAsync(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, OffsetDateTime receiptDateGte, OffsetDateTime receiptDateLte, OffsetDateTime modifiedSince, final ApiCallback<ReceiptsGetSummaryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSummaryValidateBeforeCall(companyId, locationId, xApiVersion, xCompanyGuid, receiptDateGte, receiptDateLte, modifiedSince, _callback);
        Type localVarReturnType = new TypeToken<ReceiptsGetSummaryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSummaryRequestBuilder {
        private final Long companyId;
        private final Long locationId;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private OffsetDateTime receiptDateGte;
        private OffsetDateTime receiptDateLte;
        private OffsetDateTime modifiedSince;

        private GetSummaryRequestBuilder(Long companyId, Long locationId) {
            this.companyId = companyId;
            this.locationId = locationId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetSummaryRequestBuilder
         */
        public GetSummaryRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetSummaryRequestBuilder
         */
        public GetSummaryRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set receiptDateGte
         * @param receiptDateGte Return receipts that were created on or after a specific date. Limit to 31-day range with receipt_date[lte]. (optional)
         * @return GetSummaryRequestBuilder
         */
        public GetSummaryRequestBuilder receiptDateGte(OffsetDateTime receiptDateGte) {
            this.receiptDateGte = receiptDateGte;
            return this;
        }
        
        /**
         * Set receiptDateLte
         * @param receiptDateLte Return receipts that were created on or before a specific date. Limit to 31-day range with receipt_date[gte]. (optional)
         * @return GetSummaryRequestBuilder
         */
        public GetSummaryRequestBuilder receiptDateLte(OffsetDateTime receiptDateLte) {
            this.receiptDateLte = receiptDateLte;
            return this;
        }
        
        /**
         * Set modifiedSince
         * @param modifiedSince Return receipts that were modified on or after a specific date. Limited to past 30 days. (optional)
         * @return GetSummaryRequestBuilder
         */
        public GetSummaryRequestBuilder modifiedSince(OffsetDateTime modifiedSince) {
            this.modifiedSince = modifiedSince;
            return this;
        }
        
        /**
         * Build call for getSummary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSummaryCall(companyId, locationId, xApiVersion, xCompanyGuid, receiptDateGte, receiptDateLte, modifiedSince, _callback);
        }


        /**
         * Execute getSummary request
         * @return ReceiptsGetSummaryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ReceiptsGetSummaryResponse execute() throws ApiException {
            ApiResponse<ReceiptsGetSummaryResponse> localVarResp = getSummaryWithHttpInfo(companyId, locationId, xApiVersion, xCompanyGuid, receiptDateGte, receiptDateLte, modifiedSince);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSummary request with HTTP info returned
         * @return ApiResponse&lt;ReceiptsGetSummaryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReceiptsGetSummaryResponse> executeWithHttpInfo() throws ApiException {
            return getSummaryWithHttpInfo(companyId, locationId, xApiVersion, xCompanyGuid, receiptDateGte, receiptDateLte, modifiedSince);
        }

        /**
         * Execute getSummary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReceiptsGetSummaryResponse> _callback) throws ApiException {
            return getSummaryAsync(companyId, locationId, xApiVersion, xCompanyGuid, receiptDateGte, receiptDateLte, modifiedSince, _callback);
        }
    }

    /**
     * Retrieve Receipts Summary
     * 
     * @param companyId Company ID (required)
     * @param locationId Location ID (required)
     * @return GetSummaryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetSummaryRequestBuilder getSummary(Long companyId, Long locationId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (locationId == null) throw new IllegalArgumentException("\"locationId\" is required but got null");
        return new GetSummaryRequestBuilder(companyId, locationId);
    }
    private okhttp3.Call listCall(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, OffsetDateTime receiptDateGte, OffsetDateTime receiptDateLte, OffsetDateTime modifiedSince, String status, String externalUserId, String cursor, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/receipts"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (receiptDateGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("receipt_date[gte]", receiptDateGte));
        }

        if (receiptDateLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("receipt_date[lte]", receiptDateLte));
        }

        if (modifiedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_since", modifiedSince));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (externalUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_user_id", externalUserId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, OffsetDateTime receiptDateGte, OffsetDateTime receiptDateLte, OffsetDateTime modifiedSince, String status, String externalUserId, String cursor, Long limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling list(Async)");
        }

        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling list(Async)");
        }

        return listCall(companyId, locationId, xApiVersion, xCompanyGuid, receiptDateGte, receiptDateLte, modifiedSince, status, externalUserId, cursor, limit, _callback);

    }


    private ApiResponse<ReceiptsListResponse> listWithHttpInfo(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, OffsetDateTime receiptDateGte, OffsetDateTime receiptDateLte, OffsetDateTime modifiedSince, String status, String externalUserId, String cursor, Long limit) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(companyId, locationId, xApiVersion, xCompanyGuid, receiptDateGte, receiptDateLte, modifiedSince, status, externalUserId, cursor, limit, null);
        Type localVarReturnType = new TypeToken<ReceiptsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, OffsetDateTime receiptDateGte, OffsetDateTime receiptDateLte, OffsetDateTime modifiedSince, String status, String externalUserId, String cursor, Long limit, final ApiCallback<ReceiptsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(companyId, locationId, xApiVersion, xCompanyGuid, receiptDateGte, receiptDateLte, modifiedSince, status, externalUserId, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<ReceiptsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final Long companyId;
        private final Long locationId;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private OffsetDateTime receiptDateGte;
        private OffsetDateTime receiptDateLte;
        private OffsetDateTime modifiedSince;
        private String status;
        private String externalUserId;
        private String cursor;
        private Long limit;

        private ListRequestBuilder(Long companyId, Long locationId) {
            this.companyId = companyId;
            this.locationId = locationId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set receiptDateGte
         * @param receiptDateGte Return receipts that were created on or after a specific date (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder receiptDateGte(OffsetDateTime receiptDateGte) {
            this.receiptDateGte = receiptDateGte;
            return this;
        }
        
        /**
         * Set receiptDateLte
         * @param receiptDateLte Return receipts that were created on or before a specific date (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder receiptDateLte(OffsetDateTime receiptDateLte) {
            this.receiptDateLte = receiptDateLte;
            return this;
        }
        
        /**
         * Set modifiedSince
         * @param modifiedSince Return receipts that were modified on or after a specific date (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder modifiedSince(OffsetDateTime modifiedSince) {
            this.modifiedSince = modifiedSince;
            return this;
        }
        
        /**
         * Set status
         * @param status Filter receipts by status type (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set externalUserId
         * @param externalUserId Filter receipts by external user id (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder externalUserId(String externalUserId) {
            this.externalUserId = externalUserId;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor An opaque cursor for the next or previous result set. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The number of results desired per page. (optional, default to 100)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(companyId, locationId, xApiVersion, xCompanyGuid, receiptDateGte, receiptDateLte, modifiedSince, status, externalUserId, cursor, limit, _callback);
        }


        /**
         * Execute list request
         * @return ReceiptsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ReceiptsListResponse execute() throws ApiException {
            ApiResponse<ReceiptsListResponse> localVarResp = listWithHttpInfo(companyId, locationId, xApiVersion, xCompanyGuid, receiptDateGte, receiptDateLte, modifiedSince, status, externalUserId, cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;ReceiptsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReceiptsListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(companyId, locationId, xApiVersion, xCompanyGuid, receiptDateGte, receiptDateLte, modifiedSince, status, externalUserId, cursor, limit);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReceiptsListResponse> _callback) throws ApiException {
            return listAsync(companyId, locationId, xApiVersion, xCompanyGuid, receiptDateGte, receiptDateLte, modifiedSince, status, externalUserId, cursor, limit, _callback);
        }
    }

    /**
     * List Receipts
     * 
     * @param companyId Company ID (required)
     * @param locationId Location ID (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list(Long companyId, Long locationId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (locationId == null) throw new IllegalArgumentException("\"locationId\" is required but got null");
        return new ListRequestBuilder(companyId, locationId);
    }
    private okhttp3.Call updateReceiptCall(Long companyId, String receiptId, ReceiptsUpdateReceiptRequest receiptsUpdateReceiptRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = receiptsUpdateReceiptRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/receipts/{receipt_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "receipt_id" + "}", localVarApiClient.escapeString(receiptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateReceiptValidateBeforeCall(Long companyId, String receiptId, ReceiptsUpdateReceiptRequest receiptsUpdateReceiptRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updateReceipt(Async)");
        }

        // verify the required parameter 'receiptId' is set
        if (receiptId == null) {
            throw new ApiException("Missing the required parameter 'receiptId' when calling updateReceipt(Async)");
        }

        // verify the required parameter 'receiptsUpdateReceiptRequest' is set
        if (receiptsUpdateReceiptRequest == null) {
            throw new ApiException("Missing the required parameter 'receiptsUpdateReceiptRequest' when calling updateReceipt(Async)");
        }

        return updateReceiptCall(companyId, receiptId, receiptsUpdateReceiptRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<ReceiptsUpdateReceiptResponse> updateReceiptWithHttpInfo(Long companyId, String receiptId, ReceiptsUpdateReceiptRequest receiptsUpdateReceiptRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = updateReceiptValidateBeforeCall(companyId, receiptId, receiptsUpdateReceiptRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<ReceiptsUpdateReceiptResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateReceiptAsync(Long companyId, String receiptId, ReceiptsUpdateReceiptRequest receiptsUpdateReceiptRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<ReceiptsUpdateReceiptResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateReceiptValidateBeforeCall(companyId, receiptId, receiptsUpdateReceiptRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<ReceiptsUpdateReceiptResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateReceiptRequestBuilder {
        private final Integer netTotal;
        private final Long companyId;
        private final String receiptId;
        private OffsetDateTime receiptDate;
        private Integer grossTotal;
        private Integer totalReceiptDiscounts;
        private Integer tips;
        private String externalUserId;
        private String revenueCenter;
        private List<ReceiptsUpdateReceiptRequestReceiptLinesInner> receiptLines;
        private List<ReceiptsUpdateReceiptRequestTipDetailsInner> tipDetails;
        private String status;
        private String orderType;
        private String diningOption;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private UpdateReceiptRequestBuilder(Integer netTotal, Long companyId, String receiptId) {
            this.netTotal = netTotal;
            this.companyId = companyId;
            this.receiptId = receiptId;
        }

        /**
         * Set receiptDate
         * @param receiptDate Receipt create date time. UTC date time in ISO8601 format (optional)
         * @return UpdateReceiptRequestBuilder
         */
        public UpdateReceiptRequestBuilder receiptDate(OffsetDateTime receiptDate) {
            this.receiptDate = receiptDate;
            return this;
        }
        
        /**
         * Set grossTotal
         * @param grossTotal The gross total of the receipt in cents (optional)
         * @return UpdateReceiptRequestBuilder
         */
        public UpdateReceiptRequestBuilder grossTotal(Integer grossTotal) {
            this.grossTotal = grossTotal;
            return this;
        }
        
        /**
         * Set totalReceiptDiscounts
         * @param totalReceiptDiscounts The total discounts of the receipt in cents (optional)
         * @return UpdateReceiptRequestBuilder
         */
        public UpdateReceiptRequestBuilder totalReceiptDiscounts(Integer totalReceiptDiscounts) {
            this.totalReceiptDiscounts = totalReceiptDiscounts;
            return this;
        }
        
        /**
         * Set tips
         * @param tips Total tips in cents (optional)
         * @return UpdateReceiptRequestBuilder
         */
        public UpdateReceiptRequestBuilder tips(Integer tips) {
            this.tips = tips;
            return this;
        }
        
        /**
         * Set externalUserId
         * @param externalUserId External user ID of the sales receipt in your system (must be unique per 7shifts location). (optional)
         * @return UpdateReceiptRequestBuilder
         */
        public UpdateReceiptRequestBuilder externalUserId(String externalUserId) {
            this.externalUserId = externalUserId;
            return this;
        }
        
        /**
         * Set revenueCenter
         * @param revenueCenter Label for the revenue center for the receipt (optional)
         * @return UpdateReceiptRequestBuilder
         */
        public UpdateReceiptRequestBuilder revenueCenter(String revenueCenter) {
            this.revenueCenter = revenueCenter;
            return this;
        }
        
        /**
         * Set receiptLines
         * @param receiptLines Receipt line items (optional)
         * @return UpdateReceiptRequestBuilder
         */
        public UpdateReceiptRequestBuilder receiptLines(List<ReceiptsUpdateReceiptRequestReceiptLinesInner> receiptLines) {
            this.receiptLines = receiptLines;
            return this;
        }
        
        /**
         * Set tipDetails
         * @param tipDetails Tip line items (optional)
         * @return UpdateReceiptRequestBuilder
         */
        public UpdateReceiptRequestBuilder tipDetails(List<ReceiptsUpdateReceiptRequestTipDetailsInner> tipDetails) {
            this.tipDetails = tipDetails;
            return this;
        }
        
        /**
         * Set status
         * @param status Status of the receipt (optional)
         * @return UpdateReceiptRequestBuilder
         */
        public UpdateReceiptRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set orderType
         * @param orderType Order type (optional)
         * @return UpdateReceiptRequestBuilder
         */
        public UpdateReceiptRequestBuilder orderType(String orderType) {
            this.orderType = orderType;
            return this;
        }
        
        /**
         * Set diningOption
         * @param diningOption Dining option (optional)
         * @return UpdateReceiptRequestBuilder
         */
        public UpdateReceiptRequestBuilder diningOption(String diningOption) {
            this.diningOption = diningOption;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return UpdateReceiptRequestBuilder
         */
        public UpdateReceiptRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return UpdateReceiptRequestBuilder
         */
        public UpdateReceiptRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for updateReceipt
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The receipt update is queued for processing </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ReceiptsUpdateReceiptRequest receiptsUpdateReceiptRequest = buildBodyParams();
            return updateReceiptCall(companyId, receiptId, receiptsUpdateReceiptRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private ReceiptsUpdateReceiptRequest buildBodyParams() {
            ReceiptsUpdateReceiptRequest receiptsUpdateReceiptRequest = new ReceiptsUpdateReceiptRequest();
            receiptsUpdateReceiptRequest.receiptDate(this.receiptDate);
            receiptsUpdateReceiptRequest.netTotal(this.netTotal);
            receiptsUpdateReceiptRequest.grossTotal(this.grossTotal);
            receiptsUpdateReceiptRequest.totalReceiptDiscounts(this.totalReceiptDiscounts);
            receiptsUpdateReceiptRequest.tips(this.tips);
            receiptsUpdateReceiptRequest.externalUserId(this.externalUserId);
            receiptsUpdateReceiptRequest.revenueCenter(this.revenueCenter);
            receiptsUpdateReceiptRequest.receiptLines(this.receiptLines);
            receiptsUpdateReceiptRequest.tipDetails(this.tipDetails);
            if (this.status != null)
            receiptsUpdateReceiptRequest.status(ReceiptsUpdateReceiptRequest.StatusEnum.fromValue(this.status));
            if (this.orderType != null)
            receiptsUpdateReceiptRequest.orderType(ReceiptsUpdateReceiptRequest.OrderTypeEnum.fromValue(this.orderType));
            receiptsUpdateReceiptRequest.diningOption(this.diningOption);
            return receiptsUpdateReceiptRequest;
        }

        /**
         * Execute updateReceipt request
         * @return ReceiptsUpdateReceiptResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The receipt update is queued for processing </td><td>  -  </td></tr>
         </table>
         */
        public ReceiptsUpdateReceiptResponse execute() throws ApiException {
            ReceiptsUpdateReceiptRequest receiptsUpdateReceiptRequest = buildBodyParams();
            ApiResponse<ReceiptsUpdateReceiptResponse> localVarResp = updateReceiptWithHttpInfo(companyId, receiptId, receiptsUpdateReceiptRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateReceipt request with HTTP info returned
         * @return ApiResponse&lt;ReceiptsUpdateReceiptResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The receipt update is queued for processing </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReceiptsUpdateReceiptResponse> executeWithHttpInfo() throws ApiException {
            ReceiptsUpdateReceiptRequest receiptsUpdateReceiptRequest = buildBodyParams();
            return updateReceiptWithHttpInfo(companyId, receiptId, receiptsUpdateReceiptRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute updateReceipt request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> The receipt update is queued for processing </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReceiptsUpdateReceiptResponse> _callback) throws ApiException {
            ReceiptsUpdateReceiptRequest receiptsUpdateReceiptRequest = buildBodyParams();
            return updateReceiptAsync(companyId, receiptId, receiptsUpdateReceiptRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Update Receipt
     * 
     * @param companyId Company ID (required)
     * @param receiptId Receipt ID.  Either 7shifts receipt UUID or a combination of the External ID of the sales receipt in your system and a Location ID. External ID&#39;s must start with &#39;ext:&#39; and the format is ext:location_id:receipt_id. (required)
     * @param receiptsUpdateReceiptRequest Receipt (required)
     * @return UpdateReceiptRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The receipt update is queued for processing </td><td>  -  </td></tr>
     </table>
     */
    public UpdateReceiptRequestBuilder updateReceipt(Integer netTotal, Long companyId, String receiptId) throws IllegalArgumentException {
        if (netTotal == null) throw new IllegalArgumentException("\"netTotal\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (receiptId == null) throw new IllegalArgumentException("\"receiptId\" is required but got null");
            

        return new UpdateReceiptRequestBuilder(netTotal, companyId, receiptId);
    }
}
