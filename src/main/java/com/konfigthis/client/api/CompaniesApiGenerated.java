/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CompaniesGetByIdResponse;
import com.konfigthis.client.model.CompaniesGetLaborSettingsResponse;
import com.konfigthis.client.model.CompaniesListInactiveReasonsResponse;
import com.konfigthis.client.model.CompaniesListResponse;
import com.konfigthis.client.model.CompaniesUpdateCompanyByIdRequest;
import com.konfigthis.client.model.CompaniesUpdateCompanyByIdResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CompaniesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CompaniesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CompaniesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getByIdCall(Long id, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/companies/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(Long id, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(id, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<CompaniesGetByIdResponse> getByIdWithHttpInfo(Long id, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<CompaniesGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(Long id, String xApiVersion, UUID xCompanyGuid, final ApiCallback<CompaniesGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<CompaniesGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final Long id;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private GetByIdRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute getById request
         * @return CompaniesGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CompaniesGetByIdResponse execute() throws ApiException {
            ApiResponse<CompaniesGetByIdResponse> localVarResp = getByIdWithHttpInfo(id, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;CompaniesGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompaniesGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompaniesGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(id, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Retrieve Company
     * 
     * @param id Company ID (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetByIdRequestBuilder(id);
    }
    private okhttp3.Call getLaborSettingsCall(Long companyId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/labor_settings"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLaborSettingsValidateBeforeCall(Long companyId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getLaborSettings(Async)");
        }

        return getLaborSettingsCall(companyId, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<CompaniesGetLaborSettingsResponse> getLaborSettingsWithHttpInfo(Long companyId, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = getLaborSettingsValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<CompaniesGetLaborSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLaborSettingsAsync(Long companyId, String xApiVersion, UUID xCompanyGuid, final ApiCallback<CompaniesGetLaborSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLaborSettingsValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<CompaniesGetLaborSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLaborSettingsRequestBuilder {
        private final Long companyId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private GetLaborSettingsRequestBuilder(Long companyId) {
            this.companyId = companyId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetLaborSettingsRequestBuilder
         */
        public GetLaborSettingsRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetLaborSettingsRequestBuilder
         */
        public GetLaborSettingsRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for getLaborSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLaborSettingsCall(companyId, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute getLaborSettings request
         * @return CompaniesGetLaborSettingsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CompaniesGetLaborSettingsResponse execute() throws ApiException {
            ApiResponse<CompaniesGetLaborSettingsResponse> localVarResp = getLaborSettingsWithHttpInfo(companyId, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLaborSettings request with HTTP info returned
         * @return ApiResponse&lt;CompaniesGetLaborSettingsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompaniesGetLaborSettingsResponse> executeWithHttpInfo() throws ApiException {
            return getLaborSettingsWithHttpInfo(companyId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute getLaborSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompaniesGetLaborSettingsResponse> _callback) throws ApiException {
            return getLaborSettingsAsync(companyId, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Retrieve Labor Settings
     * 
     * @param companyId Company ID (required)
     * @return GetLaborSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetLaborSettingsRequestBuilder getLaborSettings(Long companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new GetLaborSettingsRequestBuilder(companyId);
    }
    private okhttp3.Call listCall(String xApiVersion, UUID xCompanyGuid, String modifiedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/companies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (modifiedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_since", modifiedSince));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String xApiVersion, UUID xCompanyGuid, String modifiedSince, final ApiCallback _callback) throws ApiException {
        return listCall(xApiVersion, xCompanyGuid, modifiedSince, _callback);

    }


    private ApiResponse<CompaniesListResponse> listWithHttpInfo(String xApiVersion, UUID xCompanyGuid, String modifiedSince) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(xApiVersion, xCompanyGuid, modifiedSince, null);
        Type localVarReturnType = new TypeToken<CompaniesListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String xApiVersion, UUID xCompanyGuid, String modifiedSince, final ApiCallback<CompaniesListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(xApiVersion, xCompanyGuid, modifiedSince, _callback);
        Type localVarReturnType = new TypeToken<CompaniesListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private String xApiVersion;
        private UUID xCompanyGuid;
        private String modifiedSince;

        private ListRequestBuilder() {
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set modifiedSince
         * @param modifiedSince Return companies that have been modified since the specified date. Format YYYY-MM-DD (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder modifiedSince(String modifiedSince) {
            this.modifiedSince = modifiedSince;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(xApiVersion, xCompanyGuid, modifiedSince, _callback);
        }


        /**
         * Execute list request
         * @return CompaniesListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CompaniesListResponse execute() throws ApiException {
            ApiResponse<CompaniesListResponse> localVarResp = listWithHttpInfo(xApiVersion, xCompanyGuid, modifiedSince);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;CompaniesListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompaniesListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(xApiVersion, xCompanyGuid, modifiedSince);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompaniesListResponse> _callback) throws ApiException {
            return listAsync(xApiVersion, xCompanyGuid, modifiedSince, _callback);
        }
    }

    /**
     * List Companies
     * 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call listInactiveReasonsCall(Long companyId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/inactive_reasons"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInactiveReasonsValidateBeforeCall(Long companyId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling listInactiveReasons(Async)");
        }

        return listInactiveReasonsCall(companyId, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<CompaniesListInactiveReasonsResponse> listInactiveReasonsWithHttpInfo(Long companyId, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = listInactiveReasonsValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<CompaniesListInactiveReasonsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listInactiveReasonsAsync(Long companyId, String xApiVersion, UUID xCompanyGuid, final ApiCallback<CompaniesListInactiveReasonsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInactiveReasonsValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<CompaniesListInactiveReasonsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListInactiveReasonsRequestBuilder {
        private final Long companyId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private ListInactiveReasonsRequestBuilder(Long companyId) {
            this.companyId = companyId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return ListInactiveReasonsRequestBuilder
         */
        public ListInactiveReasonsRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return ListInactiveReasonsRequestBuilder
         */
        public ListInactiveReasonsRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for listInactiveReasons
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listInactiveReasonsCall(companyId, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute listInactiveReasons request
         * @return CompaniesListInactiveReasonsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CompaniesListInactiveReasonsResponse execute() throws ApiException {
            ApiResponse<CompaniesListInactiveReasonsResponse> localVarResp = listInactiveReasonsWithHttpInfo(companyId, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listInactiveReasons request with HTTP info returned
         * @return ApiResponse&lt;CompaniesListInactiveReasonsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompaniesListInactiveReasonsResponse> executeWithHttpInfo() throws ApiException {
            return listInactiveReasonsWithHttpInfo(companyId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute listInactiveReasons request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompaniesListInactiveReasonsResponse> _callback) throws ApiException {
            return listInactiveReasonsAsync(companyId, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * List Inactive Reasons
     * 
     * @param companyId Company ID (required)
     * @return ListInactiveReasonsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListInactiveReasonsRequestBuilder listInactiveReasons(Long companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new ListInactiveReasonsRequestBuilder(companyId);
    }
    private okhttp3.Call updateCompanyByIdCall(Long id, CompaniesUpdateCompanyByIdRequest companiesUpdateCompanyByIdRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = companiesUpdateCompanyByIdRequest;

        // create path and map variables
        String localVarPath = "/v2/companies/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCompanyByIdValidateBeforeCall(Long id, CompaniesUpdateCompanyByIdRequest companiesUpdateCompanyByIdRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCompanyById(Async)");
        }

        // verify the required parameter 'companiesUpdateCompanyByIdRequest' is set
        if (companiesUpdateCompanyByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'companiesUpdateCompanyByIdRequest' when calling updateCompanyById(Async)");
        }

        return updateCompanyByIdCall(id, companiesUpdateCompanyByIdRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<CompaniesUpdateCompanyByIdResponse> updateCompanyByIdWithHttpInfo(Long id, CompaniesUpdateCompanyByIdRequest companiesUpdateCompanyByIdRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = updateCompanyByIdValidateBeforeCall(id, companiesUpdateCompanyByIdRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<CompaniesUpdateCompanyByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCompanyByIdAsync(Long id, CompaniesUpdateCompanyByIdRequest companiesUpdateCompanyByIdRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<CompaniesUpdateCompanyByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCompanyByIdValidateBeforeCall(id, companiesUpdateCompanyByIdRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<CompaniesUpdateCompanyByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCompanyByIdRequestBuilder {
        private final Long id;
        private String name;
        private String country;
        private String photo;
        private String pos;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private UpdateCompanyByIdRequestBuilder(Long id) {
            this.id = id;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return UpdateCompanyByIdRequestBuilder
         */
        public UpdateCompanyByIdRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set country
         * @param country  (optional)
         * @return UpdateCompanyByIdRequestBuilder
         */
        public UpdateCompanyByIdRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set photo
         * @param photo  (optional)
         * @return UpdateCompanyByIdRequestBuilder
         */
        public UpdateCompanyByIdRequestBuilder photo(String photo) {
            this.photo = photo;
            return this;
        }
        
        /**
         * Set pos
         * @param pos  (optional)
         * @return UpdateCompanyByIdRequestBuilder
         */
        public UpdateCompanyByIdRequestBuilder pos(String pos) {
            this.pos = pos;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return UpdateCompanyByIdRequestBuilder
         */
        public UpdateCompanyByIdRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return UpdateCompanyByIdRequestBuilder
         */
        public UpdateCompanyByIdRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for updateCompanyById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A company </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CompaniesUpdateCompanyByIdRequest companiesUpdateCompanyByIdRequest = buildBodyParams();
            return updateCompanyByIdCall(id, companiesUpdateCompanyByIdRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private CompaniesUpdateCompanyByIdRequest buildBodyParams() {
            CompaniesUpdateCompanyByIdRequest companiesUpdateCompanyByIdRequest = new CompaniesUpdateCompanyByIdRequest();
            companiesUpdateCompanyByIdRequest.name(this.name);
            companiesUpdateCompanyByIdRequest.country(this.country);
            companiesUpdateCompanyByIdRequest.photo(this.photo);
            companiesUpdateCompanyByIdRequest.pos(this.pos);
            return companiesUpdateCompanyByIdRequest;
        }

        /**
         * Execute updateCompanyById request
         * @return CompaniesUpdateCompanyByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A company </td><td>  -  </td></tr>
         </table>
         */
        public CompaniesUpdateCompanyByIdResponse execute() throws ApiException {
            CompaniesUpdateCompanyByIdRequest companiesUpdateCompanyByIdRequest = buildBodyParams();
            ApiResponse<CompaniesUpdateCompanyByIdResponse> localVarResp = updateCompanyByIdWithHttpInfo(id, companiesUpdateCompanyByIdRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCompanyById request with HTTP info returned
         * @return ApiResponse&lt;CompaniesUpdateCompanyByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A company </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompaniesUpdateCompanyByIdResponse> executeWithHttpInfo() throws ApiException {
            CompaniesUpdateCompanyByIdRequest companiesUpdateCompanyByIdRequest = buildBodyParams();
            return updateCompanyByIdWithHttpInfo(id, companiesUpdateCompanyByIdRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute updateCompanyById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A company </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompaniesUpdateCompanyByIdResponse> _callback) throws ApiException {
            CompaniesUpdateCompanyByIdRequest companiesUpdateCompanyByIdRequest = buildBodyParams();
            return updateCompanyByIdAsync(id, companiesUpdateCompanyByIdRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Update Company
     * 
     * @param id Company ID (required)
     * @param companiesUpdateCompanyByIdRequest  (required)
     * @return UpdateCompanyByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A company </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCompanyByIdRequestBuilder updateCompanyById(Long id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UpdateCompanyByIdRequestBuilder(id);
    }
}
