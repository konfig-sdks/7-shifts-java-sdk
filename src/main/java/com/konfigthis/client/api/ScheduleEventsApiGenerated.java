/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.ScheduleEventsCreateEventRequest;
import com.konfigthis.client.model.ScheduleEventsCreateEventResponse;
import com.konfigthis.client.model.ScheduleEventsDeleteEventResponse;
import com.konfigthis.client.model.ScheduleEventsGetEventByIdResponse;
import com.konfigthis.client.model.ScheduleEventsListEventsResponse;
import com.konfigthis.client.model.ScheduleEventsUpdateEventByIdRequest;
import com.konfigthis.client.model.ScheduleEventsUpdateEventByIdResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ScheduleEventsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScheduleEventsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ScheduleEventsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createEventCall(Long companyId, ScheduleEventsCreateEventRequest scheduleEventsCreateEventRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scheduleEventsCreateEventRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/events"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEventValidateBeforeCall(Long companyId, ScheduleEventsCreateEventRequest scheduleEventsCreateEventRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createEvent(Async)");
        }

        // verify the required parameter 'scheduleEventsCreateEventRequest' is set
        if (scheduleEventsCreateEventRequest == null) {
            throw new ApiException("Missing the required parameter 'scheduleEventsCreateEventRequest' when calling createEvent(Async)");
        }

        return createEventCall(companyId, scheduleEventsCreateEventRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<ScheduleEventsCreateEventResponse> createEventWithHttpInfo(Long companyId, ScheduleEventsCreateEventRequest scheduleEventsCreateEventRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = createEventValidateBeforeCall(companyId, scheduleEventsCreateEventRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<ScheduleEventsCreateEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEventAsync(Long companyId, ScheduleEventsCreateEventRequest scheduleEventsCreateEventRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<ScheduleEventsCreateEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEventValidateBeforeCall(companyId, scheduleEventsCreateEventRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<ScheduleEventsCreateEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateEventRequestBuilder {
        private final String title;
        private final List<Integer> locationIds;
        private final String startDate;
        private final String startTime;
        private final String endDate;
        private final String endTime;
        private final Boolean isMultiDay;
        private final Long companyId;
        private String description;
        private String color;
        private String recurrence;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private CreateEventRequestBuilder(String title, List<Integer> locationIds, String startDate, String startTime, String endDate, String endTime, Boolean isMultiDay, Long companyId) {
            this.title = title;
            this.locationIds = locationIds;
            this.startDate = startDate;
            this.startTime = startTime;
            this.endDate = endDate;
            this.endTime = endTime;
            this.isMultiDay = isMultiDay;
            this.companyId = companyId;
        }

        /**
         * Set description
         * @param description Description for event (optional)
         * @return CreateEventRequestBuilder
         */
        public CreateEventRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set color
         * @param color A hex number representing the color (optional)
         * @return CreateEventRequestBuilder
         */
        public CreateEventRequestBuilder color(String color) {
            this.color = color;
            return this;
        }
        
        /**
         * Set recurrence
         * @param recurrence Recurrence rules as defined by the RFC 5545 spec (optional)
         * @return CreateEventRequestBuilder
         */
        public CreateEventRequestBuilder recurrence(String recurrence) {
            this.recurrence = recurrence;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return CreateEventRequestBuilder
         */
        public CreateEventRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return CreateEventRequestBuilder
         */
        public CreateEventRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for createEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ScheduleEventsCreateEventRequest scheduleEventsCreateEventRequest = buildBodyParams();
            return createEventCall(companyId, scheduleEventsCreateEventRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private ScheduleEventsCreateEventRequest buildBodyParams() {
            ScheduleEventsCreateEventRequest scheduleEventsCreateEventRequest = new ScheduleEventsCreateEventRequest();
            scheduleEventsCreateEventRequest.title(this.title);
            scheduleEventsCreateEventRequest.description(this.description);
            scheduleEventsCreateEventRequest.locationIds(this.locationIds);
            scheduleEventsCreateEventRequest.startDate(this.startDate);
            scheduleEventsCreateEventRequest.startTime(this.startTime);
            scheduleEventsCreateEventRequest.endDate(this.endDate);
            scheduleEventsCreateEventRequest.endTime(this.endTime);
            scheduleEventsCreateEventRequest.color(this.color);
            scheduleEventsCreateEventRequest.isMultiDay(this.isMultiDay);
            scheduleEventsCreateEventRequest.recurrence(this.recurrence);
            return scheduleEventsCreateEventRequest;
        }

        /**
         * Execute createEvent request
         * @return ScheduleEventsCreateEventResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ScheduleEventsCreateEventResponse execute() throws ApiException {
            ScheduleEventsCreateEventRequest scheduleEventsCreateEventRequest = buildBodyParams();
            ApiResponse<ScheduleEventsCreateEventResponse> localVarResp = createEventWithHttpInfo(companyId, scheduleEventsCreateEventRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createEvent request with HTTP info returned
         * @return ApiResponse&lt;ScheduleEventsCreateEventResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScheduleEventsCreateEventResponse> executeWithHttpInfo() throws ApiException {
            ScheduleEventsCreateEventRequest scheduleEventsCreateEventRequest = buildBodyParams();
            return createEventWithHttpInfo(companyId, scheduleEventsCreateEventRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute createEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScheduleEventsCreateEventResponse> _callback) throws ApiException {
            ScheduleEventsCreateEventRequest scheduleEventsCreateEventRequest = buildBodyParams();
            return createEventAsync(companyId, scheduleEventsCreateEventRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Create Event
     * 
     * @param companyId Company ID (required)
     * @param scheduleEventsCreateEventRequest  (required)
     * @return CreateEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateEventRequestBuilder createEvent(String title, List<Integer> locationIds, String startDate, String startTime, String endDate, String endTime, Boolean isMultiDay, Long companyId) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        if (locationIds == null) throw new IllegalArgumentException("\"locationIds\" is required but got null");
        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
            

        if (startTime == null) throw new IllegalArgumentException("\"startTime\" is required but got null");
            

        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
            

        if (endTime == null) throw new IllegalArgumentException("\"endTime\" is required but got null");
            

        if (isMultiDay == null) throw new IllegalArgumentException("\"isMultiDay\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new CreateEventRequestBuilder(title, locationIds, startDate, startTime, endDate, endTime, isMultiDay, companyId);
    }
    private okhttp3.Call deleteEventCall(Long companyId, Long eventId, String xApiVersion, UUID xCompanyGuid, String recurrenceTarget, String startDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/events/{event_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "event_id" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recurrenceTarget != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recurrence_target", recurrenceTarget));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEventValidateBeforeCall(Long companyId, Long eventId, String xApiVersion, UUID xCompanyGuid, String recurrenceTarget, String startDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling deleteEvent(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling deleteEvent(Async)");
        }

        return deleteEventCall(companyId, eventId, xApiVersion, xCompanyGuid, recurrenceTarget, startDate, _callback);

    }


    private ApiResponse<ScheduleEventsDeleteEventResponse> deleteEventWithHttpInfo(Long companyId, Long eventId, String xApiVersion, UUID xCompanyGuid, String recurrenceTarget, String startDate) throws ApiException {
        okhttp3.Call localVarCall = deleteEventValidateBeforeCall(companyId, eventId, xApiVersion, xCompanyGuid, recurrenceTarget, startDate, null);
        Type localVarReturnType = new TypeToken<ScheduleEventsDeleteEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteEventAsync(Long companyId, Long eventId, String xApiVersion, UUID xCompanyGuid, String recurrenceTarget, String startDate, final ApiCallback<ScheduleEventsDeleteEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEventValidateBeforeCall(companyId, eventId, xApiVersion, xCompanyGuid, recurrenceTarget, startDate, _callback);
        Type localVarReturnType = new TypeToken<ScheduleEventsDeleteEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteEventRequestBuilder {
        private final Long companyId;
        private final Long eventId;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private String recurrenceTarget;
        private String startDate;

        private DeleteEventRequestBuilder(Long companyId, Long eventId) {
            this.companyId = companyId;
            this.eventId = eventId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return DeleteEventRequestBuilder
         */
        public DeleteEventRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return DeleteEventRequestBuilder
         */
        public DeleteEventRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set recurrenceTarget
         * @param recurrenceTarget Recurrence Target (optional)
         * @return DeleteEventRequestBuilder
         */
        public DeleteEventRequestBuilder recurrenceTarget(String recurrenceTarget) {
            this.recurrenceTarget = recurrenceTarget;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Start of the targeted range for recurrence. Format YYYY-MM-DD HH:MM:SS (optional)
         * @return DeleteEventRequestBuilder
         */
        public DeleteEventRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Build call for deleteEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteEventCall(companyId, eventId, xApiVersion, xCompanyGuid, recurrenceTarget, startDate, _callback);
        }


        /**
         * Execute deleteEvent request
         * @return ScheduleEventsDeleteEventResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ScheduleEventsDeleteEventResponse execute() throws ApiException {
            ApiResponse<ScheduleEventsDeleteEventResponse> localVarResp = deleteEventWithHttpInfo(companyId, eventId, xApiVersion, xCompanyGuid, recurrenceTarget, startDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteEvent request with HTTP info returned
         * @return ApiResponse&lt;ScheduleEventsDeleteEventResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScheduleEventsDeleteEventResponse> executeWithHttpInfo() throws ApiException {
            return deleteEventWithHttpInfo(companyId, eventId, xApiVersion, xCompanyGuid, recurrenceTarget, startDate);
        }

        /**
         * Execute deleteEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScheduleEventsDeleteEventResponse> _callback) throws ApiException {
            return deleteEventAsync(companyId, eventId, xApiVersion, xCompanyGuid, recurrenceTarget, startDate, _callback);
        }
    }

    /**
     * Delete Event
     * 
     * @param companyId Company ID (required)
     * @param eventId Event ID (required)
     * @return DeleteEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DeleteEventRequestBuilder deleteEvent(Long companyId, Long eventId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (eventId == null) throw new IllegalArgumentException("\"eventId\" is required but got null");
        return new DeleteEventRequestBuilder(companyId, eventId);
    }
    private okhttp3.Call getEventByIdCall(Long companyId, Long eventId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/events/{event_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "event_id" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventByIdValidateBeforeCall(Long companyId, Long eventId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getEventById(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling getEventById(Async)");
        }

        return getEventByIdCall(companyId, eventId, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<ScheduleEventsGetEventByIdResponse> getEventByIdWithHttpInfo(Long companyId, Long eventId, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = getEventByIdValidateBeforeCall(companyId, eventId, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<ScheduleEventsGetEventByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEventByIdAsync(Long companyId, Long eventId, String xApiVersion, UUID xCompanyGuid, final ApiCallback<ScheduleEventsGetEventByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventByIdValidateBeforeCall(companyId, eventId, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<ScheduleEventsGetEventByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEventByIdRequestBuilder {
        private final Long companyId;
        private final Long eventId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private GetEventByIdRequestBuilder(Long companyId, Long eventId) {
            this.companyId = companyId;
            this.eventId = eventId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetEventByIdRequestBuilder
         */
        public GetEventByIdRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetEventByIdRequestBuilder
         */
        public GetEventByIdRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for getEventById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEventByIdCall(companyId, eventId, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute getEventById request
         * @return ScheduleEventsGetEventByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ScheduleEventsGetEventByIdResponse execute() throws ApiException {
            ApiResponse<ScheduleEventsGetEventByIdResponse> localVarResp = getEventByIdWithHttpInfo(companyId, eventId, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEventById request with HTTP info returned
         * @return ApiResponse&lt;ScheduleEventsGetEventByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScheduleEventsGetEventByIdResponse> executeWithHttpInfo() throws ApiException {
            return getEventByIdWithHttpInfo(companyId, eventId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute getEventById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScheduleEventsGetEventByIdResponse> _callback) throws ApiException {
            return getEventByIdAsync(companyId, eventId, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Retrieve Event
     * 
     * @param companyId Company ID (required)
     * @param eventId Event ID (required)
     * @return GetEventByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetEventByIdRequestBuilder getEventById(Long companyId, Long eventId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (eventId == null) throw new IllegalArgumentException("\"eventId\" is required but got null");
        return new GetEventByIdRequestBuilder(companyId, eventId);
    }
    private okhttp3.Call listEventsCall(Long companyId, LocalDate startDate, LocalDate endDate, String xApiVersion, UUID xCompanyGuid, Long locationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/events"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEventsValidateBeforeCall(Long companyId, LocalDate startDate, LocalDate endDate, String xApiVersion, UUID xCompanyGuid, Long locationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling listEvents(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling listEvents(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling listEvents(Async)");
        }

        return listEventsCall(companyId, startDate, endDate, xApiVersion, xCompanyGuid, locationId, _callback);

    }


    private ApiResponse<ScheduleEventsListEventsResponse> listEventsWithHttpInfo(Long companyId, LocalDate startDate, LocalDate endDate, String xApiVersion, UUID xCompanyGuid, Long locationId) throws ApiException {
        okhttp3.Call localVarCall = listEventsValidateBeforeCall(companyId, startDate, endDate, xApiVersion, xCompanyGuid, locationId, null);
        Type localVarReturnType = new TypeToken<ScheduleEventsListEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEventsAsync(Long companyId, LocalDate startDate, LocalDate endDate, String xApiVersion, UUID xCompanyGuid, Long locationId, final ApiCallback<ScheduleEventsListEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEventsValidateBeforeCall(companyId, startDate, endDate, xApiVersion, xCompanyGuid, locationId, _callback);
        Type localVarReturnType = new TypeToken<ScheduleEventsListEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEventsRequestBuilder {
        private final Long companyId;
        private final LocalDate startDate;
        private final LocalDate endDate;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private Long locationId;

        private ListEventsRequestBuilder(Long companyId, LocalDate startDate, LocalDate endDate) {
            this.companyId = companyId;
            this.startDate = startDate;
            this.endDate = endDate;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return ListEventsRequestBuilder
         */
        public ListEventsRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return ListEventsRequestBuilder
         */
        public ListEventsRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set locationId
         * @param locationId Location ID (optional)
         * @return ListEventsRequestBuilder
         */
        public ListEventsRequestBuilder locationId(Long locationId) {
            this.locationId = locationId;
            return this;
        }
        
        /**
         * Build call for listEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEventsCall(companyId, startDate, endDate, xApiVersion, xCompanyGuid, locationId, _callback);
        }


        /**
         * Execute listEvents request
         * @return ScheduleEventsListEventsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ScheduleEventsListEventsResponse execute() throws ApiException {
            ApiResponse<ScheduleEventsListEventsResponse> localVarResp = listEventsWithHttpInfo(companyId, startDate, endDate, xApiVersion, xCompanyGuid, locationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEvents request with HTTP info returned
         * @return ApiResponse&lt;ScheduleEventsListEventsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScheduleEventsListEventsResponse> executeWithHttpInfo() throws ApiException {
            return listEventsWithHttpInfo(companyId, startDate, endDate, xApiVersion, xCompanyGuid, locationId);
        }

        /**
         * Execute listEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScheduleEventsListEventsResponse> _callback) throws ApiException {
            return listEventsAsync(companyId, startDate, endDate, xApiVersion, xCompanyGuid, locationId, _callback);
        }
    }

    /**
     * List Events
     * 
     * @param companyId Company ID (required)
     * @param startDate A date string to request only events within a range.  Format YYYY-MM-DD (required)
     * @param endDate A date string to request only events within a range.  Format YYYY-MM-DD (required)
     * @return ListEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListEventsRequestBuilder listEvents(Long companyId, LocalDate startDate, LocalDate endDate) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
        return new ListEventsRequestBuilder(companyId, startDate, endDate);
    }
    private okhttp3.Call updateEventByIdCall(Long companyId, Long eventId, ScheduleEventsUpdateEventByIdRequest scheduleEventsUpdateEventByIdRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scheduleEventsUpdateEventByIdRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/events/{event_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "event_id" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEventByIdValidateBeforeCall(Long companyId, Long eventId, ScheduleEventsUpdateEventByIdRequest scheduleEventsUpdateEventByIdRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updateEventById(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling updateEventById(Async)");
        }

        // verify the required parameter 'scheduleEventsUpdateEventByIdRequest' is set
        if (scheduleEventsUpdateEventByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'scheduleEventsUpdateEventByIdRequest' when calling updateEventById(Async)");
        }

        return updateEventByIdCall(companyId, eventId, scheduleEventsUpdateEventByIdRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<ScheduleEventsUpdateEventByIdResponse> updateEventByIdWithHttpInfo(Long companyId, Long eventId, ScheduleEventsUpdateEventByIdRequest scheduleEventsUpdateEventByIdRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = updateEventByIdValidateBeforeCall(companyId, eventId, scheduleEventsUpdateEventByIdRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<ScheduleEventsUpdateEventByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateEventByIdAsync(Long companyId, Long eventId, ScheduleEventsUpdateEventByIdRequest scheduleEventsUpdateEventByIdRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<ScheduleEventsUpdateEventByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEventByIdValidateBeforeCall(companyId, eventId, scheduleEventsUpdateEventByIdRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<ScheduleEventsUpdateEventByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateEventByIdRequestBuilder {
        private final Long companyId;
        private final Long eventId;
        private String title;
        private String description;
        private List<Integer> locationIds;
        private String startDate;
        private String startTime;
        private String endDate;
        private String endTime;
        private String color;
        private Boolean isMultiDay;
        private String recurrence;
        private String recurrenceTarget;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private UpdateEventByIdRequestBuilder(Long companyId, Long eventId) {
            this.companyId = companyId;
            this.eventId = eventId;
        }

        /**
         * Set title
         * @param title The name of the event (optional)
         * @return UpdateEventByIdRequestBuilder
         */
        public UpdateEventByIdRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set description
         * @param description Description for event (optional)
         * @return UpdateEventByIdRequestBuilder
         */
        public UpdateEventByIdRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set locationIds
         * @param locationIds The list of locations where this event occurs (optional)
         * @return UpdateEventByIdRequestBuilder
         */
        public UpdateEventByIdRequestBuilder locationIds(List<Integer> locationIds) {
            this.locationIds = locationIds;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Start date (optional)
         * @return UpdateEventByIdRequestBuilder
         */
        public UpdateEventByIdRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set startTime
         * @param startTime Start time (optional)
         * @return UpdateEventByIdRequestBuilder
         */
        public UpdateEventByIdRequestBuilder startTime(String startTime) {
            this.startTime = startTime;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate End date for multi-day events (optional)
         * @return UpdateEventByIdRequestBuilder
         */
        public UpdateEventByIdRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set endTime
         * @param endTime End time (optional)
         * @return UpdateEventByIdRequestBuilder
         */
        public UpdateEventByIdRequestBuilder endTime(String endTime) {
            this.endTime = endTime;
            return this;
        }
        
        /**
         * Set color
         * @param color A hex number representing the color (optional)
         * @return UpdateEventByIdRequestBuilder
         */
        public UpdateEventByIdRequestBuilder color(String color) {
            this.color = color;
            return this;
        }
        
        /**
         * Set isMultiDay
         * @param isMultiDay If true, the event is a multi-day event (optional)
         * @return UpdateEventByIdRequestBuilder
         */
        public UpdateEventByIdRequestBuilder isMultiDay(Boolean isMultiDay) {
            this.isMultiDay = isMultiDay;
            return this;
        }
        
        /**
         * Set recurrence
         * @param recurrence Recurrence rules as defined by the RFC 5545 spec (optional)
         * @return UpdateEventByIdRequestBuilder
         */
        public UpdateEventByIdRequestBuilder recurrence(String recurrence) {
            this.recurrence = recurrence;
            return this;
        }
        
        /**
         * Set recurrenceTarget
         * @param recurrenceTarget describes which recurring events will be updated (optional)
         * @return UpdateEventByIdRequestBuilder
         */
        public UpdateEventByIdRequestBuilder recurrenceTarget(String recurrenceTarget) {
            this.recurrenceTarget = recurrenceTarget;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return UpdateEventByIdRequestBuilder
         */
        public UpdateEventByIdRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return UpdateEventByIdRequestBuilder
         */
        public UpdateEventByIdRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for updateEventById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ScheduleEventsUpdateEventByIdRequest scheduleEventsUpdateEventByIdRequest = buildBodyParams();
            return updateEventByIdCall(companyId, eventId, scheduleEventsUpdateEventByIdRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private ScheduleEventsUpdateEventByIdRequest buildBodyParams() {
            ScheduleEventsUpdateEventByIdRequest scheduleEventsUpdateEventByIdRequest = new ScheduleEventsUpdateEventByIdRequest();
            return scheduleEventsUpdateEventByIdRequest;
        }

        /**
         * Execute updateEventById request
         * @return ScheduleEventsUpdateEventByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ScheduleEventsUpdateEventByIdResponse execute() throws ApiException {
            ScheduleEventsUpdateEventByIdRequest scheduleEventsUpdateEventByIdRequest = buildBodyParams();
            ApiResponse<ScheduleEventsUpdateEventByIdResponse> localVarResp = updateEventByIdWithHttpInfo(companyId, eventId, scheduleEventsUpdateEventByIdRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateEventById request with HTTP info returned
         * @return ApiResponse&lt;ScheduleEventsUpdateEventByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScheduleEventsUpdateEventByIdResponse> executeWithHttpInfo() throws ApiException {
            ScheduleEventsUpdateEventByIdRequest scheduleEventsUpdateEventByIdRequest = buildBodyParams();
            return updateEventByIdWithHttpInfo(companyId, eventId, scheduleEventsUpdateEventByIdRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute updateEventById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScheduleEventsUpdateEventByIdResponse> _callback) throws ApiException {
            ScheduleEventsUpdateEventByIdRequest scheduleEventsUpdateEventByIdRequest = buildBodyParams();
            return updateEventByIdAsync(companyId, eventId, scheduleEventsUpdateEventByIdRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Update Event
     * 
     * @param companyId Company ID (required)
     * @param eventId Event ID (required)
     * @param scheduleEventsUpdateEventByIdRequest  (required)
     * @return UpdateEventByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEventByIdRequestBuilder updateEventById(Long companyId, Long eventId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (eventId == null) throw new IllegalArgumentException("\"eventId\" is required but got null");
        return new UpdateEventByIdRequestBuilder(companyId, eventId);
    }
}
