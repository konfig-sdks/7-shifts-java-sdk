/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.ReportsGetDailySalesAndLaborResponse;
import com.konfigthis.client.model.ReportsGetDailyStatsResponse;
import com.konfigthis.client.model.ReportsGetWorkedHoursWagesResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ReportsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ReportsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getDailySalesAndLaborCall(String startDate, String endDate, Long locationId, String xApiVersion, UUID xCompanyGuid, Long departmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/reports/daily_sales_and_labor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (departmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("department_id", departmentId));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDailySalesAndLaborValidateBeforeCall(String startDate, String endDate, Long locationId, String xApiVersion, UUID xCompanyGuid, Long departmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getDailySalesAndLabor(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getDailySalesAndLabor(Async)");
        }

        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling getDailySalesAndLabor(Async)");
        }

        return getDailySalesAndLaborCall(startDate, endDate, locationId, xApiVersion, xCompanyGuid, departmentId, _callback);

    }


    private ApiResponse<ReportsGetDailySalesAndLaborResponse> getDailySalesAndLaborWithHttpInfo(String startDate, String endDate, Long locationId, String xApiVersion, UUID xCompanyGuid, Long departmentId) throws ApiException {
        okhttp3.Call localVarCall = getDailySalesAndLaborValidateBeforeCall(startDate, endDate, locationId, xApiVersion, xCompanyGuid, departmentId, null);
        Type localVarReturnType = new TypeToken<ReportsGetDailySalesAndLaborResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDailySalesAndLaborAsync(String startDate, String endDate, Long locationId, String xApiVersion, UUID xCompanyGuid, Long departmentId, final ApiCallback<ReportsGetDailySalesAndLaborResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDailySalesAndLaborValidateBeforeCall(startDate, endDate, locationId, xApiVersion, xCompanyGuid, departmentId, _callback);
        Type localVarReturnType = new TypeToken<ReportsGetDailySalesAndLaborResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDailySalesAndLaborRequestBuilder {
        private final String startDate;
        private final String endDate;
        private final Long locationId;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private Long departmentId;

        private GetDailySalesAndLaborRequestBuilder(String startDate, String endDate, Long locationId) {
            this.startDate = startDate;
            this.endDate = endDate;
            this.locationId = locationId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetDailySalesAndLaborRequestBuilder
         */
        public GetDailySalesAndLaborRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetDailySalesAndLaborRequestBuilder
         */
        public GetDailySalesAndLaborRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set departmentId
         * @param departmentId Department ID (optional)
         * @return GetDailySalesAndLaborRequestBuilder
         */
        public GetDailySalesAndLaborRequestBuilder departmentId(Long departmentId) {
            this.departmentId = departmentId;
            return this;
        }
        
        /**
         * Build call for getDailySalesAndLabor
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDailySalesAndLaborCall(startDate, endDate, locationId, xApiVersion, xCompanyGuid, departmentId, _callback);
        }


        /**
         * Execute getDailySalesAndLabor request
         * @return ReportsGetDailySalesAndLaborResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ReportsGetDailySalesAndLaborResponse execute() throws ApiException {
            ApiResponse<ReportsGetDailySalesAndLaborResponse> localVarResp = getDailySalesAndLaborWithHttpInfo(startDate, endDate, locationId, xApiVersion, xCompanyGuid, departmentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDailySalesAndLabor request with HTTP info returned
         * @return ApiResponse&lt;ReportsGetDailySalesAndLaborResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsGetDailySalesAndLaborResponse> executeWithHttpInfo() throws ApiException {
            return getDailySalesAndLaborWithHttpInfo(startDate, endDate, locationId, xApiVersion, xCompanyGuid, departmentId);
        }

        /**
         * Execute getDailySalesAndLabor request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsGetDailySalesAndLaborResponse> _callback) throws ApiException {
            return getDailySalesAndLaborAsync(startDate, endDate, locationId, xApiVersion, xCompanyGuid, departmentId, _callback);
        }
    }

    /**
     * Retrieve Daily Sales &amp; Labor
     * 
     * @param startDate Starting date for which you want the daily sales and labor data for. (required)
     * @param endDate Ending date for which you want the daily sales and labor data for. (required)
     * @param locationId Location ID (required)
     * @return GetDailySalesAndLaborRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetDailySalesAndLaborRequestBuilder getDailySalesAndLabor(String startDate, String endDate, Long locationId) throws IllegalArgumentException {
        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
            

        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
            

        if (locationId == null) throw new IllegalArgumentException("\"locationId\" is required but got null");
        return new GetDailySalesAndLaborRequestBuilder(startDate, endDate, locationId);
    }
    private okhttp3.Call getDailyStatsCall(Long companyId, Long locationId, LocalDate date, String xApiVersion, UUID xCompanyGuid, Long departmentId, Boolean includeFuture, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/company/{company_id}/location/{location_id}/daily_stats"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "location_id" + "}", localVarApiClient.escapeString(locationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (departmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("department_id", departmentId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (includeFuture != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_future", includeFuture));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDailyStatsValidateBeforeCall(Long companyId, Long locationId, LocalDate date, String xApiVersion, UUID xCompanyGuid, Long departmentId, Boolean includeFuture, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getDailyStats(Async)");
        }

        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling getDailyStats(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling getDailyStats(Async)");
        }

        return getDailyStatsCall(companyId, locationId, date, xApiVersion, xCompanyGuid, departmentId, includeFuture, _callback);

    }


    private ApiResponse<ReportsGetDailyStatsResponse> getDailyStatsWithHttpInfo(Long companyId, Long locationId, LocalDate date, String xApiVersion, UUID xCompanyGuid, Long departmentId, Boolean includeFuture) throws ApiException {
        okhttp3.Call localVarCall = getDailyStatsValidateBeforeCall(companyId, locationId, date, xApiVersion, xCompanyGuid, departmentId, includeFuture, null);
        Type localVarReturnType = new TypeToken<ReportsGetDailyStatsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDailyStatsAsync(Long companyId, Long locationId, LocalDate date, String xApiVersion, UUID xCompanyGuid, Long departmentId, Boolean includeFuture, final ApiCallback<ReportsGetDailyStatsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDailyStatsValidateBeforeCall(companyId, locationId, date, xApiVersion, xCompanyGuid, departmentId, includeFuture, _callback);
        Type localVarReturnType = new TypeToken<ReportsGetDailyStatsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDailyStatsRequestBuilder {
        private final Long companyId;
        private final Long locationId;
        private final LocalDate date;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private Long departmentId;
        private Boolean includeFuture;

        private GetDailyStatsRequestBuilder(Long companyId, Long locationId, LocalDate date) {
            this.companyId = companyId;
            this.locationId = locationId;
            this.date = date;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetDailyStatsRequestBuilder
         */
        public GetDailyStatsRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetDailyStatsRequestBuilder
         */
        public GetDailyStatsRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set departmentId
         * @param departmentId Department ID (optional)
         * @return GetDailyStatsRequestBuilder
         */
        public GetDailyStatsRequestBuilder departmentId(Long departmentId) {
            this.departmentId = departmentId;
            return this;
        }
        
        /**
         * Set includeFuture
         * @param includeFuture include future (optional)
         * @return GetDailyStatsRequestBuilder
         */
        public GetDailyStatsRequestBuilder includeFuture(Boolean includeFuture) {
            this.includeFuture = includeFuture;
            return this;
        }
        
        /**
         * Build call for getDailyStats
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDailyStatsCall(companyId, locationId, date, xApiVersion, xCompanyGuid, departmentId, includeFuture, _callback);
        }


        /**
         * Execute getDailyStats request
         * @return ReportsGetDailyStatsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ReportsGetDailyStatsResponse execute() throws ApiException {
            ApiResponse<ReportsGetDailyStatsResponse> localVarResp = getDailyStatsWithHttpInfo(companyId, locationId, date, xApiVersion, xCompanyGuid, departmentId, includeFuture);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDailyStats request with HTTP info returned
         * @return ApiResponse&lt;ReportsGetDailyStatsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsGetDailyStatsResponse> executeWithHttpInfo() throws ApiException {
            return getDailyStatsWithHttpInfo(companyId, locationId, date, xApiVersion, xCompanyGuid, departmentId, includeFuture);
        }

        /**
         * Execute getDailyStats request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsGetDailyStatsResponse> _callback) throws ApiException {
            return getDailyStatsAsync(companyId, locationId, date, xApiVersion, xCompanyGuid, departmentId, includeFuture, _callback);
        }
    }

    /**
     * Retrieve Daily Stats
     * 
     * @param companyId Company ID (required)
     * @param locationId Location ID (required)
     * @param date Date (required)
     * @return GetDailyStatsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetDailyStatsRequestBuilder getDailyStats(Long companyId, Long locationId, LocalDate date) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (locationId == null) throw new IllegalArgumentException("\"locationId\" is required but got null");
        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
        return new GetDailyStatsRequestBuilder(companyId, locationId, date);
    }
    private okhttp3.Call getWorkedHoursWagesCall(Boolean punches, Long companyId, String from, String to, String xApiVersion, UUID xCompanyGuid, Long locationId, Long departmentId, Long roleId, Long userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/reports/hours_and_wages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (punches != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("punches", punches));
        }

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("company_id", companyId));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (departmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("department_id", departmentId));
        }

        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id", roleId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkedHoursWagesValidateBeforeCall(Boolean punches, Long companyId, String from, String to, String xApiVersion, UUID xCompanyGuid, Long locationId, Long departmentId, Long roleId, Long userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'punches' is set
        if (punches == null) {
            throw new ApiException("Missing the required parameter 'punches' when calling getWorkedHoursWages(Async)");
        }

        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getWorkedHoursWages(Async)");
        }

        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling getWorkedHoursWages(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling getWorkedHoursWages(Async)");
        }

        return getWorkedHoursWagesCall(punches, companyId, from, to, xApiVersion, xCompanyGuid, locationId, departmentId, roleId, userId, _callback);

    }


    private ApiResponse<ReportsGetWorkedHoursWagesResponse> getWorkedHoursWagesWithHttpInfo(Boolean punches, Long companyId, String from, String to, String xApiVersion, UUID xCompanyGuid, Long locationId, Long departmentId, Long roleId, Long userId) throws ApiException {
        okhttp3.Call localVarCall = getWorkedHoursWagesValidateBeforeCall(punches, companyId, from, to, xApiVersion, xCompanyGuid, locationId, departmentId, roleId, userId, null);
        Type localVarReturnType = new TypeToken<ReportsGetWorkedHoursWagesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkedHoursWagesAsync(Boolean punches, Long companyId, String from, String to, String xApiVersion, UUID xCompanyGuid, Long locationId, Long departmentId, Long roleId, Long userId, final ApiCallback<ReportsGetWorkedHoursWagesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkedHoursWagesValidateBeforeCall(punches, companyId, from, to, xApiVersion, xCompanyGuid, locationId, departmentId, roleId, userId, _callback);
        Type localVarReturnType = new TypeToken<ReportsGetWorkedHoursWagesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkedHoursWagesRequestBuilder {
        private final Boolean punches;
        private final Long companyId;
        private final String from;
        private final String to;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private Long locationId;
        private Long departmentId;
        private Long roleId;
        private Long userId;

        private GetWorkedHoursWagesRequestBuilder(Boolean punches, Long companyId, String from, String to) {
            this.punches = punches;
            this.companyId = companyId;
            this.from = from;
            this.to = to;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetWorkedHoursWagesRequestBuilder
         */
        public GetWorkedHoursWagesRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetWorkedHoursWagesRequestBuilder
         */
        public GetWorkedHoursWagesRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set locationId
         * @param locationId The location id for which you want the report for. (optional)
         * @return GetWorkedHoursWagesRequestBuilder
         */
        public GetWorkedHoursWagesRequestBuilder locationId(Long locationId) {
            this.locationId = locationId;
            return this;
        }
        
        /**
         * Set departmentId
         * @param departmentId The department id for the report. (optional)
         * @return GetWorkedHoursWagesRequestBuilder
         */
        public GetWorkedHoursWagesRequestBuilder departmentId(Long departmentId) {
            this.departmentId = departmentId;
            return this;
        }
        
        /**
         * Set roleId
         * @param roleId The role id for the report (optional)
         * @return GetWorkedHoursWagesRequestBuilder
         */
        public GetWorkedHoursWagesRequestBuilder roleId(Long roleId) {
            this.roleId = roleId;
            return this;
        }
        
        /**
         * Set userId
         * @param userId The user id the report should be fetched for - internal use only (optional)
         * @return GetWorkedHoursWagesRequestBuilder
         */
        public GetWorkedHoursWagesRequestBuilder userId(Long userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Build call for getWorkedHoursWages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkedHoursWagesCall(punches, companyId, from, to, xApiVersion, xCompanyGuid, locationId, departmentId, roleId, userId, _callback);
        }


        /**
         * Execute getWorkedHoursWages request
         * @return ReportsGetWorkedHoursWagesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ReportsGetWorkedHoursWagesResponse execute() throws ApiException {
            ApiResponse<ReportsGetWorkedHoursWagesResponse> localVarResp = getWorkedHoursWagesWithHttpInfo(punches, companyId, from, to, xApiVersion, xCompanyGuid, locationId, departmentId, roleId, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkedHoursWages request with HTTP info returned
         * @return ApiResponse&lt;ReportsGetWorkedHoursWagesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportsGetWorkedHoursWagesResponse> executeWithHttpInfo() throws ApiException {
            return getWorkedHoursWagesWithHttpInfo(punches, companyId, from, to, xApiVersion, xCompanyGuid, locationId, departmentId, roleId, userId);
        }

        /**
         * Execute getWorkedHoursWages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportsGetWorkedHoursWagesResponse> _callback) throws ApiException {
            return getWorkedHoursWagesAsync(punches, companyId, from, to, xApiVersion, xCompanyGuid, locationId, departmentId, roleId, userId, _callback);
        }
    }

    /**
     * Retrieve Worked Hours &amp; Wages
     * 
     * @param punches Whether or not to use the punch labour source (required)
     * @param companyId The company id to pull the report for. (required)
     * @param from Starting date for which you want the report to start. (required)
     * @param to Ending date for which you want the report to end. (required)
     * @return GetWorkedHoursWagesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkedHoursWagesRequestBuilder getWorkedHoursWages(Boolean punches, Long companyId, String from, String to) throws IllegalArgumentException {
        if (punches == null) throw new IllegalArgumentException("\"punches\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (from == null) throw new IllegalArgumentException("\"from\" is required but got null");
            

        if (to == null) throw new IllegalArgumentException("\"to\" is required but got null");
            

        return new GetWorkedHoursWagesRequestBuilder(punches, companyId, from, to);
    }
}
