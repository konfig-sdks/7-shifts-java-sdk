/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EngageOverviewByLocationIdResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EngageApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EngageApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EngageApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call overviewByLocationIdCall(Long companyId, Long locationId, String date, String xApiVersion, UUID xCompanyGuid, String frequency, String userType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/locations/{location_id}/engage_overview"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "location_id" + "}", localVarApiClient.escapeString(locationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (frequency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("frequency", frequency));
        }

        if (userType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_type", userType));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call overviewByLocationIdValidateBeforeCall(Long companyId, Long locationId, String date, String xApiVersion, UUID xCompanyGuid, String frequency, String userType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling overviewByLocationId(Async)");
        }

        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling overviewByLocationId(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling overviewByLocationId(Async)");
        }

        return overviewByLocationIdCall(companyId, locationId, date, xApiVersion, xCompanyGuid, frequency, userType, _callback);

    }


    private ApiResponse<EngageOverviewByLocationIdResponse> overviewByLocationIdWithHttpInfo(Long companyId, Long locationId, String date, String xApiVersion, UUID xCompanyGuid, String frequency, String userType) throws ApiException {
        okhttp3.Call localVarCall = overviewByLocationIdValidateBeforeCall(companyId, locationId, date, xApiVersion, xCompanyGuid, frequency, userType, null);
        Type localVarReturnType = new TypeToken<EngageOverviewByLocationIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call overviewByLocationIdAsync(Long companyId, Long locationId, String date, String xApiVersion, UUID xCompanyGuid, String frequency, String userType, final ApiCallback<EngageOverviewByLocationIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = overviewByLocationIdValidateBeforeCall(companyId, locationId, date, xApiVersion, xCompanyGuid, frequency, userType, _callback);
        Type localVarReturnType = new TypeToken<EngageOverviewByLocationIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class OverviewByLocationIdRequestBuilder {
        private final Long companyId;
        private final Long locationId;
        private final String date;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private String frequency;
        private String userType;

        private OverviewByLocationIdRequestBuilder(Long companyId, Long locationId, String date) {
            this.companyId = companyId;
            this.locationId = locationId;
            this.date = date;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return OverviewByLocationIdRequestBuilder
         */
        public OverviewByLocationIdRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return OverviewByLocationIdRequestBuilder
         */
        public OverviewByLocationIdRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set frequency
         * @param frequency Length of the engage data set (optional)
         * @return OverviewByLocationIdRequestBuilder
         */
        public OverviewByLocationIdRequestBuilder frequency(String frequency) {
            this.frequency = frequency;
            return this;
        }
        
        /**
         * Set userType
         * @param userType select user type for engage data (optional)
         * @return OverviewByLocationIdRequestBuilder
         */
        public OverviewByLocationIdRequestBuilder userType(String userType) {
            this.userType = userType;
            return this;
        }
        
        /**
         * Build call for overviewByLocationId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return overviewByLocationIdCall(companyId, locationId, date, xApiVersion, xCompanyGuid, frequency, userType, _callback);
        }


        /**
         * Execute overviewByLocationId request
         * @return EngageOverviewByLocationIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public EngageOverviewByLocationIdResponse execute() throws ApiException {
            ApiResponse<EngageOverviewByLocationIdResponse> localVarResp = overviewByLocationIdWithHttpInfo(companyId, locationId, date, xApiVersion, xCompanyGuid, frequency, userType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute overviewByLocationId request with HTTP info returned
         * @return ApiResponse&lt;EngageOverviewByLocationIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EngageOverviewByLocationIdResponse> executeWithHttpInfo() throws ApiException {
            return overviewByLocationIdWithHttpInfo(companyId, locationId, date, xApiVersion, xCompanyGuid, frequency, userType);
        }

        /**
         * Execute overviewByLocationId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EngageOverviewByLocationIdResponse> _callback) throws ApiException {
            return overviewByLocationIdAsync(companyId, locationId, date, xApiVersion, xCompanyGuid, frequency, userType, _callback);
        }
    }

    /**
     * Retrieve Engagement Overview
     * 
     * @param companyId Company ID (required)
     * @param locationId Location ID (required)
     * @param date A date with YYYY-MM-DD format (required)
     * @return OverviewByLocationIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public OverviewByLocationIdRequestBuilder overviewByLocationId(Long companyId, Long locationId, String date) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (locationId == null) throw new IllegalArgumentException("\"locationId\" is required but got null");
        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
            

        return new OverviewByLocationIdRequestBuilder(companyId, locationId, date);
    }
}
