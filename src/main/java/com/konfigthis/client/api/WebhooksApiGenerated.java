/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.util.UUID;
import com.konfigthis.client.model.WebhooksCreateRequest;
import com.konfigthis.client.model.WebhooksCreateResponse;
import com.konfigthis.client.model.WebhooksListResponse;
import com.konfigthis.client.model.WebhooksUpdateRequest;
import com.konfigthis.client.model.WebhooksUpdateResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WebhooksApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebhooksApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WebhooksApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCall(Long companyId, WebhooksCreateRequest webhooksCreateRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhooksCreateRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/webhooks"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(Long companyId, WebhooksCreateRequest webhooksCreateRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling create(Async)");
        }

        // verify the required parameter 'webhooksCreateRequest' is set
        if (webhooksCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'webhooksCreateRequest' when calling create(Async)");
        }

        return createCall(companyId, webhooksCreateRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<WebhooksCreateResponse> createWithHttpInfo(Long companyId, WebhooksCreateRequest webhooksCreateRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(companyId, webhooksCreateRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<WebhooksCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAsync(Long companyId, WebhooksCreateRequest webhooksCreateRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<WebhooksCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(companyId, webhooksCreateRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<WebhooksCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRequestBuilder {
        private final String url;
        private final String method;
        private final String event;
        private final Long companyId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private CreateRequestBuilder(String url, String method, String event, Long companyId) {
            this.url = url;
            this.method = method;
            this.event = event;
            this.companyId = companyId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for create
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebhooksCreateRequest webhooksCreateRequest = buildBodyParams();
            return createCall(companyId, webhooksCreateRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private WebhooksCreateRequest buildBodyParams() {
            WebhooksCreateRequest webhooksCreateRequest = new WebhooksCreateRequest();
            webhooksCreateRequest.url(this.url);
            if (this.method != null)
            webhooksCreateRequest.method(WebhooksCreateRequest.MethodEnum.fromValue(this.method));
            if (this.event != null)
            webhooksCreateRequest.event(WebhooksCreateRequest.EventEnum.fromValue(this.event));
            return webhooksCreateRequest;
        }

        /**
         * Execute create request
         * @return WebhooksCreateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public WebhooksCreateResponse execute() throws ApiException {
            WebhooksCreateRequest webhooksCreateRequest = buildBodyParams();
            ApiResponse<WebhooksCreateResponse> localVarResp = createWithHttpInfo(companyId, webhooksCreateRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute create request with HTTP info returned
         * @return ApiResponse&lt;WebhooksCreateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhooksCreateResponse> executeWithHttpInfo() throws ApiException {
            WebhooksCreateRequest webhooksCreateRequest = buildBodyParams();
            return createWithHttpInfo(companyId, webhooksCreateRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute create request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhooksCreateResponse> _callback) throws ApiException {
            WebhooksCreateRequest webhooksCreateRequest = buildBodyParams();
            return createAsync(companyId, webhooksCreateRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Create Webhook
     * 
     * @param companyId Company ID (required)
     * @param webhooksCreateRequest  (required)
     * @return CreateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestBuilder create(String url, String method, String event, Long companyId) throws IllegalArgumentException {
        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            

        if (method == null) throw new IllegalArgumentException("\"method\" is required but got null");
            

        if (event == null) throw new IllegalArgumentException("\"event\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new CreateRequestBuilder(url, method, event, companyId);
    }
    private okhttp3.Call deleteWebhookByIdCall(Long companyId, Long webhookId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/webhooks/{webhook_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "webhook_id" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWebhookByIdValidateBeforeCall(Long companyId, Long webhookId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling deleteWebhookById(Async)");
        }

        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling deleteWebhookById(Async)");
        }

        return deleteWebhookByIdCall(companyId, webhookId, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<Void> deleteWebhookByIdWithHttpInfo(Long companyId, Long webhookId, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = deleteWebhookByIdValidateBeforeCall(companyId, webhookId, xApiVersion, xCompanyGuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteWebhookByIdAsync(Long companyId, Long webhookId, String xApiVersion, UUID xCompanyGuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWebhookByIdValidateBeforeCall(companyId, webhookId, xApiVersion, xCompanyGuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteWebhookByIdRequestBuilder {
        private final Long companyId;
        private final Long webhookId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private DeleteWebhookByIdRequestBuilder(Long companyId, Long webhookId) {
            this.companyId = companyId;
            this.webhookId = webhookId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return DeleteWebhookByIdRequestBuilder
         */
        public DeleteWebhookByIdRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return DeleteWebhookByIdRequestBuilder
         */
        public DeleteWebhookByIdRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for deleteWebhookById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteWebhookByIdCall(companyId, webhookId, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute deleteWebhookById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteWebhookByIdWithHttpInfo(companyId, webhookId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute deleteWebhookById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteWebhookByIdWithHttpInfo(companyId, webhookId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute deleteWebhookById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteWebhookByIdAsync(companyId, webhookId, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Delete Webhook
     * 
     * @param companyId Company ID (required)
     * @param webhookId Webhook ID (required)
     * @return DeleteWebhookByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteWebhookByIdRequestBuilder deleteWebhookById(Long companyId, Long webhookId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (webhookId == null) throw new IllegalArgumentException("\"webhookId\" is required but got null");
        return new DeleteWebhookByIdRequestBuilder(companyId, webhookId);
    }
    private okhttp3.Call getWebhookCall(Integer companyId, String topic, String xApiVersion, UUID xCompanyGuid, Long webhookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/test_webhook"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (topic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("topic", topic));
        }

        if (webhookId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webhook_id", webhookId));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebhookValidateBeforeCall(Integer companyId, String topic, String xApiVersion, UUID xCompanyGuid, Long webhookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getWebhook(Async)");
        }

        // verify the required parameter 'topic' is set
        if (topic == null) {
            throw new ApiException("Missing the required parameter 'topic' when calling getWebhook(Async)");
        }

        return getWebhookCall(companyId, topic, xApiVersion, xCompanyGuid, webhookId, _callback);

    }


    private ApiResponse<Object> getWebhookWithHttpInfo(Integer companyId, String topic, String xApiVersion, UUID xCompanyGuid, Long webhookId) throws ApiException {
        okhttp3.Call localVarCall = getWebhookValidateBeforeCall(companyId, topic, xApiVersion, xCompanyGuid, webhookId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWebhookAsync(Integer companyId, String topic, String xApiVersion, UUID xCompanyGuid, Long webhookId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebhookValidateBeforeCall(companyId, topic, xApiVersion, xCompanyGuid, webhookId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWebhookRequestBuilder {
        private final Integer companyId;
        private final String topic;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private Long webhookId;

        private GetWebhookRequestBuilder(Integer companyId, String topic) {
            this.companyId = companyId;
            this.topic = topic;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetWebhookRequestBuilder
         */
        public GetWebhookRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetWebhookRequestBuilder
         */
        public GetWebhookRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set webhookId
         * @param webhookId Webhook ID (optional)
         * @return GetWebhookRequestBuilder
         */
        public GetWebhookRequestBuilder webhookId(Long webhookId) {
            this.webhookId = webhookId;
            return this;
        }
        
        /**
         * Build call for getWebhook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWebhookCall(companyId, topic, xApiVersion, xCompanyGuid, webhookId, _callback);
        }


        /**
         * Execute getWebhook request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getWebhookWithHttpInfo(companyId, topic, xApiVersion, xCompanyGuid, webhookId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWebhook request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getWebhookWithHttpInfo(companyId, topic, xApiVersion, xCompanyGuid, webhookId);
        }

        /**
         * Execute getWebhook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getWebhookAsync(companyId, topic, xApiVersion, xCompanyGuid, webhookId, _callback);
        }
    }

    /**
     * Test Webhook
     * 
     * @param companyId Company ID (required)
     * @param topic topic for the sample payload (required)
     * @return GetWebhookRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetWebhookRequestBuilder getWebhook(Integer companyId, String topic) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (topic == null) throw new IllegalArgumentException("\"topic\" is required but got null");
            

        return new GetWebhookRequestBuilder(companyId, topic);
    }
    private okhttp3.Call listCall(Long companyId, String xApiVersion, UUID xCompanyGuid, String modifiedSince, String cursor, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/webhooks"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (modifiedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_since", modifiedSince));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Long companyId, String xApiVersion, UUID xCompanyGuid, String modifiedSince, String cursor, Long limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling list(Async)");
        }

        return listCall(companyId, xApiVersion, xCompanyGuid, modifiedSince, cursor, limit, _callback);

    }


    private ApiResponse<WebhooksListResponse> listWithHttpInfo(Long companyId, String xApiVersion, UUID xCompanyGuid, String modifiedSince, String cursor, Long limit) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, modifiedSince, cursor, limit, null);
        Type localVarReturnType = new TypeToken<WebhooksListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Long companyId, String xApiVersion, UUID xCompanyGuid, String modifiedSince, String cursor, Long limit, final ApiCallback<WebhooksListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, modifiedSince, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<WebhooksListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final Long companyId;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private String modifiedSince;
        private String cursor;
        private Long limit;

        private ListRequestBuilder(Long companyId) {
            this.companyId = companyId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set modifiedSince
         * @param modifiedSince Return webhooks that have been modified since the specified date. Format YYYY-MM-DD (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder modifiedSince(String modifiedSince) {
            this.modifiedSince = modifiedSince;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Cursor for the next or previous page of results. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The number of results desired per page. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(companyId, xApiVersion, xCompanyGuid, modifiedSince, cursor, limit, _callback);
        }


        /**
         * Execute list request
         * @return WebhooksListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public WebhooksListResponse execute() throws ApiException {
            ApiResponse<WebhooksListResponse> localVarResp = listWithHttpInfo(companyId, xApiVersion, xCompanyGuid, modifiedSince, cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;WebhooksListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhooksListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(companyId, xApiVersion, xCompanyGuid, modifiedSince, cursor, limit);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhooksListResponse> _callback) throws ApiException {
            return listAsync(companyId, xApiVersion, xCompanyGuid, modifiedSince, cursor, limit, _callback);
        }
    }

    /**
     * List Webhooks
     * 
     * @param companyId Company ID (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list(Long companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new ListRequestBuilder(companyId);
    }
    private okhttp3.Call updateCall(Long companyId, Long webhookId, WebhooksUpdateRequest webhooksUpdateRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhooksUpdateRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/webhooks/{webhook_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "webhook_id" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidateBeforeCall(Long companyId, Long webhookId, WebhooksUpdateRequest webhooksUpdateRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling update(Async)");
        }

        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling update(Async)");
        }

        // verify the required parameter 'webhooksUpdateRequest' is set
        if (webhooksUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'webhooksUpdateRequest' when calling update(Async)");
        }

        return updateCall(companyId, webhookId, webhooksUpdateRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<WebhooksUpdateResponse> updateWithHttpInfo(Long companyId, Long webhookId, WebhooksUpdateRequest webhooksUpdateRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = updateValidateBeforeCall(companyId, webhookId, webhooksUpdateRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<WebhooksUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAsync(Long companyId, Long webhookId, WebhooksUpdateRequest webhooksUpdateRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<WebhooksUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValidateBeforeCall(companyId, webhookId, webhooksUpdateRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<WebhooksUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRequestBuilder {
        private final String url;
        private final Long companyId;
        private final Long webhookId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private UpdateRequestBuilder(String url, Long companyId, Long webhookId) {
            this.url = url;
            this.companyId = companyId;
            this.webhookId = webhookId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for update
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebhooksUpdateRequest webhooksUpdateRequest = buildBodyParams();
            return updateCall(companyId, webhookId, webhooksUpdateRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private WebhooksUpdateRequest buildBodyParams() {
            WebhooksUpdateRequest webhooksUpdateRequest = new WebhooksUpdateRequest();
            webhooksUpdateRequest.url(this.url);
            return webhooksUpdateRequest;
        }

        /**
         * Execute update request
         * @return WebhooksUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public WebhooksUpdateResponse execute() throws ApiException {
            WebhooksUpdateRequest webhooksUpdateRequest = buildBodyParams();
            ApiResponse<WebhooksUpdateResponse> localVarResp = updateWithHttpInfo(companyId, webhookId, webhooksUpdateRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute update request with HTTP info returned
         * @return ApiResponse&lt;WebhooksUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhooksUpdateResponse> executeWithHttpInfo() throws ApiException {
            WebhooksUpdateRequest webhooksUpdateRequest = buildBodyParams();
            return updateWithHttpInfo(companyId, webhookId, webhooksUpdateRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute update request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhooksUpdateResponse> _callback) throws ApiException {
            WebhooksUpdateRequest webhooksUpdateRequest = buildBodyParams();
            return updateAsync(companyId, webhookId, webhooksUpdateRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Update Webhook
     * 
     * @param companyId Company ID (required)
     * @param webhookId Webhook ID (required)
     * @param webhooksUpdateRequest  (required)
     * @return UpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRequestBuilder update(String url, Long companyId, Long webhookId) throws IllegalArgumentException {
        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (webhookId == null) throw new IllegalArgumentException("\"webhookId\" is required but got null");
        return new UpdateRequestBuilder(url, companyId, webhookId);
    }
}
