/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.RolesCreateRoleRequest;
import com.konfigthis.client.model.RolesCreateRoleRequestStationsInner;
import com.konfigthis.client.model.RolesCreateRoleResponse;
import com.konfigthis.client.model.RolesGetRoleResponse;
import com.konfigthis.client.model.RolesListResponse;
import com.konfigthis.client.model.RolesUpdateRoleByIdRequest;
import com.konfigthis.client.model.RolesUpdateRoleByIdRequestStationsInner;
import com.konfigthis.client.model.RolesUpdateRoleByIdResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class RolesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RolesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public RolesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createRoleCall(Long companyId, RolesCreateRoleRequest rolesCreateRoleRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rolesCreateRoleRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/roles"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRoleValidateBeforeCall(Long companyId, RolesCreateRoleRequest rolesCreateRoleRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createRole(Async)");
        }

        // verify the required parameter 'rolesCreateRoleRequest' is set
        if (rolesCreateRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'rolesCreateRoleRequest' when calling createRole(Async)");
        }

        return createRoleCall(companyId, rolesCreateRoleRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<RolesCreateRoleResponse> createRoleWithHttpInfo(Long companyId, RolesCreateRoleRequest rolesCreateRoleRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = createRoleValidateBeforeCall(companyId, rolesCreateRoleRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<RolesCreateRoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRoleAsync(Long companyId, RolesCreateRoleRequest rolesCreateRoleRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<RolesCreateRoleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRoleValidateBeforeCall(companyId, rolesCreateRoleRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<RolesCreateRoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRoleRequestBuilder {
        private final String name;
        private final String color;
        private final Integer locationId;
        private final Integer departmentId;
        private final Long companyId;
        private Integer sort;
        private String jobCode;
        private List<RolesCreateRoleRequestStationsInner> stations;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private CreateRoleRequestBuilder(String name, String color, Integer locationId, Integer departmentId, Long companyId) {
            this.name = name;
            this.color = color;
            this.locationId = locationId;
            this.departmentId = departmentId;
            this.companyId = companyId;
        }

        /**
         * Set sort
         * @param sort The order in which the roles will be listed in the web app (optional, default to 0)
         * @return CreateRoleRequestBuilder
         */
        public CreateRoleRequestBuilder sort(Integer sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set jobCode
         * @param jobCode Job code (optional)
         * @return CreateRoleRequestBuilder
         */
        public CreateRoleRequestBuilder jobCode(String jobCode) {
            this.jobCode = jobCode;
            return this;
        }
        
        /**
         * Set stations
         * @param stations Stations this role contains (optional)
         * @return CreateRoleRequestBuilder
         */
        public CreateRoleRequestBuilder stations(List<RolesCreateRoleRequestStationsInner> stations) {
            this.stations = stations;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return CreateRoleRequestBuilder
         */
        public CreateRoleRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return CreateRoleRequestBuilder
         */
        public CreateRoleRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for createRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RolesCreateRoleRequest rolesCreateRoleRequest = buildBodyParams();
            return createRoleCall(companyId, rolesCreateRoleRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private RolesCreateRoleRequest buildBodyParams() {
            RolesCreateRoleRequest rolesCreateRoleRequest = new RolesCreateRoleRequest();
            rolesCreateRoleRequest.name(this.name);
            rolesCreateRoleRequest.color(this.color);
            rolesCreateRoleRequest.locationId(this.locationId);
            rolesCreateRoleRequest.departmentId(this.departmentId);
            rolesCreateRoleRequest.sort(this.sort);
            rolesCreateRoleRequest.jobCode(this.jobCode);
            rolesCreateRoleRequest.stations(this.stations);
            return rolesCreateRoleRequest;
        }

        /**
         * Execute createRole request
         * @return RolesCreateRoleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public RolesCreateRoleResponse execute() throws ApiException {
            RolesCreateRoleRequest rolesCreateRoleRequest = buildBodyParams();
            ApiResponse<RolesCreateRoleResponse> localVarResp = createRoleWithHttpInfo(companyId, rolesCreateRoleRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRole request with HTTP info returned
         * @return ApiResponse&lt;RolesCreateRoleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RolesCreateRoleResponse> executeWithHttpInfo() throws ApiException {
            RolesCreateRoleRequest rolesCreateRoleRequest = buildBodyParams();
            return createRoleWithHttpInfo(companyId, rolesCreateRoleRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute createRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RolesCreateRoleResponse> _callback) throws ApiException {
            RolesCreateRoleRequest rolesCreateRoleRequest = buildBodyParams();
            return createRoleAsync(companyId, rolesCreateRoleRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Create Role
     * 
     * @param companyId The company id (required)
     * @param rolesCreateRoleRequest  (required)
     * @return CreateRoleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateRoleRequestBuilder createRole(String name, String color, Integer locationId, Integer departmentId, Long companyId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (color == null) throw new IllegalArgumentException("\"color\" is required but got null");
            

        if (locationId == null) throw new IllegalArgumentException("\"locationId\" is required but got null");
        if (departmentId == null) throw new IllegalArgumentException("\"departmentId\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new CreateRoleRequestBuilder(name, color, locationId, departmentId, companyId);
    }
    private okhttp3.Call deleteRoleCall(Long companyId, Long roleId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/roles/{role_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "role_id" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRoleValidateBeforeCall(Long companyId, Long roleId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling deleteRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling deleteRole(Async)");
        }

        return deleteRoleCall(companyId, roleId, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<Void> deleteRoleWithHttpInfo(Long companyId, Long roleId, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = deleteRoleValidateBeforeCall(companyId, roleId, xApiVersion, xCompanyGuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteRoleAsync(Long companyId, Long roleId, String xApiVersion, UUID xCompanyGuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRoleValidateBeforeCall(companyId, roleId, xApiVersion, xCompanyGuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteRoleRequestBuilder {
        private final Long companyId;
        private final Long roleId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private DeleteRoleRequestBuilder(Long companyId, Long roleId) {
            this.companyId = companyId;
            this.roleId = roleId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return DeleteRoleRequestBuilder
         */
        public DeleteRoleRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return DeleteRoleRequestBuilder
         */
        public DeleteRoleRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for deleteRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteRoleCall(companyId, roleId, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute deleteRole request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteRoleWithHttpInfo(companyId, roleId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute deleteRole request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteRoleWithHttpInfo(companyId, roleId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute deleteRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteRoleAsync(companyId, roleId, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Delete Role
     * 
     * @param companyId Company ID (required)
     * @param roleId Role ID (required)
     * @return DeleteRoleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRoleRequestBuilder deleteRole(Long companyId, Long roleId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
        return new DeleteRoleRequestBuilder(companyId, roleId);
    }
    private okhttp3.Call getRoleCall(Long companyId, Long roleId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/roles/{role_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "role_id" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRoleValidateBeforeCall(Long companyId, Long roleId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling getRole(Async)");
        }

        return getRoleCall(companyId, roleId, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<RolesGetRoleResponse> getRoleWithHttpInfo(Long companyId, Long roleId, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = getRoleValidateBeforeCall(companyId, roleId, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<RolesGetRoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRoleAsync(Long companyId, Long roleId, String xApiVersion, UUID xCompanyGuid, final ApiCallback<RolesGetRoleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRoleValidateBeforeCall(companyId, roleId, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<RolesGetRoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRoleRequestBuilder {
        private final Long companyId;
        private final Long roleId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private GetRoleRequestBuilder(Long companyId, Long roleId) {
            this.companyId = companyId;
            this.roleId = roleId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetRoleRequestBuilder
         */
        public GetRoleRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetRoleRequestBuilder
         */
        public GetRoleRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for getRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRoleCall(companyId, roleId, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute getRole request
         * @return RolesGetRoleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public RolesGetRoleResponse execute() throws ApiException {
            ApiResponse<RolesGetRoleResponse> localVarResp = getRoleWithHttpInfo(companyId, roleId, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRole request with HTTP info returned
         * @return ApiResponse&lt;RolesGetRoleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RolesGetRoleResponse> executeWithHttpInfo() throws ApiException {
            return getRoleWithHttpInfo(companyId, roleId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute getRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RolesGetRoleResponse> _callback) throws ApiException {
            return getRoleAsync(companyId, roleId, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Retrieve Role
     * 
     * @param companyId Company ID (required)
     * @param roleId Role ID (required)
     * @return GetRoleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetRoleRequestBuilder getRole(Long companyId, Long roleId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
        return new GetRoleRequestBuilder(companyId, roleId);
    }
    private okhttp3.Call listCall(Long companyId, String xApiVersion, UUID xCompanyGuid, Long locationId, Long departmentId, List<Long> ids, String modifiedSince, String cursor, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/roles"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (departmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("department_id", departmentId));
        }

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ids", ids));
        }

        if (modifiedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_since", modifiedSince));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Long companyId, String xApiVersion, UUID xCompanyGuid, Long locationId, Long departmentId, List<Long> ids, String modifiedSince, String cursor, Long limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling list(Async)");
        }

        return listCall(companyId, xApiVersion, xCompanyGuid, locationId, departmentId, ids, modifiedSince, cursor, limit, _callback);

    }


    private ApiResponse<RolesListResponse> listWithHttpInfo(Long companyId, String xApiVersion, UUID xCompanyGuid, Long locationId, Long departmentId, List<Long> ids, String modifiedSince, String cursor, Long limit) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, locationId, departmentId, ids, modifiedSince, cursor, limit, null);
        Type localVarReturnType = new TypeToken<RolesListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Long companyId, String xApiVersion, UUID xCompanyGuid, Long locationId, Long departmentId, List<Long> ids, String modifiedSince, String cursor, Long limit, final ApiCallback<RolesListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, locationId, departmentId, ids, modifiedSince, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<RolesListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final Long companyId;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private Long locationId;
        private Long departmentId;
        private List<Long> ids;
        private String modifiedSince;
        private String cursor;
        private Long limit;

        private ListRequestBuilder(Long companyId) {
            this.companyId = companyId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set locationId
         * @param locationId Location ID (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder locationId(Long locationId) {
            this.locationId = locationId;
            return this;
        }
        
        /**
         * Set departmentId
         * @param departmentId Department ID (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder departmentId(Long departmentId) {
            this.departmentId = departmentId;
            return this;
        }
        
        /**
         * Set ids
         * @param ids Role IDs (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder ids(List<Long> ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Set modifiedSince
         * @param modifiedSince Return roles that have been modified since the specified date. Format YYYY-MM-DD (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder modifiedSince(String modifiedSince) {
            this.modifiedSince = modifiedSince;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Cursor for the next or previous page of results. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The number of results desired per page. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(companyId, xApiVersion, xCompanyGuid, locationId, departmentId, ids, modifiedSince, cursor, limit, _callback);
        }


        /**
         * Execute list request
         * @return RolesListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public RolesListResponse execute() throws ApiException {
            ApiResponse<RolesListResponse> localVarResp = listWithHttpInfo(companyId, xApiVersion, xCompanyGuid, locationId, departmentId, ids, modifiedSince, cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;RolesListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RolesListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(companyId, xApiVersion, xCompanyGuid, locationId, departmentId, ids, modifiedSince, cursor, limit);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RolesListResponse> _callback) throws ApiException {
            return listAsync(companyId, xApiVersion, xCompanyGuid, locationId, departmentId, ids, modifiedSince, cursor, limit, _callback);
        }
    }

    /**
     * List Roles
     * 
     * @param companyId Company ID (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list(Long companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new ListRequestBuilder(companyId);
    }
    private okhttp3.Call updateRoleByIdCall(Long companyId, Long roleId, RolesUpdateRoleByIdRequest rolesUpdateRoleByIdRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rolesUpdateRoleByIdRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/roles/{role_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "role_id" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRoleByIdValidateBeforeCall(Long companyId, Long roleId, RolesUpdateRoleByIdRequest rolesUpdateRoleByIdRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updateRoleById(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling updateRoleById(Async)");
        }

        // verify the required parameter 'rolesUpdateRoleByIdRequest' is set
        if (rolesUpdateRoleByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'rolesUpdateRoleByIdRequest' when calling updateRoleById(Async)");
        }

        return updateRoleByIdCall(companyId, roleId, rolesUpdateRoleByIdRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<RolesUpdateRoleByIdResponse> updateRoleByIdWithHttpInfo(Long companyId, Long roleId, RolesUpdateRoleByIdRequest rolesUpdateRoleByIdRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = updateRoleByIdValidateBeforeCall(companyId, roleId, rolesUpdateRoleByIdRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<RolesUpdateRoleByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateRoleByIdAsync(Long companyId, Long roleId, RolesUpdateRoleByIdRequest rolesUpdateRoleByIdRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<RolesUpdateRoleByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRoleByIdValidateBeforeCall(companyId, roleId, rolesUpdateRoleByIdRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<RolesUpdateRoleByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRoleByIdRequestBuilder {
        private final Long companyId;
        private final Long roleId;
        private Integer departmentId;
        private Integer sort;
        private String color;
        private String name;
        private String jobCode;
        private List<RolesUpdateRoleByIdRequestStationsInner> stations;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private UpdateRoleByIdRequestBuilder(Long companyId, Long roleId) {
            this.companyId = companyId;
            this.roleId = roleId;
        }

        /**
         * Set departmentId
         * @param departmentId Department ID. If this role is not assigned to a department, this value will be zero (optional, default to 0)
         * @return UpdateRoleByIdRequestBuilder
         */
        public UpdateRoleByIdRequestBuilder departmentId(Integer departmentId) {
            this.departmentId = departmentId;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The order in which the roles will be listed in the web app (optional, default to 0)
         * @return UpdateRoleByIdRequestBuilder
         */
        public UpdateRoleByIdRequestBuilder sort(Integer sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set color
         * @param color A hex number representing the color (optional)
         * @return UpdateRoleByIdRequestBuilder
         */
        public UpdateRoleByIdRequestBuilder color(String color) {
            this.color = color;
            return this;
        }
        
        /**
         * Set name
         * @param name Role name (optional)
         * @return UpdateRoleByIdRequestBuilder
         */
        public UpdateRoleByIdRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set jobCode
         * @param jobCode Job code (optional)
         * @return UpdateRoleByIdRequestBuilder
         */
        public UpdateRoleByIdRequestBuilder jobCode(String jobCode) {
            this.jobCode = jobCode;
            return this;
        }
        
        /**
         * Set stations
         * @param stations Stations this role contains (optional)
         * @return UpdateRoleByIdRequestBuilder
         */
        public UpdateRoleByIdRequestBuilder stations(List<RolesUpdateRoleByIdRequestStationsInner> stations) {
            this.stations = stations;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return UpdateRoleByIdRequestBuilder
         */
        public UpdateRoleByIdRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return UpdateRoleByIdRequestBuilder
         */
        public UpdateRoleByIdRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for updateRoleById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RolesUpdateRoleByIdRequest rolesUpdateRoleByIdRequest = buildBodyParams();
            return updateRoleByIdCall(companyId, roleId, rolesUpdateRoleByIdRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private RolesUpdateRoleByIdRequest buildBodyParams() {
            RolesUpdateRoleByIdRequest rolesUpdateRoleByIdRequest = new RolesUpdateRoleByIdRequest();
            rolesUpdateRoleByIdRequest.departmentId(this.departmentId);
            rolesUpdateRoleByIdRequest.sort(this.sort);
            rolesUpdateRoleByIdRequest.color(this.color);
            rolesUpdateRoleByIdRequest.name(this.name);
            rolesUpdateRoleByIdRequest.jobCode(this.jobCode);
            rolesUpdateRoleByIdRequest.stations(this.stations);
            return rolesUpdateRoleByIdRequest;
        }

        /**
         * Execute updateRoleById request
         * @return RolesUpdateRoleByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public RolesUpdateRoleByIdResponse execute() throws ApiException {
            RolesUpdateRoleByIdRequest rolesUpdateRoleByIdRequest = buildBodyParams();
            ApiResponse<RolesUpdateRoleByIdResponse> localVarResp = updateRoleByIdWithHttpInfo(companyId, roleId, rolesUpdateRoleByIdRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateRoleById request with HTTP info returned
         * @return ApiResponse&lt;RolesUpdateRoleByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RolesUpdateRoleByIdResponse> executeWithHttpInfo() throws ApiException {
            RolesUpdateRoleByIdRequest rolesUpdateRoleByIdRequest = buildBodyParams();
            return updateRoleByIdWithHttpInfo(companyId, roleId, rolesUpdateRoleByIdRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute updateRoleById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RolesUpdateRoleByIdResponse> _callback) throws ApiException {
            RolesUpdateRoleByIdRequest rolesUpdateRoleByIdRequest = buildBodyParams();
            return updateRoleByIdAsync(companyId, roleId, rolesUpdateRoleByIdRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Update Role
     * 
     * @param companyId Company ID (required)
     * @param roleId Role ID (required)
     * @param rolesUpdateRoleByIdRequest  (required)
     * @return UpdateRoleByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRoleByIdRequestBuilder updateRoleById(Long companyId, Long roleId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
        return new UpdateRoleByIdRequestBuilder(companyId, roleId);
    }
}
