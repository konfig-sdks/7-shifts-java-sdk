/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.TipPoolGetDetailedReportResponse;
import com.konfigthis.client.model.TipPoolGetManualEntryTipsResponse;
import com.konfigthis.client.model.TipPoolGetSettingsResponse;
import com.konfigthis.client.model.TipPoolGetSummaryReportResponse;
import com.konfigthis.client.model.TipPoolSaveManualEntryRequest;
import com.konfigthis.client.model.TipPoolSaveManualEntryRequestDataInner;
import com.konfigthis.client.model.TipPoolSaveManualEntryResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TipPoolApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TipPoolApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TipPoolApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getDetailedReportCall(Long companyId, Long locationId, String startDate, String endDate, String xApiVersion, UUID xCompanyGuid, UUID tipPoolUuid, UUID dayPartUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/locations/{location_id}/tip_pool_detailed_report"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "location_id" + "}", localVarApiClient.escapeString(locationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tipPoolUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tip_pool_uuid", tipPoolUuid));
        }

        if (dayPartUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("day_part_uuid", dayPartUuid));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailedReportValidateBeforeCall(Long companyId, Long locationId, String startDate, String endDate, String xApiVersion, UUID xCompanyGuid, UUID tipPoolUuid, UUID dayPartUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getDetailedReport(Async)");
        }

        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling getDetailedReport(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getDetailedReport(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getDetailedReport(Async)");
        }

        return getDetailedReportCall(companyId, locationId, startDate, endDate, xApiVersion, xCompanyGuid, tipPoolUuid, dayPartUuid, _callback);

    }


    private ApiResponse<TipPoolGetDetailedReportResponse> getDetailedReportWithHttpInfo(Long companyId, Long locationId, String startDate, String endDate, String xApiVersion, UUID xCompanyGuid, UUID tipPoolUuid, UUID dayPartUuid) throws ApiException {
        okhttp3.Call localVarCall = getDetailedReportValidateBeforeCall(companyId, locationId, startDate, endDate, xApiVersion, xCompanyGuid, tipPoolUuid, dayPartUuid, null);
        Type localVarReturnType = new TypeToken<TipPoolGetDetailedReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailedReportAsync(Long companyId, Long locationId, String startDate, String endDate, String xApiVersion, UUID xCompanyGuid, UUID tipPoolUuid, UUID dayPartUuid, final ApiCallback<TipPoolGetDetailedReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailedReportValidateBeforeCall(companyId, locationId, startDate, endDate, xApiVersion, xCompanyGuid, tipPoolUuid, dayPartUuid, _callback);
        Type localVarReturnType = new TypeToken<TipPoolGetDetailedReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailedReportRequestBuilder {
        private final Long companyId;
        private final Long locationId;
        private final String startDate;
        private final String endDate;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private UUID tipPoolUuid;
        private UUID dayPartUuid;

        private GetDetailedReportRequestBuilder(Long companyId, Long locationId, String startDate, String endDate) {
            this.companyId = companyId;
            this.locationId = locationId;
            this.startDate = startDate;
            this.endDate = endDate;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetDetailedReportRequestBuilder
         */
        public GetDetailedReportRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetDetailedReportRequestBuilder
         */
        public GetDetailedReportRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set tipPoolUuid
         * @param tipPoolUuid The tip pool UUID, when omitted the report will return all tip pools (optional)
         * @return GetDetailedReportRequestBuilder
         */
        public GetDetailedReportRequestBuilder tipPoolUuid(UUID tipPoolUuid) {
            this.tipPoolUuid = tipPoolUuid;
            return this;
        }
        
        /**
         * Set dayPartUuid
         * @param dayPartUuid Daypart UUID, when omitted the report will return all dayparts (optional)
         * @return GetDetailedReportRequestBuilder
         */
        public GetDetailedReportRequestBuilder dayPartUuid(UUID dayPartUuid) {
            this.dayPartUuid = dayPartUuid;
            return this;
        }
        
        /**
         * Build call for getDetailedReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailedReportCall(companyId, locationId, startDate, endDate, xApiVersion, xCompanyGuid, tipPoolUuid, dayPartUuid, _callback);
        }


        /**
         * Execute getDetailedReport request
         * @return TipPoolGetDetailedReportResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TipPoolGetDetailedReportResponse execute() throws ApiException {
            ApiResponse<TipPoolGetDetailedReportResponse> localVarResp = getDetailedReportWithHttpInfo(companyId, locationId, startDate, endDate, xApiVersion, xCompanyGuid, tipPoolUuid, dayPartUuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetailedReport request with HTTP info returned
         * @return ApiResponse&lt;TipPoolGetDetailedReportResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TipPoolGetDetailedReportResponse> executeWithHttpInfo() throws ApiException {
            return getDetailedReportWithHttpInfo(companyId, locationId, startDate, endDate, xApiVersion, xCompanyGuid, tipPoolUuid, dayPartUuid);
        }

        /**
         * Execute getDetailedReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TipPoolGetDetailedReportResponse> _callback) throws ApiException {
            return getDetailedReportAsync(companyId, locationId, startDate, endDate, xApiVersion, xCompanyGuid, tipPoolUuid, dayPartUuid, _callback);
        }
    }

    /**
     * Retreive Tip Pool Detailed Report
     * 
     * @param companyId Company ID (required)
     * @param locationId Location ID (required)
     * @param startDate The start date in YYYY-MM-DD format (required)
     * @param endDate The end date in YYYY-MM-DD format (required)
     * @return GetDetailedReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailedReportRequestBuilder getDetailedReport(Long companyId, Long locationId, String startDate, String endDate) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (locationId == null) throw new IllegalArgumentException("\"locationId\" is required but got null");
        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
            

        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
            

        return new GetDetailedReportRequestBuilder(companyId, locationId, startDate, endDate);
    }
    private okhttp3.Call getManualEntryTipsCall(Integer companyId, UUID tipPoolSettingsUuid, LocalDate startDate, LocalDate endDate, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/tip_pool/{tip_pool_settings_uuid}/manual_entry"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "tip_pool_settings_uuid" + "}", localVarApiClient.escapeString(tipPoolSettingsUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getManualEntryTipsValidateBeforeCall(Integer companyId, UUID tipPoolSettingsUuid, LocalDate startDate, LocalDate endDate, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getManualEntryTips(Async)");
        }

        // verify the required parameter 'tipPoolSettingsUuid' is set
        if (tipPoolSettingsUuid == null) {
            throw new ApiException("Missing the required parameter 'tipPoolSettingsUuid' when calling getManualEntryTips(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getManualEntryTips(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getManualEntryTips(Async)");
        }

        return getManualEntryTipsCall(companyId, tipPoolSettingsUuid, startDate, endDate, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<TipPoolGetManualEntryTipsResponse> getManualEntryTipsWithHttpInfo(Integer companyId, UUID tipPoolSettingsUuid, LocalDate startDate, LocalDate endDate, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = getManualEntryTipsValidateBeforeCall(companyId, tipPoolSettingsUuid, startDate, endDate, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<TipPoolGetManualEntryTipsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getManualEntryTipsAsync(Integer companyId, UUID tipPoolSettingsUuid, LocalDate startDate, LocalDate endDate, String xApiVersion, UUID xCompanyGuid, final ApiCallback<TipPoolGetManualEntryTipsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getManualEntryTipsValidateBeforeCall(companyId, tipPoolSettingsUuid, startDate, endDate, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<TipPoolGetManualEntryTipsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetManualEntryTipsRequestBuilder {
        private final Integer companyId;
        private final UUID tipPoolSettingsUuid;
        private final LocalDate startDate;
        private final LocalDate endDate;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private GetManualEntryTipsRequestBuilder(Integer companyId, UUID tipPoolSettingsUuid, LocalDate startDate, LocalDate endDate) {
            this.companyId = companyId;
            this.tipPoolSettingsUuid = tipPoolSettingsUuid;
            this.startDate = startDate;
            this.endDate = endDate;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetManualEntryTipsRequestBuilder
         */
        public GetManualEntryTipsRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetManualEntryTipsRequestBuilder
         */
        public GetManualEntryTipsRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for getManualEntryTips
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Manual tip entry data </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getManualEntryTipsCall(companyId, tipPoolSettingsUuid, startDate, endDate, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute getManualEntryTips request
         * @return TipPoolGetManualEntryTipsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Manual tip entry data </td><td>  -  </td></tr>
         </table>
         */
        public TipPoolGetManualEntryTipsResponse execute() throws ApiException {
            ApiResponse<TipPoolGetManualEntryTipsResponse> localVarResp = getManualEntryTipsWithHttpInfo(companyId, tipPoolSettingsUuid, startDate, endDate, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getManualEntryTips request with HTTP info returned
         * @return ApiResponse&lt;TipPoolGetManualEntryTipsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Manual tip entry data </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TipPoolGetManualEntryTipsResponse> executeWithHttpInfo() throws ApiException {
            return getManualEntryTipsWithHttpInfo(companyId, tipPoolSettingsUuid, startDate, endDate, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute getManualEntryTips request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Manual tip entry data </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TipPoolGetManualEntryTipsResponse> _callback) throws ApiException {
            return getManualEntryTipsAsync(companyId, tipPoolSettingsUuid, startDate, endDate, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Grabs manual entry tips for a tip pool
     * 
     * @param companyId The company ID for the target tip pool settings (required)
     * @param tipPoolSettingsUuid The tip pool settings uuid (required)
     * @param startDate The start date of the manual entry query range (required)
     * @param endDate The end date of the manual entry query range (required)
     * @return GetManualEntryTipsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Manual tip entry data </td><td>  -  </td></tr>
     </table>
     */
    public GetManualEntryTipsRequestBuilder getManualEntryTips(Integer companyId, UUID tipPoolSettingsUuid, LocalDate startDate, LocalDate endDate) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (tipPoolSettingsUuid == null) throw new IllegalArgumentException("\"tipPoolSettingsUuid\" is required but got null");
            

        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
        return new GetManualEntryTipsRequestBuilder(companyId, tipPoolSettingsUuid, startDate, endDate);
    }
    private okhttp3.Call getSettingsCall(Long companyId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/tip_pool_settings"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSettingsValidateBeforeCall(Long companyId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getSettings(Async)");
        }

        return getSettingsCall(companyId, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<TipPoolGetSettingsResponse> getSettingsWithHttpInfo(Long companyId, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<TipPoolGetSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSettingsAsync(Long companyId, String xApiVersion, UUID xCompanyGuid, final ApiCallback<TipPoolGetSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<TipPoolGetSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSettingsRequestBuilder {
        private final Long companyId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private GetSettingsRequestBuilder(Long companyId) {
            this.companyId = companyId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetSettingsRequestBuilder
         */
        public GetSettingsRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetSettingsRequestBuilder
         */
        public GetSettingsRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for getSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Tip pool settings for a company </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSettingsCall(companyId, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute getSettings request
         * @return TipPoolGetSettingsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Tip pool settings for a company </td><td>  -  </td></tr>
         </table>
         */
        public TipPoolGetSettingsResponse execute() throws ApiException {
            ApiResponse<TipPoolGetSettingsResponse> localVarResp = getSettingsWithHttpInfo(companyId, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSettings request with HTTP info returned
         * @return ApiResponse&lt;TipPoolGetSettingsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Tip pool settings for a company </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TipPoolGetSettingsResponse> executeWithHttpInfo() throws ApiException {
            return getSettingsWithHttpInfo(companyId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute getSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Tip pool settings for a company </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TipPoolGetSettingsResponse> _callback) throws ApiException {
            return getSettingsAsync(companyId, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Gets tip pool settings for a company
     * 
     * @param companyId Company ID (required)
     * @return GetSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tip pool settings for a company </td><td>  -  </td></tr>
     </table>
     */
    public GetSettingsRequestBuilder getSettings(Long companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new GetSettingsRequestBuilder(companyId);
    }
    private okhttp3.Call getSummaryReportCall(Long companyId, Long locationId, String startDate, String endDate, String xApiVersion, UUID xCompanyGuid, UUID tipPoolUuid, UUID dayPartUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/locations/{location_id}/tip_pool_summary_report"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "location_id" + "}", localVarApiClient.escapeString(locationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tipPoolUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tip_pool_uuid", tipPoolUuid));
        }

        if (dayPartUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("day_part_uuid", dayPartUuid));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSummaryReportValidateBeforeCall(Long companyId, Long locationId, String startDate, String endDate, String xApiVersion, UUID xCompanyGuid, UUID tipPoolUuid, UUID dayPartUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getSummaryReport(Async)");
        }

        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling getSummaryReport(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getSummaryReport(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getSummaryReport(Async)");
        }

        return getSummaryReportCall(companyId, locationId, startDate, endDate, xApiVersion, xCompanyGuid, tipPoolUuid, dayPartUuid, _callback);

    }


    private ApiResponse<TipPoolGetSummaryReportResponse> getSummaryReportWithHttpInfo(Long companyId, Long locationId, String startDate, String endDate, String xApiVersion, UUID xCompanyGuid, UUID tipPoolUuid, UUID dayPartUuid) throws ApiException {
        okhttp3.Call localVarCall = getSummaryReportValidateBeforeCall(companyId, locationId, startDate, endDate, xApiVersion, xCompanyGuid, tipPoolUuid, dayPartUuid, null);
        Type localVarReturnType = new TypeToken<TipPoolGetSummaryReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSummaryReportAsync(Long companyId, Long locationId, String startDate, String endDate, String xApiVersion, UUID xCompanyGuid, UUID tipPoolUuid, UUID dayPartUuid, final ApiCallback<TipPoolGetSummaryReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSummaryReportValidateBeforeCall(companyId, locationId, startDate, endDate, xApiVersion, xCompanyGuid, tipPoolUuid, dayPartUuid, _callback);
        Type localVarReturnType = new TypeToken<TipPoolGetSummaryReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSummaryReportRequestBuilder {
        private final Long companyId;
        private final Long locationId;
        private final String startDate;
        private final String endDate;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private UUID tipPoolUuid;
        private UUID dayPartUuid;

        private GetSummaryReportRequestBuilder(Long companyId, Long locationId, String startDate, String endDate) {
            this.companyId = companyId;
            this.locationId = locationId;
            this.startDate = startDate;
            this.endDate = endDate;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetSummaryReportRequestBuilder
         */
        public GetSummaryReportRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetSummaryReportRequestBuilder
         */
        public GetSummaryReportRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set tipPoolUuid
         * @param tipPoolUuid The tip pool UUID, when omitted the report will return all tip pools (optional)
         * @return GetSummaryReportRequestBuilder
         */
        public GetSummaryReportRequestBuilder tipPoolUuid(UUID tipPoolUuid) {
            this.tipPoolUuid = tipPoolUuid;
            return this;
        }
        
        /**
         * Set dayPartUuid
         * @param dayPartUuid Daypart UUID, when omitted the report will return all dayparts (optional)
         * @return GetSummaryReportRequestBuilder
         */
        public GetSummaryReportRequestBuilder dayPartUuid(UUID dayPartUuid) {
            this.dayPartUuid = dayPartUuid;
            return this;
        }
        
        /**
         * Build call for getSummaryReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSummaryReportCall(companyId, locationId, startDate, endDate, xApiVersion, xCompanyGuid, tipPoolUuid, dayPartUuid, _callback);
        }


        /**
         * Execute getSummaryReport request
         * @return TipPoolGetSummaryReportResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TipPoolGetSummaryReportResponse execute() throws ApiException {
            ApiResponse<TipPoolGetSummaryReportResponse> localVarResp = getSummaryReportWithHttpInfo(companyId, locationId, startDate, endDate, xApiVersion, xCompanyGuid, tipPoolUuid, dayPartUuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSummaryReport request with HTTP info returned
         * @return ApiResponse&lt;TipPoolGetSummaryReportResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TipPoolGetSummaryReportResponse> executeWithHttpInfo() throws ApiException {
            return getSummaryReportWithHttpInfo(companyId, locationId, startDate, endDate, xApiVersion, xCompanyGuid, tipPoolUuid, dayPartUuid);
        }

        /**
         * Execute getSummaryReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TipPoolGetSummaryReportResponse> _callback) throws ApiException {
            return getSummaryReportAsync(companyId, locationId, startDate, endDate, xApiVersion, xCompanyGuid, tipPoolUuid, dayPartUuid, _callback);
        }
    }

    /**
     * Retreive Tip Pool Summary Report
     * 
     * @param companyId Company ID (required)
     * @param locationId Location ID (required)
     * @param startDate The start date in YYYY-MM-DD format (required)
     * @param endDate The end date in YYYY-MM-DD format (required)
     * @return GetSummaryReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetSummaryReportRequestBuilder getSummaryReport(Long companyId, Long locationId, String startDate, String endDate) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (locationId == null) throw new IllegalArgumentException("\"locationId\" is required but got null");
        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
            

        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
            

        return new GetSummaryReportRequestBuilder(companyId, locationId, startDate, endDate);
    }
    private okhttp3.Call saveManualEntryCall(Integer companyId, UUID tipPoolSettingsUuid, TipPoolSaveManualEntryRequest tipPoolSaveManualEntryRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tipPoolSaveManualEntryRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/tip_pool/{tip_pool_settings_uuid}/manual_entry"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "tip_pool_settings_uuid" + "}", localVarApiClient.escapeString(tipPoolSettingsUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveManualEntryValidateBeforeCall(Integer companyId, UUID tipPoolSettingsUuid, TipPoolSaveManualEntryRequest tipPoolSaveManualEntryRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling saveManualEntry(Async)");
        }

        // verify the required parameter 'tipPoolSettingsUuid' is set
        if (tipPoolSettingsUuid == null) {
            throw new ApiException("Missing the required parameter 'tipPoolSettingsUuid' when calling saveManualEntry(Async)");
        }

        // verify the required parameter 'tipPoolSaveManualEntryRequest' is set
        if (tipPoolSaveManualEntryRequest == null) {
            throw new ApiException("Missing the required parameter 'tipPoolSaveManualEntryRequest' when calling saveManualEntry(Async)");
        }

        return saveManualEntryCall(companyId, tipPoolSettingsUuid, tipPoolSaveManualEntryRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<TipPoolSaveManualEntryResponse> saveManualEntryWithHttpInfo(Integer companyId, UUID tipPoolSettingsUuid, TipPoolSaveManualEntryRequest tipPoolSaveManualEntryRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = saveManualEntryValidateBeforeCall(companyId, tipPoolSettingsUuid, tipPoolSaveManualEntryRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<TipPoolSaveManualEntryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call saveManualEntryAsync(Integer companyId, UUID tipPoolSettingsUuid, TipPoolSaveManualEntryRequest tipPoolSaveManualEntryRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<TipPoolSaveManualEntryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveManualEntryValidateBeforeCall(companyId, tipPoolSettingsUuid, tipPoolSaveManualEntryRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<TipPoolSaveManualEntryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SaveManualEntryRequestBuilder {
        private final List<TipPoolSaveManualEntryRequestDataInner> data;
        private final Integer companyId;
        private final UUID tipPoolSettingsUuid;
        private String _object;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private SaveManualEntryRequestBuilder(List<TipPoolSaveManualEntryRequestDataInner> data, Integer companyId, UUID tipPoolSettingsUuid) {
            this.data = data;
            this.companyId = companyId;
            this.tipPoolSettingsUuid = tipPoolSettingsUuid;
        }

        /**
         * Set _object
         * @param _object  (optional)
         * @return SaveManualEntryRequestBuilder
         */
        public SaveManualEntryRequestBuilder _object(String _object) {
            this._object = _object;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return SaveManualEntryRequestBuilder
         */
        public SaveManualEntryRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return SaveManualEntryRequestBuilder
         */
        public SaveManualEntryRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for saveManualEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TipPoolSaveManualEntryRequest tipPoolSaveManualEntryRequest = buildBodyParams();
            return saveManualEntryCall(companyId, tipPoolSettingsUuid, tipPoolSaveManualEntryRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private TipPoolSaveManualEntryRequest buildBodyParams() {
            TipPoolSaveManualEntryRequest tipPoolSaveManualEntryRequest = new TipPoolSaveManualEntryRequest();
            if (this._object != null)
            tipPoolSaveManualEntryRequest._object(TipPoolSaveManualEntryRequest.ObjectEnum.fromValue(this._object));
            tipPoolSaveManualEntryRequest.data(this.data);
            return tipPoolSaveManualEntryRequest;
        }

        /**
         * Execute saveManualEntry request
         * @return TipPoolSaveManualEntryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TipPoolSaveManualEntryResponse execute() throws ApiException {
            TipPoolSaveManualEntryRequest tipPoolSaveManualEntryRequest = buildBodyParams();
            ApiResponse<TipPoolSaveManualEntryResponse> localVarResp = saveManualEntryWithHttpInfo(companyId, tipPoolSettingsUuid, tipPoolSaveManualEntryRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute saveManualEntry request with HTTP info returned
         * @return ApiResponse&lt;TipPoolSaveManualEntryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TipPoolSaveManualEntryResponse> executeWithHttpInfo() throws ApiException {
            TipPoolSaveManualEntryRequest tipPoolSaveManualEntryRequest = buildBodyParams();
            return saveManualEntryWithHttpInfo(companyId, tipPoolSettingsUuid, tipPoolSaveManualEntryRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute saveManualEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TipPoolSaveManualEntryResponse> _callback) throws ApiException {
            TipPoolSaveManualEntryRequest tipPoolSaveManualEntryRequest = buildBodyParams();
            return saveManualEntryAsync(companyId, tipPoolSettingsUuid, tipPoolSaveManualEntryRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Saves manual entries for a tip pool
     * 
     * @param companyId The company ID for the target tip pool settings (required)
     * @param tipPoolSettingsUuid The tip pool settings uuid (required)
     * @param tipPoolSaveManualEntryRequest  (required)
     * @return SaveManualEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SaveManualEntryRequestBuilder saveManualEntry(List<TipPoolSaveManualEntryRequestDataInner> data, Integer companyId, UUID tipPoolSettingsUuid) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (tipPoolSettingsUuid == null) throw new IllegalArgumentException("\"tipPoolSettingsUuid\" is required but got null");
            

        return new SaveManualEntryRequestBuilder(data, companyId, tipPoolSettingsUuid);
    }
}
