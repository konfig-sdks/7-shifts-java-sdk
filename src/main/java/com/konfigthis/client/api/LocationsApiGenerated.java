/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.LocationsCreateRequest;
import com.konfigthis.client.model.LocationsCreateResponse;
import com.konfigthis.client.model.LocationsGetLocationResponse;
import com.konfigthis.client.model.LocationsListGetResponse;
import com.konfigthis.client.model.LocationsUpdateLocationByIdRequest;
import com.konfigthis.client.model.LocationsUpdateLocationByIdResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LocationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LocationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LocationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCall(Long companyId, LocationsCreateRequest locationsCreateRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = locationsCreateRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/locations"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(Long companyId, LocationsCreateRequest locationsCreateRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling create(Async)");
        }

        // verify the required parameter 'locationsCreateRequest' is set
        if (locationsCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'locationsCreateRequest' when calling create(Async)");
        }

        return createCall(companyId, locationsCreateRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<LocationsCreateResponse> createWithHttpInfo(Long companyId, LocationsCreateRequest locationsCreateRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(companyId, locationsCreateRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<LocationsCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAsync(Long companyId, LocationsCreateRequest locationsCreateRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<LocationsCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(companyId, locationsCreateRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<LocationsCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRequestBuilder {
        private final String name;
        private final String country;
        private final Long companyId;
        private String formattedAddress;
        private String state;
        private String city;
        private String latitude;
        private String longitude;
        private String placeId;
        private String timezone;
        private Boolean holidayPay;
        private String sunHoursClose;
        private String monHoursClose;
        private String tueHoursClose;
        private String wedHoursClose;
        private String thuHoursClose;
        private String friHoursClose;
        private String satHoursClose;
        private String sunHoursOpen;
        private String monHoursOpen;
        private String tueHoursOpen;
        private String wedHoursOpen;
        private String thuHoursOpen;
        private String friHoursOpen;
        private String satHoursOpen;
        private Boolean sunIsClosed;
        private Boolean monIsClosed;
        private Boolean tueIsClosed;
        private Boolean wedIsClosed;
        private Boolean thuIsClosed;
        private Boolean friIsClosed;
        private Boolean satIsClosed;
        private Boolean enableShiftFeedback;
        private Boolean shiftFeedback;
        private String coupon;
        private String stripeTokenId;
        private Integer copyFromId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private CreateRequestBuilder(String name, String country, Long companyId) {
            this.name = name;
            this.country = country;
            this.companyId = companyId;
        }

        /**
         * Set formattedAddress
         * @param formattedAddress Full address (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder formattedAddress(String formattedAddress) {
            this.formattedAddress = formattedAddress;
            return this;
        }
        
        /**
         * Set state
         * @param state State or province (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set city
         * @param city City (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set latitude
         * @param latitude locations latitude coordinates (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder latitude(String latitude) {
            this.latitude = latitude;
            return this;
        }
        
        /**
         * Set longitude
         * @param longitude locations longitude coordinates (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder longitude(String longitude) {
            this.longitude = longitude;
            return this;
        }
        
        /**
         * Set placeId
         * @param placeId Google Places location Id (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder placeId(String placeId) {
            this.placeId = placeId;
            return this;
        }
        
        /**
         * Set timezone
         * @param timezone Timezone. Valid zone info name (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder timezone(String timezone) {
            this.timezone = timezone;
            return this;
        }
        
        /**
         * Set holidayPay
         * @param holidayPay When true, holiday pay is enabled (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder holidayPay(Boolean holidayPay) {
            this.holidayPay = holidayPay;
            return this;
        }
        
        /**
         * Set sunHoursClose
         * @param sunHoursClose Sunday closing time (optional, default to 00:00:00)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder sunHoursClose(String sunHoursClose) {
            this.sunHoursClose = sunHoursClose;
            return this;
        }
        
        /**
         * Set monHoursClose
         * @param monHoursClose Monday closing time (optional, default to 00:00:00)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder monHoursClose(String monHoursClose) {
            this.monHoursClose = monHoursClose;
            return this;
        }
        
        /**
         * Set tueHoursClose
         * @param tueHoursClose Tuesday closing time (optional, default to 00:00:00)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder tueHoursClose(String tueHoursClose) {
            this.tueHoursClose = tueHoursClose;
            return this;
        }
        
        /**
         * Set wedHoursClose
         * @param wedHoursClose Wednesday closing time (optional, default to 00:00:00)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder wedHoursClose(String wedHoursClose) {
            this.wedHoursClose = wedHoursClose;
            return this;
        }
        
        /**
         * Set thuHoursClose
         * @param thuHoursClose Thursday closing time (optional, default to 00:00:00)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder thuHoursClose(String thuHoursClose) {
            this.thuHoursClose = thuHoursClose;
            return this;
        }
        
        /**
         * Set friHoursClose
         * @param friHoursClose Friday closing time (optional, default to 00:00:00)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder friHoursClose(String friHoursClose) {
            this.friHoursClose = friHoursClose;
            return this;
        }
        
        /**
         * Set satHoursClose
         * @param satHoursClose Saturday closing time (optional, default to 00:00:00)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder satHoursClose(String satHoursClose) {
            this.satHoursClose = satHoursClose;
            return this;
        }
        
        /**
         * Set sunHoursOpen
         * @param sunHoursOpen Sunday opening time (optional, default to 07:00:00)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder sunHoursOpen(String sunHoursOpen) {
            this.sunHoursOpen = sunHoursOpen;
            return this;
        }
        
        /**
         * Set monHoursOpen
         * @param monHoursOpen Monday opening time (optional, default to 07:00:00)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder monHoursOpen(String monHoursOpen) {
            this.monHoursOpen = monHoursOpen;
            return this;
        }
        
        /**
         * Set tueHoursOpen
         * @param tueHoursOpen Tuesday opening time (optional, default to 07:00:00)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder tueHoursOpen(String tueHoursOpen) {
            this.tueHoursOpen = tueHoursOpen;
            return this;
        }
        
        /**
         * Set wedHoursOpen
         * @param wedHoursOpen Wednesday opening time (optional, default to 07:00:00)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder wedHoursOpen(String wedHoursOpen) {
            this.wedHoursOpen = wedHoursOpen;
            return this;
        }
        
        /**
         * Set thuHoursOpen
         * @param thuHoursOpen Thursday opening time (optional, default to 07:00:00)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder thuHoursOpen(String thuHoursOpen) {
            this.thuHoursOpen = thuHoursOpen;
            return this;
        }
        
        /**
         * Set friHoursOpen
         * @param friHoursOpen Friday opening time (optional, default to 07:00:00)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder friHoursOpen(String friHoursOpen) {
            this.friHoursOpen = friHoursOpen;
            return this;
        }
        
        /**
         * Set satHoursOpen
         * @param satHoursOpen Saturday opening time (optional, default to 07:00:00)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder satHoursOpen(String satHoursOpen) {
            this.satHoursOpen = satHoursOpen;
            return this;
        }
        
        /**
         * Set sunIsClosed
         * @param sunIsClosed If true, location is closed on Sunday (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder sunIsClosed(Boolean sunIsClosed) {
            this.sunIsClosed = sunIsClosed;
            return this;
        }
        
        /**
         * Set monIsClosed
         * @param monIsClosed If true, location is closed on Monday (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder monIsClosed(Boolean monIsClosed) {
            this.monIsClosed = monIsClosed;
            return this;
        }
        
        /**
         * Set tueIsClosed
         * @param tueIsClosed If true, location is closed on Tuesday (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder tueIsClosed(Boolean tueIsClosed) {
            this.tueIsClosed = tueIsClosed;
            return this;
        }
        
        /**
         * Set wedIsClosed
         * @param wedIsClosed If true, location is closed on Wednesday (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder wedIsClosed(Boolean wedIsClosed) {
            this.wedIsClosed = wedIsClosed;
            return this;
        }
        
        /**
         * Set thuIsClosed
         * @param thuIsClosed If true, location is closed on Thursday (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder thuIsClosed(Boolean thuIsClosed) {
            this.thuIsClosed = thuIsClosed;
            return this;
        }
        
        /**
         * Set friIsClosed
         * @param friIsClosed If true, location is closed on Friday (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder friIsClosed(Boolean friIsClosed) {
            this.friIsClosed = friIsClosed;
            return this;
        }
        
        /**
         * Set satIsClosed
         * @param satIsClosed If true, location is closed on Saturday (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder satIsClosed(Boolean satIsClosed) {
            this.satIsClosed = satIsClosed;
            return this;
        }
        
        /**
         * Set enableShiftFeedback
         * @param enableShiftFeedback If true end of shift feedback requests are enabled (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder enableShiftFeedback(Boolean enableShiftFeedback) {
            this.enableShiftFeedback = enableShiftFeedback;
            return this;
        }
        
        /**
         * Set shiftFeedback
         * @param shiftFeedback If true end of shift feedback requests are enabled (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder shiftFeedback(Boolean shiftFeedback) {
            this.shiftFeedback = shiftFeedback;
            return this;
        }
        
        /**
         * Set coupon
         * @param coupon Optional coupon to apply to this location&#39;s billing (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder coupon(String coupon) {
            this.coupon = coupon;
            return this;
        }
        
        /**
         * Set stripeTokenId
         * @param stripeTokenId Optional stripe payment token. If this is not provided, the account&#39;s default payment information will be used. (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder stripeTokenId(String stripeTokenId) {
            this.stripeTokenId = stripeTokenId;
            return this;
        }
        
        /**
         * Set copyFromId
         * @param copyFromId Optional existing location id whose department and role structure the new location should copy (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder copyFromId(Integer copyFromId) {
            this.copyFromId = copyFromId;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for create
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LocationsCreateRequest locationsCreateRequest = buildBodyParams();
            return createCall(companyId, locationsCreateRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private LocationsCreateRequest buildBodyParams() {
            LocationsCreateRequest locationsCreateRequest = new LocationsCreateRequest();
            locationsCreateRequest.name(this.name);
            locationsCreateRequest.country(this.country);
            locationsCreateRequest.formattedAddress(this.formattedAddress);
            locationsCreateRequest.state(this.state);
            locationsCreateRequest.city(this.city);
            locationsCreateRequest.latitude(this.latitude);
            locationsCreateRequest.longitude(this.longitude);
            locationsCreateRequest.placeId(this.placeId);
            locationsCreateRequest.timezone(this.timezone);
            locationsCreateRequest.holidayPay(this.holidayPay);
            locationsCreateRequest.sunHoursClose(this.sunHoursClose);
            locationsCreateRequest.monHoursClose(this.monHoursClose);
            locationsCreateRequest.tueHoursClose(this.tueHoursClose);
            locationsCreateRequest.wedHoursClose(this.wedHoursClose);
            locationsCreateRequest.thuHoursClose(this.thuHoursClose);
            locationsCreateRequest.friHoursClose(this.friHoursClose);
            locationsCreateRequest.satHoursClose(this.satHoursClose);
            locationsCreateRequest.sunHoursOpen(this.sunHoursOpen);
            locationsCreateRequest.monHoursOpen(this.monHoursOpen);
            locationsCreateRequest.tueHoursOpen(this.tueHoursOpen);
            locationsCreateRequest.wedHoursOpen(this.wedHoursOpen);
            locationsCreateRequest.thuHoursOpen(this.thuHoursOpen);
            locationsCreateRequest.friHoursOpen(this.friHoursOpen);
            locationsCreateRequest.satHoursOpen(this.satHoursOpen);
            locationsCreateRequest.sunIsClosed(this.sunIsClosed);
            locationsCreateRequest.monIsClosed(this.monIsClosed);
            locationsCreateRequest.tueIsClosed(this.tueIsClosed);
            locationsCreateRequest.wedIsClosed(this.wedIsClosed);
            locationsCreateRequest.thuIsClosed(this.thuIsClosed);
            locationsCreateRequest.friIsClosed(this.friIsClosed);
            locationsCreateRequest.satIsClosed(this.satIsClosed);
            locationsCreateRequest.enableShiftFeedback(this.enableShiftFeedback);
            locationsCreateRequest.shiftFeedback(this.shiftFeedback);
            locationsCreateRequest.coupon(this.coupon);
            locationsCreateRequest.stripeTokenId(this.stripeTokenId);
            locationsCreateRequest.copyFromId(this.copyFromId);
            return locationsCreateRequest;
        }

        /**
         * Execute create request
         * @return LocationsCreateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public LocationsCreateResponse execute() throws ApiException {
            LocationsCreateRequest locationsCreateRequest = buildBodyParams();
            ApiResponse<LocationsCreateResponse> localVarResp = createWithHttpInfo(companyId, locationsCreateRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute create request with HTTP info returned
         * @return ApiResponse&lt;LocationsCreateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LocationsCreateResponse> executeWithHttpInfo() throws ApiException {
            LocationsCreateRequest locationsCreateRequest = buildBodyParams();
            return createWithHttpInfo(companyId, locationsCreateRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute create request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LocationsCreateResponse> _callback) throws ApiException {
            LocationsCreateRequest locationsCreateRequest = buildBodyParams();
            return createAsync(companyId, locationsCreateRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Create Location
     * 
     * @param companyId Company ID (required)
     * @param locationsCreateRequest  (required)
     * @return CreateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestBuilder create(String name, String country, Long companyId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (country == null) throw new IllegalArgumentException("\"country\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new CreateRequestBuilder(name, country, companyId);
    }
    private okhttp3.Call getLocationCall(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/locations/{location_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "location_id" + "}", localVarApiClient.escapeString(locationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLocationValidateBeforeCall(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getLocation(Async)");
        }

        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling getLocation(Async)");
        }

        return getLocationCall(companyId, locationId, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<LocationsGetLocationResponse> getLocationWithHttpInfo(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = getLocationValidateBeforeCall(companyId, locationId, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<LocationsGetLocationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLocationAsync(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, final ApiCallback<LocationsGetLocationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLocationValidateBeforeCall(companyId, locationId, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<LocationsGetLocationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLocationRequestBuilder {
        private final Long companyId;
        private final Long locationId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private GetLocationRequestBuilder(Long companyId, Long locationId) {
            this.companyId = companyId;
            this.locationId = locationId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return GetLocationRequestBuilder
         */
        public GetLocationRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return GetLocationRequestBuilder
         */
        public GetLocationRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for getLocation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLocationCall(companyId, locationId, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute getLocation request
         * @return LocationsGetLocationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public LocationsGetLocationResponse execute() throws ApiException {
            ApiResponse<LocationsGetLocationResponse> localVarResp = getLocationWithHttpInfo(companyId, locationId, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLocation request with HTTP info returned
         * @return ApiResponse&lt;LocationsGetLocationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LocationsGetLocationResponse> executeWithHttpInfo() throws ApiException {
            return getLocationWithHttpInfo(companyId, locationId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute getLocation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LocationsGetLocationResponse> _callback) throws ApiException {
            return getLocationAsync(companyId, locationId, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Retrieve Location
     * 
     * @param companyId Company ID (required)
     * @param locationId Location ID (required)
     * @return GetLocationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetLocationRequestBuilder getLocation(Long companyId, Long locationId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (locationId == null) throw new IllegalArgumentException("\"locationId\" is required but got null");
        return new GetLocationRequestBuilder(companyId, locationId);
    }
    private okhttp3.Call listGetCall(Long companyId, String xApiVersion, UUID xCompanyGuid, String modifiedSince, Boolean deleted, String cursor, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/locations"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (modifiedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_since", modifiedSince));
        }

        if (deleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleted", deleted));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGetValidateBeforeCall(Long companyId, String xApiVersion, UUID xCompanyGuid, String modifiedSince, Boolean deleted, String cursor, Long limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling listGet(Async)");
        }

        return listGetCall(companyId, xApiVersion, xCompanyGuid, modifiedSince, deleted, cursor, limit, _callback);

    }


    private ApiResponse<LocationsListGetResponse> listGetWithHttpInfo(Long companyId, String xApiVersion, UUID xCompanyGuid, String modifiedSince, Boolean deleted, String cursor, Long limit) throws ApiException {
        okhttp3.Call localVarCall = listGetValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, modifiedSince, deleted, cursor, limit, null);
        Type localVarReturnType = new TypeToken<LocationsListGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listGetAsync(Long companyId, String xApiVersion, UUID xCompanyGuid, String modifiedSince, Boolean deleted, String cursor, Long limit, final ApiCallback<LocationsListGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGetValidateBeforeCall(companyId, xApiVersion, xCompanyGuid, modifiedSince, deleted, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<LocationsListGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListGetRequestBuilder {
        private final Long companyId;
        private String xApiVersion;
        private UUID xCompanyGuid;
        private String modifiedSince;
        private Boolean deleted;
        private String cursor;
        private Long limit;

        private ListGetRequestBuilder(Long companyId) {
            this.companyId = companyId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return ListGetRequestBuilder
         */
        public ListGetRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return ListGetRequestBuilder
         */
        public ListGetRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Set modifiedSince
         * @param modifiedSince Return locations that have been modified since the specified date. Format YYYY-MM-DD (optional)
         * @return ListGetRequestBuilder
         */
        public ListGetRequestBuilder modifiedSince(String modifiedSince) {
            this.modifiedSince = modifiedSince;
            return this;
        }
        
        /**
         * Set deleted
         * @param deleted When TRUE the search will return deleted locations (optional, default to false)
         * @return ListGetRequestBuilder
         */
        public ListGetRequestBuilder deleted(Boolean deleted) {
            this.deleted = deleted;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Cursor for the next or previous page of results. (optional)
         * @return ListGetRequestBuilder
         */
        public ListGetRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The number of results desired per page. (optional, default to 100)
         * @return ListGetRequestBuilder
         */
        public ListGetRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listGetCall(companyId, xApiVersion, xCompanyGuid, modifiedSince, deleted, cursor, limit, _callback);
        }


        /**
         * Execute listGet request
         * @return LocationsListGetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public LocationsListGetResponse execute() throws ApiException {
            ApiResponse<LocationsListGetResponse> localVarResp = listGetWithHttpInfo(companyId, xApiVersion, xCompanyGuid, modifiedSince, deleted, cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listGet request with HTTP info returned
         * @return ApiResponse&lt;LocationsListGetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LocationsListGetResponse> executeWithHttpInfo() throws ApiException {
            return listGetWithHttpInfo(companyId, xApiVersion, xCompanyGuid, modifiedSince, deleted, cursor, limit);
        }

        /**
         * Execute listGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LocationsListGetResponse> _callback) throws ApiException {
            return listGetAsync(companyId, xApiVersion, xCompanyGuid, modifiedSince, deleted, cursor, limit, _callback);
        }
    }

    /**
     * List Locations
     * 
     * @param companyId Company ID (required)
     * @return ListGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListGetRequestBuilder listGet(Long companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        return new ListGetRequestBuilder(companyId);
    }
    private okhttp3.Call removeLocationByIdCall(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/locations/{location_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "location_id" + "}", localVarApiClient.escapeString(locationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeLocationByIdValidateBeforeCall(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling removeLocationById(Async)");
        }

        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling removeLocationById(Async)");
        }

        return removeLocationByIdCall(companyId, locationId, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<Void> removeLocationByIdWithHttpInfo(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = removeLocationByIdValidateBeforeCall(companyId, locationId, xApiVersion, xCompanyGuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeLocationByIdAsync(Long companyId, Long locationId, String xApiVersion, UUID xCompanyGuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeLocationByIdValidateBeforeCall(companyId, locationId, xApiVersion, xCompanyGuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveLocationByIdRequestBuilder {
        private final Long companyId;
        private final Long locationId;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private RemoveLocationByIdRequestBuilder(Long companyId, Long locationId) {
            this.companyId = companyId;
            this.locationId = locationId;
        }

        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return RemoveLocationByIdRequestBuilder
         */
        public RemoveLocationByIdRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return RemoveLocationByIdRequestBuilder
         */
        public RemoveLocationByIdRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for removeLocationById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeLocationByIdCall(companyId, locationId, xApiVersion, xCompanyGuid, _callback);
        }


        /**
         * Execute removeLocationById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeLocationByIdWithHttpInfo(companyId, locationId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute removeLocationById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeLocationByIdWithHttpInfo(companyId, locationId, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute removeLocationById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeLocationByIdAsync(companyId, locationId, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Delete Location
     * 
     * @param companyId Company ID (required)
     * @param locationId Location ID (required)
     * @return RemoveLocationByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveLocationByIdRequestBuilder removeLocationById(Long companyId, Long locationId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (locationId == null) throw new IllegalArgumentException("\"locationId\" is required but got null");
        return new RemoveLocationByIdRequestBuilder(companyId, locationId);
    }
    private okhttp3.Call updateLocationByIdCall(Long companyId, Long locationId, LocationsUpdateLocationByIdRequest locationsUpdateLocationByIdRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = locationsUpdateLocationByIdRequest;

        // create path and map variables
        String localVarPath = "/v2/company/{company_id}/locations/{location_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "location_id" + "}", localVarApiClient.escapeString(locationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        if (xCompanyGuid != null) {
            localVarHeaderParams.put("x-company-guid", localVarApiClient.parameterToString(xCompanyGuid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2", "OAuth2", "cookieAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLocationByIdValidateBeforeCall(Long companyId, Long locationId, LocationsUpdateLocationByIdRequest locationsUpdateLocationByIdRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updateLocationById(Async)");
        }

        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling updateLocationById(Async)");
        }

        // verify the required parameter 'locationsUpdateLocationByIdRequest' is set
        if (locationsUpdateLocationByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'locationsUpdateLocationByIdRequest' when calling updateLocationById(Async)");
        }

        return updateLocationByIdCall(companyId, locationId, locationsUpdateLocationByIdRequest, xApiVersion, xCompanyGuid, _callback);

    }


    private ApiResponse<LocationsUpdateLocationByIdResponse> updateLocationByIdWithHttpInfo(Long companyId, Long locationId, LocationsUpdateLocationByIdRequest locationsUpdateLocationByIdRequest, String xApiVersion, UUID xCompanyGuid) throws ApiException {
        okhttp3.Call localVarCall = updateLocationByIdValidateBeforeCall(companyId, locationId, locationsUpdateLocationByIdRequest, xApiVersion, xCompanyGuid, null);
        Type localVarReturnType = new TypeToken<LocationsUpdateLocationByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateLocationByIdAsync(Long companyId, Long locationId, LocationsUpdateLocationByIdRequest locationsUpdateLocationByIdRequest, String xApiVersion, UUID xCompanyGuid, final ApiCallback<LocationsUpdateLocationByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLocationByIdValidateBeforeCall(companyId, locationId, locationsUpdateLocationByIdRequest, xApiVersion, xCompanyGuid, _callback);
        Type localVarReturnType = new TypeToken<LocationsUpdateLocationByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateLocationByIdRequestBuilder {
        private final Long companyId;
        private final Long locationId;
        private String name;
        private String city;
        private String country;
        private String state;
        private Boolean shiftFeedback;
        private String formattedAddress;
        private Double lat;
        private Double lng;
        private String placeId;
        private String timezone;
        private String hash;
        private Boolean departmentBasedBudget;
        private Boolean holidayPay;
        private String autoSendLogBookTime;
        private String sunHoursClose;
        private String monHoursClose;
        private String tueHoursClose;
        private String wedHoursClose;
        private String thuHoursClose;
        private String friHoursClose;
        private String satHoursClose;
        private String sunHoursOpen;
        private String monHoursOpen;
        private String tueHoursOpen;
        private String wedHoursOpen;
        private String thuHoursOpen;
        private String friHoursOpen;
        private String satHoursOpen;
        private Boolean sunIsClosed;
        private Boolean monIsClosed;
        private Boolean tueIsClosed;
        private Boolean wedIsClosed;
        private Boolean thuIsClosed;
        private Boolean friIsClosed;
        private Boolean satIsClosed;
        private String message;
        private String xApiVersion;
        private UUID xCompanyGuid;

        private UpdateLocationByIdRequestBuilder(Long companyId, Long locationId) {
            this.companyId = companyId;
            this.locationId = locationId;
        }

        /**
         * Set name
         * @param name Location name (optional)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set city
         * @param city City (optional)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set country
         * @param country Country (optional)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set state
         * @param state State or province (optional)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set shiftFeedback
         * @param shiftFeedback If true end of shift feedback requests are enabled (optional, default to false)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder shiftFeedback(Boolean shiftFeedback) {
            this.shiftFeedback = shiftFeedback;
            return this;
        }
        
        /**
         * Set formattedAddress
         * @param formattedAddress  (optional)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder formattedAddress(String formattedAddress) {
            this.formattedAddress = formattedAddress;
            return this;
        }
        
        /**
         * Set lat
         * @param lat  (optional)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder lat(Double lat) {
            this.lat = lat;
            return this;
        }
        
        /**
         * Set lng
         * @param lng  (optional)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder lng(Double lng) {
            this.lng = lng;
            return this;
        }
        
        /**
         * Set placeId
         * @param placeId  (optional)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder placeId(String placeId) {
            this.placeId = placeId;
            return this;
        }
        
        /**
         * Set timezone
         * @param timezone Timezone. Valid zone info name (optional)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder timezone(String timezone) {
            this.timezone = timezone;
            return this;
        }
        
        /**
         * Set hash
         * @param hash  (optional)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder hash(String hash) {
            this.hash = hash;
            return this;
        }
        
        /**
         * Set departmentBasedBudget
         * @param departmentBasedBudget  (optional)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder departmentBasedBudget(Boolean departmentBasedBudget) {
            this.departmentBasedBudget = departmentBasedBudget;
            return this;
        }
        
        /**
         * Set holidayPay
         * @param holidayPay When true, holiday pay is enabled (optional)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder holidayPay(Boolean holidayPay) {
            this.holidayPay = holidayPay;
            return this;
        }
        
        /**
         * Set autoSendLogBookTime
         * @param autoSendLogBookTime A timestamp with hh:mm:ss format (optional)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder autoSendLogBookTime(String autoSendLogBookTime) {
            this.autoSendLogBookTime = autoSendLogBookTime;
            return this;
        }
        
        /**
         * Set sunHoursClose
         * @param sunHoursClose Sunday closing time (optional, default to 00:00:00)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder sunHoursClose(String sunHoursClose) {
            this.sunHoursClose = sunHoursClose;
            return this;
        }
        
        /**
         * Set monHoursClose
         * @param monHoursClose Monday closing time (optional, default to 00:00:00)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder monHoursClose(String monHoursClose) {
            this.monHoursClose = monHoursClose;
            return this;
        }
        
        /**
         * Set tueHoursClose
         * @param tueHoursClose Tuesday closing time (optional, default to 00:00:00)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder tueHoursClose(String tueHoursClose) {
            this.tueHoursClose = tueHoursClose;
            return this;
        }
        
        /**
         * Set wedHoursClose
         * @param wedHoursClose Wednesday closing time (optional, default to 00:00:00)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder wedHoursClose(String wedHoursClose) {
            this.wedHoursClose = wedHoursClose;
            return this;
        }
        
        /**
         * Set thuHoursClose
         * @param thuHoursClose Thursday closing time (optional, default to 00:00:00)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder thuHoursClose(String thuHoursClose) {
            this.thuHoursClose = thuHoursClose;
            return this;
        }
        
        /**
         * Set friHoursClose
         * @param friHoursClose Friday closing time (optional, default to 00:00:00)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder friHoursClose(String friHoursClose) {
            this.friHoursClose = friHoursClose;
            return this;
        }
        
        /**
         * Set satHoursClose
         * @param satHoursClose Saturday closing time (optional, default to 00:00:00)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder satHoursClose(String satHoursClose) {
            this.satHoursClose = satHoursClose;
            return this;
        }
        
        /**
         * Set sunHoursOpen
         * @param sunHoursOpen Sunday opening time (optional, default to 07:00:00)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder sunHoursOpen(String sunHoursOpen) {
            this.sunHoursOpen = sunHoursOpen;
            return this;
        }
        
        /**
         * Set monHoursOpen
         * @param monHoursOpen Monday opening time (optional, default to 07:00:00)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder monHoursOpen(String monHoursOpen) {
            this.monHoursOpen = monHoursOpen;
            return this;
        }
        
        /**
         * Set tueHoursOpen
         * @param tueHoursOpen Tuesday opening time (optional, default to 07:00:00)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder tueHoursOpen(String tueHoursOpen) {
            this.tueHoursOpen = tueHoursOpen;
            return this;
        }
        
        /**
         * Set wedHoursOpen
         * @param wedHoursOpen Wednesday opening time (optional, default to 07:00:00)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder wedHoursOpen(String wedHoursOpen) {
            this.wedHoursOpen = wedHoursOpen;
            return this;
        }
        
        /**
         * Set thuHoursOpen
         * @param thuHoursOpen Thursday opening time (optional, default to 07:00:00)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder thuHoursOpen(String thuHoursOpen) {
            this.thuHoursOpen = thuHoursOpen;
            return this;
        }
        
        /**
         * Set friHoursOpen
         * @param friHoursOpen Friday opening time (optional, default to 07:00:00)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder friHoursOpen(String friHoursOpen) {
            this.friHoursOpen = friHoursOpen;
            return this;
        }
        
        /**
         * Set satHoursOpen
         * @param satHoursOpen Saturday opening time (optional, default to 07:00:00)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder satHoursOpen(String satHoursOpen) {
            this.satHoursOpen = satHoursOpen;
            return this;
        }
        
        /**
         * Set sunIsClosed
         * @param sunIsClosed If true, location is closed on Sunday (optional)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder sunIsClosed(Boolean sunIsClosed) {
            this.sunIsClosed = sunIsClosed;
            return this;
        }
        
        /**
         * Set monIsClosed
         * @param monIsClosed If true, location is closed on Monday (optional)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder monIsClosed(Boolean monIsClosed) {
            this.monIsClosed = monIsClosed;
            return this;
        }
        
        /**
         * Set tueIsClosed
         * @param tueIsClosed If true, location is closed on Tuesday (optional)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder tueIsClosed(Boolean tueIsClosed) {
            this.tueIsClosed = tueIsClosed;
            return this;
        }
        
        /**
         * Set wedIsClosed
         * @param wedIsClosed If true, location is closed on Wednesday (optional)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder wedIsClosed(Boolean wedIsClosed) {
            this.wedIsClosed = wedIsClosed;
            return this;
        }
        
        /**
         * Set thuIsClosed
         * @param thuIsClosed If true, location is closed on Thursday (optional)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder thuIsClosed(Boolean thuIsClosed) {
            this.thuIsClosed = thuIsClosed;
            return this;
        }
        
        /**
         * Set friIsClosed
         * @param friIsClosed If true, location is closed on Friday (optional)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder friIsClosed(Boolean friIsClosed) {
            this.friIsClosed = friIsClosed;
            return this;
        }
        
        /**
         * Set satIsClosed
         * @param satIsClosed If true, location is closed on Saturday (optional)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder satIsClosed(Boolean satIsClosed) {
            this.satIsClosed = satIsClosed;
            return this;
        }
        
        /**
         * Set message
         * @param message Message visible to all employees (optional)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Set xApiVersion
         * @param xApiVersion 7shifts API version (optional)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder xApiVersion(String xApiVersion) {
            this.xApiVersion = xApiVersion;
            return this;
        }
        
        /**
         * Set xCompanyGuid
         * @param xCompanyGuid Company GUID (optional)
         * @return UpdateLocationByIdRequestBuilder
         */
        public UpdateLocationByIdRequestBuilder xCompanyGuid(UUID xCompanyGuid) {
            this.xCompanyGuid = xCompanyGuid;
            return this;
        }
        
        /**
         * Build call for updateLocationById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LocationsUpdateLocationByIdRequest locationsUpdateLocationByIdRequest = buildBodyParams();
            return updateLocationByIdCall(companyId, locationId, locationsUpdateLocationByIdRequest, xApiVersion, xCompanyGuid, _callback);
        }

        private LocationsUpdateLocationByIdRequest buildBodyParams() {
            LocationsUpdateLocationByIdRequest locationsUpdateLocationByIdRequest = new LocationsUpdateLocationByIdRequest();
            locationsUpdateLocationByIdRequest.name(this.name);
            locationsUpdateLocationByIdRequest.city(this.city);
            locationsUpdateLocationByIdRequest.country(this.country);
            locationsUpdateLocationByIdRequest.state(this.state);
            locationsUpdateLocationByIdRequest.shiftFeedback(this.shiftFeedback);
            locationsUpdateLocationByIdRequest.formattedAddress(this.formattedAddress);
            locationsUpdateLocationByIdRequest.lat(this.lat);
            locationsUpdateLocationByIdRequest.lng(this.lng);
            locationsUpdateLocationByIdRequest.placeId(this.placeId);
            locationsUpdateLocationByIdRequest.timezone(this.timezone);
            locationsUpdateLocationByIdRequest.hash(this.hash);
            locationsUpdateLocationByIdRequest.departmentBasedBudget(this.departmentBasedBudget);
            locationsUpdateLocationByIdRequest.holidayPay(this.holidayPay);
            locationsUpdateLocationByIdRequest.autoSendLogBookTime(this.autoSendLogBookTime);
            locationsUpdateLocationByIdRequest.sunHoursClose(this.sunHoursClose);
            locationsUpdateLocationByIdRequest.monHoursClose(this.monHoursClose);
            locationsUpdateLocationByIdRequest.tueHoursClose(this.tueHoursClose);
            locationsUpdateLocationByIdRequest.wedHoursClose(this.wedHoursClose);
            locationsUpdateLocationByIdRequest.thuHoursClose(this.thuHoursClose);
            locationsUpdateLocationByIdRequest.friHoursClose(this.friHoursClose);
            locationsUpdateLocationByIdRequest.satHoursClose(this.satHoursClose);
            locationsUpdateLocationByIdRequest.sunHoursOpen(this.sunHoursOpen);
            locationsUpdateLocationByIdRequest.monHoursOpen(this.monHoursOpen);
            locationsUpdateLocationByIdRequest.tueHoursOpen(this.tueHoursOpen);
            locationsUpdateLocationByIdRequest.wedHoursOpen(this.wedHoursOpen);
            locationsUpdateLocationByIdRequest.thuHoursOpen(this.thuHoursOpen);
            locationsUpdateLocationByIdRequest.friHoursOpen(this.friHoursOpen);
            locationsUpdateLocationByIdRequest.satHoursOpen(this.satHoursOpen);
            locationsUpdateLocationByIdRequest.sunIsClosed(this.sunIsClosed);
            locationsUpdateLocationByIdRequest.monIsClosed(this.monIsClosed);
            locationsUpdateLocationByIdRequest.tueIsClosed(this.tueIsClosed);
            locationsUpdateLocationByIdRequest.wedIsClosed(this.wedIsClosed);
            locationsUpdateLocationByIdRequest.thuIsClosed(this.thuIsClosed);
            locationsUpdateLocationByIdRequest.friIsClosed(this.friIsClosed);
            locationsUpdateLocationByIdRequest.satIsClosed(this.satIsClosed);
            locationsUpdateLocationByIdRequest.message(this.message);
            return locationsUpdateLocationByIdRequest;
        }

        /**
         * Execute updateLocationById request
         * @return LocationsUpdateLocationByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public LocationsUpdateLocationByIdResponse execute() throws ApiException {
            LocationsUpdateLocationByIdRequest locationsUpdateLocationByIdRequest = buildBodyParams();
            ApiResponse<LocationsUpdateLocationByIdResponse> localVarResp = updateLocationByIdWithHttpInfo(companyId, locationId, locationsUpdateLocationByIdRequest, xApiVersion, xCompanyGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateLocationById request with HTTP info returned
         * @return ApiResponse&lt;LocationsUpdateLocationByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LocationsUpdateLocationByIdResponse> executeWithHttpInfo() throws ApiException {
            LocationsUpdateLocationByIdRequest locationsUpdateLocationByIdRequest = buildBodyParams();
            return updateLocationByIdWithHttpInfo(companyId, locationId, locationsUpdateLocationByIdRequest, xApiVersion, xCompanyGuid);
        }

        /**
         * Execute updateLocationById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LocationsUpdateLocationByIdResponse> _callback) throws ApiException {
            LocationsUpdateLocationByIdRequest locationsUpdateLocationByIdRequest = buildBodyParams();
            return updateLocationByIdAsync(companyId, locationId, locationsUpdateLocationByIdRequest, xApiVersion, xCompanyGuid, _callback);
        }
    }

    /**
     * Update Location
     * 
     * @param companyId Company ID (required)
     * @param locationId Location ID (required)
     * @param locationsUpdateLocationByIdRequest  (required)
     * @return UpdateLocationByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateLocationByIdRequestBuilder updateLocationById(Long companyId, Long locationId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
        if (locationId == null) throw new IllegalArgumentException("\"locationId\" is required but got null");
        return new UpdateLocationByIdRequestBuilder(companyId, locationId);
    }
}
