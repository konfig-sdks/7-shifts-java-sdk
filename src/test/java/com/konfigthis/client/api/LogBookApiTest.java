/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.LogBookCreateCategoryRequest;
import com.konfigthis.client.model.LogBookCreateCategoryResponse;
import com.konfigthis.client.model.LogBookCreateCommentRequest;
import com.konfigthis.client.model.LogBookCreateCommentResponse;
import com.konfigthis.client.model.LogBookCreatePostRequest;
import com.konfigthis.client.model.LogBookCreatePostRequestAttachmentsInner;
import com.konfigthis.client.model.LogBookCreatePostResponse;
import com.konfigthis.client.model.LogBookGetCommentResponse;
import com.konfigthis.client.model.LogBookGetPostResponse;
import com.konfigthis.client.model.LogBookListCategoriesResponse;
import com.konfigthis.client.model.LogBookListCommentsResponse;
import com.konfigthis.client.model.LogBookListPostsResponse;
import com.konfigthis.client.model.LogBookUpdateCategoryByIdRequest;
import com.konfigthis.client.model.LogBookUpdateCategoryByIdResponse;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LogBookApi
 */
@Disabled
public class LogBookApiTest {

    private static LogBookApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new LogBookApi(apiClient);
    }

    /**
     * Create Log Book Category
     *
     * Beta
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCategoryTest() throws ApiException {
        String name = null;
        Long companyId = null;
        Integer col = null;
        Integer sort = null;
        String fieldType = null;
        Boolean notify = null;
        Boolean required = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        LogBookCreateCategoryResponse response = api.createCategory(name, companyId)
                .col(col)
                .sort(sort)
                .fieldType(fieldType)
                .notify(notify)
                .required(required)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Log Book Comment
     *
     * Beta
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCommentTest() throws ApiException {
        Long logBookId = null;
        String message = null;
        Long companyId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        LogBookCreateCommentResponse response = api.createComment(logBookId, message, companyId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Log Book Post
     *
     * Beta
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPostTest() throws ApiException {
        Long locationId = null;
        Long logBookCategoryId = null;
        String date = null;
        String message = null;
        Long companyId = null;
        List<LogBookCreatePostRequestAttachmentsInner> attachments = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        LogBookCreatePostResponse response = api.createPost(locationId, logBookCategoryId, date, message, companyId)
                .attachments(attachments)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Log Book Category
     *
     * Beta
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCategoryByIdTest() throws ApiException {
        Long companyId = null;
        Long id = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        api.deleteCategoryById(companyId, id)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Log Book Comment
     *
     * Beta
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCommentTest() throws ApiException {
        Long companyId = null;
        Long id = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        api.deleteComment(companyId, id)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Log Book Post
     *
     * Beta
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePostTest() throws ApiException {
        Long companyId = null;
        Long id = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        api.deletePost(companyId, id)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Log Book Comment
     *
     * Beta
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommentTest() throws ApiException {
        Long companyId = null;
        Long id = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        LogBookGetCommentResponse response = api.getComment(companyId, id)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Log Book Post
     *
     * Beta
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPostTest() throws ApiException {
        Long companyId = null;
        Long id = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        LogBookGetPostResponse response = api.getPost(companyId, id)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * List Log Book Categories
     *
     * Beta
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCategoriesTest() throws ApiException {
        Long companyId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        LogBookListCategoriesResponse response = api.listCategories(companyId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * List Log Book Comments
     *
     * Beta
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCommentsTest() throws ApiException {
        Long companyId = null;
        List<Long> logBookIds = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        LogBookListCommentsResponse response = api.listComments(companyId, logBookIds)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * List Log Book Posts
     *
     * Beta
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPostsTest() throws ApiException {
        Long companyId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        Long locationId = null;
        Long logBookCategoryId = null;
        Long userId = null;
        String date = null;
        String postedDateGte = null;
        String postedDateLte = null;
        String message = null;
        String orderField = null;
        String orderDir = null;
        String cursor = null;
        Long limit = null;
        LogBookListPostsResponse response = api.listPosts(companyId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .locationId(locationId)
                .logBookCategoryId(logBookCategoryId)
                .userId(userId)
                .date(date)
                .postedDateGte(postedDateGte)
                .postedDateLte(postedDateLte)
                .message(message)
                .orderField(orderField)
                .orderDir(orderDir)
                .cursor(cursor)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Log Book Category
     *
     * Beta
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCategoryByIdTest() throws ApiException {
        Long companyId = null;
        Long id = null;
        String name = null;
        Integer col = null;
        Integer sort = null;
        String fieldType = null;
        Boolean notify = null;
        Boolean required = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        LogBookUpdateCategoryByIdResponse response = api.updateCategoryById(companyId, id)
                .name(name)
                .col(col)
                .sort(sort)
                .fieldType(fieldType)
                .notify(notify)
                .required(required)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

}
