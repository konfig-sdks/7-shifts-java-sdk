/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.time.LocalDate;
import com.konfigthis.client.model.ScheduleEventsCreateEventRequest;
import com.konfigthis.client.model.ScheduleEventsCreateEventResponse;
import com.konfigthis.client.model.ScheduleEventsDeleteEventResponse;
import com.konfigthis.client.model.ScheduleEventsGetEventByIdResponse;
import com.konfigthis.client.model.ScheduleEventsListEventsResponse;
import com.konfigthis.client.model.ScheduleEventsUpdateEventByIdRequest;
import com.konfigthis.client.model.ScheduleEventsUpdateEventByIdResponse;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ScheduleEventsApi
 */
@Disabled
public class ScheduleEventsApiTest {

    private static ScheduleEventsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ScheduleEventsApi(apiClient);
    }

    /**
     * Create Event
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEventTest() throws ApiException {
        String title = null;
        List<Integer> locationIds = null;
        String startDate = null;
        String startTime = null;
        String endDate = null;
        String endTime = null;
        Boolean isMultiDay = null;
        Long companyId = null;
        String description = null;
        String color = null;
        String recurrence = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        ScheduleEventsCreateEventResponse response = api.createEvent(title, locationIds, startDate, startTime, endDate, endTime, isMultiDay, companyId)
                .description(description)
                .color(color)
                .recurrence(recurrence)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Event
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEventTest() throws ApiException {
        Long companyId = null;
        Long eventId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        String recurrenceTarget = null;
        String startDate = null;
        ScheduleEventsDeleteEventResponse response = api.deleteEvent(companyId, eventId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .recurrenceTarget(recurrenceTarget)
                .startDate(startDate)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Event
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventByIdTest() throws ApiException {
        Long companyId = null;
        Long eventId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        ScheduleEventsGetEventByIdResponse response = api.getEventById(companyId, eventId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * List Events
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEventsTest() throws ApiException {
        Long companyId = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        Long locationId = null;
        ScheduleEventsListEventsResponse response = api.listEvents(companyId, startDate, endDate)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .locationId(locationId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Event
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEventByIdTest() throws ApiException {
        Long companyId = null;
        Long eventId = null;
        String title = null;
        String description = null;
        List<Integer> locationIds = null;
        String startDate = null;
        String startTime = null;
        String endDate = null;
        String endTime = null;
        String color = null;
        Boolean isMultiDay = null;
        String recurrence = null;
        String recurrenceTarget = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        ScheduleEventsUpdateEventByIdResponse response = api.updateEventById(companyId, eventId)
                .title(title)
                .description(description)
                .locationIds(locationIds)
                .startDate(startDate)
                .startTime(startTime)
                .endDate(endDate)
                .endTime(endTime)
                .color(color)
                .isMultiDay(isMultiDay)
                .recurrence(recurrence)
                .recurrenceTarget(recurrenceTarget)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

}
