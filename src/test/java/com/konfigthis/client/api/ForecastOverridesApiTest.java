/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ForecastOverridesBulkCreateProjectedForecastOverrideRequest;
import com.konfigthis.client.model.ForecastOverridesBulkCreateProjectedForecastOverrideRequestDataInner;
import com.konfigthis.client.model.ForecastOverridesBulkCreateProjectedForecastOverrideResponse;
import com.konfigthis.client.model.ForecastOverridesBulkCreateProjectedSalesIntervalOverrideRequestInner;
import com.konfigthis.client.model.ForecastOverridesCreateDailyProjectedForecastOverrideRequest;
import com.konfigthis.client.model.ForecastOverridesCreateDailyProjectedForecastOverrideResponse;
import com.konfigthis.client.model.ForecastOverridesOverrideIntervalRequest;
import com.konfigthis.client.model.ForecastOverridesSyncProjectedForecastOverrideRequest;
import com.konfigthis.client.model.ForecastOverridesSyncProjectedSalesIntervalRequest;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ForecastOverridesApi
 */
@Disabled
public class ForecastOverridesApiTest {

    private static ForecastOverridesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ForecastOverridesApi(apiClient);
    }

    /**
     * Create Bulk Daily Projected Forecast Overrides
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bulkCreateProjectedForecastOverrideTest() throws ApiException {
        List<ForecastOverridesBulkCreateProjectedForecastOverrideRequestDataInner> data = null;
        Long companyId = null;
        Long locationId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        ForecastOverridesBulkCreateProjectedForecastOverrideResponse response = api.bulkCreateProjectedForecastOverride(data, companyId, locationId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Bulk Daily Projected Forecast Overrides
     *
     * Overrides many project sales intervals of 15 minutes or 1 hour. (In Development)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bulkCreateProjectedSalesIntervalOverrideTest() throws ApiException {
        Long companyId = null;
        Long locationId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        api.bulkCreateProjectedSalesIntervalOverride(companyId, locationId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Daily Projected Forecast Override
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDailyProjectedForecastOverrideTest() throws ApiException {
        LocalDate date = null;
        Long value = null;
        String reportType = null;
        Long companyId = null;
        Long locationId = null;
        Integer departmentId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        ForecastOverridesCreateDailyProjectedForecastOverrideResponse response = api.createDailyProjectedForecastOverride(date, value, reportType, companyId, locationId)
                .departmentId(departmentId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Interval Projected Forecast Override
     *
     * Overrides the project sales interval of 15 minutes or 1 hour.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void overrideIntervalTest() throws ApiException {
        OffsetDateTime start = null;
        OffsetDateTime end = null;
        Long value = null;
        Long companyId = null;
        Long locationId = null;
        Integer departmentId = null;
        String reportType = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        api.overrideInterval(start, end, value, companyId, locationId)
                .departmentId(departmentId)
                .reportType(reportType)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Sync Daily Projected Forecast Override
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncProjectedForecastOverrideTest() throws ApiException {
        LocalDate startDate = null;
        String reportType = null;
        Long companyId = null;
        Long locationId = null;
        LocalDate endDate = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        api.syncProjectedForecastOverride(startDate, reportType, companyId, locationId)
                .endDate(endDate)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Sync Interval Projected Forecast Override
     *
     * Syncs the overridden project sales interval of 15 minutes or 1 hour.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncProjectedSalesIntervalTest() throws ApiException {
        OffsetDateTime start = null;
        OffsetDateTime end = null;
        Long companyId = null;
        Long locationId = null;
        String reportType = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        api.syncProjectedSalesInterval(start, end, companyId, locationId)
                .reportType(reportType)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

}
