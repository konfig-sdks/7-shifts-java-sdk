/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ExternalUserMappingsCreateBulkMappingsRequest;
import com.konfigthis.client.model.ExternalUserMappingsCreateBulkMappingsRequestDataInner;
import com.konfigthis.client.model.ExternalUserMappingsCreateBulkMappingsResponse;
import com.konfigthis.client.model.ExternalUserMappingsCreateMappingRequest;
import com.konfigthis.client.model.ExternalUserMappingsCreateMappingResponse;
import com.konfigthis.client.model.ExternalUserMappingsGetMappingByIdResponse;
import com.konfigthis.client.model.ExternalUserMappingsListResponse;
import com.konfigthis.client.model.ExternalUserMappingsUpdateMappingByIdentifierRequest;
import com.konfigthis.client.model.ExternalUserMappingsUpdateMappingByIdentifierResponse;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExternalUserMappingsApi
 */
@Disabled
public class ExternalUserMappingsApiTest {

    private static ExternalUserMappingsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ExternalUserMappingsApi(apiClient);
    }

    /**
     * Create User External Mappings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBulkMappingsTest() throws ApiException {
        List<ExternalUserMappingsCreateBulkMappingsRequestDataInner> data = null;
        Long companyId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        Long locationId = null;
        ExternalUserMappingsCreateBulkMappingsResponse response = api.createBulkMappings(data, companyId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .locationId(locationId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create External User Mapping
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMappingTest() throws ApiException {
        Integer userId = null;
        String externalUserId = null;
        Long companyId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        Long locationId = null;
        ExternalUserMappingsCreateMappingResponse response = api.createMapping(userId, externalUserId, companyId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .locationId(locationId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete External User Mapping
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMappingTest() throws ApiException {
        Long companyId = null;
        String identifier = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        Long locationId = null;
        api.deleteMapping(companyId, identifier)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .locationId(locationId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve User External Mapping
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMappingByIdTest() throws ApiException {
        Long companyId = null;
        String identifier = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        Long locationId = null;
        ExternalUserMappingsGetMappingByIdResponse response = api.getMappingById(companyId, identifier)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .locationId(locationId)
                .execute();
        // TODO: test validations
    }

    /**
     * List External User Mapping
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        Long companyId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        Long locationId = null;
        Long userId = null;
        String externalUserId = null;
        String modifiedSince = null;
        String cursor = null;
        Long limit = null;
        ExternalUserMappingsListResponse response = api.list(companyId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .locationId(locationId)
                .userId(userId)
                .externalUserId(externalUserId)
                .modifiedSince(modifiedSince)
                .cursor(cursor)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Update External User Mappings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMappingByIdentifierTest() throws ApiException {
        Long companyId = null;
        String identifier = null;
        Integer userId = null;
        String externalUserId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        Long locationId = null;
        ExternalUserMappingsUpdateMappingByIdentifierResponse response = api.updateMappingByIdentifier(companyId, identifier)
                .userId(userId)
                .externalUserId(externalUserId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .locationId(locationId)
                .execute();
        // TODO: test validations
    }

}
