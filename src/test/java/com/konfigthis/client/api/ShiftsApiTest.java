/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.ShiftsCreateNewShiftRequest;
import com.konfigthis.client.model.ShiftsCreateNewShiftRequestBreaksInner;
import com.konfigthis.client.model.ShiftsCreateNewShiftResponse;
import com.konfigthis.client.model.ShiftsGetShiftByIdResponse;
import com.konfigthis.client.model.ShiftsListResponse;
import com.konfigthis.client.model.ShiftsUpdateShiftByIdRequest;
import com.konfigthis.client.model.ShiftsUpdateShiftByIdRequestBreaksInner;
import com.konfigthis.client.model.ShiftsUpdateShiftByIdResponse;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ShiftsApi
 */
@Disabled
public class ShiftsApiTest {

    private static ShiftsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ShiftsApi(apiClient);
    }

    /**
     * Create Shift
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewShiftTest() throws ApiException {
        Integer locationId = null;
        OffsetDateTime start = null;
        OffsetDateTime end = null;
        Long companyId = null;
        Integer userId = null;
        Integer departmentId = null;
        Integer roleId = null;
        Integer stationId = null;
        Boolean close = null;
        Boolean businessDecline = null;
        String notes = null;
        Boolean draft = null;
        Boolean notified = null;
        Boolean open = null;
        Integer openOfferType = null;
        Boolean unassigned = null;
        Integer unassignedSkillLevel = null;
        Integer status = null;
        Integer lateMinutes = null;
        List<ShiftsCreateNewShiftRequestBreaksInner> breaks = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        ShiftsCreateNewShiftResponse response = api.createNewShift(locationId, start, end, companyId)
                .userId(userId)
                .departmentId(departmentId)
                .roleId(roleId)
                .stationId(stationId)
                .close(close)
                .businessDecline(businessDecline)
                .notes(notes)
                .draft(draft)
                .notified(notified)
                .open(open)
                .openOfferType(openOfferType)
                .unassigned(unassigned)
                .unassignedSkillLevel(unassignedSkillLevel)
                .status(status)
                .lateMinutes(lateMinutes)
                .breaks(breaks)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Shift
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteShiftByIdTest() throws ApiException {
        Long companyId = null;
        Long shiftId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        api.deleteShiftById(companyId, shiftId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Shift
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getShiftByIdTest() throws ApiException {
        Long companyId = null;
        Long shiftId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        Boolean includeDeleted = null;
        ShiftsGetShiftByIdResponse response = api.getShiftById(companyId, shiftId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .includeDeleted(includeDeleted)
                .execute();
        // TODO: test validations
    }

    /**
     * List Shifts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        Long companyId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        String cursor = null;
        Long limit = null;
        Long locationId = null;
        List<Integer> shiftIds = null;
        Long departmentId = null;
        List<Integer> departmentIds = null;
        Long roleId = null;
        Long userId = null;
        OffsetDateTime startLte = null;
        OffsetDateTime startGte = null;
        OffsetDateTime endLte = null;
        OffsetDateTime endGte = null;
        Boolean deleted = null;
        Boolean draft = null;
        Boolean includeDraft = null;
        Boolean open = null;
        OffsetDateTime modifiedSince = null;
        String sortBy = null;
        String sortDir = null;
        ShiftsListResponse response = api.list(companyId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .cursor(cursor)
                .limit(limit)
                .locationId(locationId)
                .shiftIds(shiftIds)
                .departmentId(departmentId)
                .departmentIds(departmentIds)
                .roleId(roleId)
                .userId(userId)
                .startLte(startLte)
                .startGte(startGte)
                .endLte(endLte)
                .endGte(endGte)
                .deleted(deleted)
                .draft(draft)
                .includeDraft(includeDraft)
                .open(open)
                .modifiedSince(modifiedSince)
                .sortBy(sortBy)
                .sortDir(sortDir)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Shift
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateShiftByIdTest() throws ApiException {
        Long companyId = null;
        Long shiftId = null;
        Integer locationId = null;
        Integer userId = null;
        Integer departmentId = null;
        Integer roleId = null;
        Integer stationId = null;
        OffsetDateTime start = null;
        OffsetDateTime end = null;
        Boolean close = null;
        Boolean businessDecline = null;
        String notes = null;
        Boolean draft = null;
        Boolean open = null;
        Integer openOfferType = null;
        Boolean unassigned = null;
        Integer unassignedSkillLevel = null;
        Integer status = null;
        Integer lateMinutes = null;
        List<ShiftsUpdateShiftByIdRequestBreaksInner> breaks = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        ShiftsUpdateShiftByIdResponse response = api.updateShiftById(companyId, shiftId)
                .locationId(locationId)
                .userId(userId)
                .departmentId(departmentId)
                .roleId(roleId)
                .stationId(stationId)
                .start(start)
                .end(end)
                .close(close)
                .businessDecline(businessDecline)
                .notes(notes)
                .draft(draft)
                .open(open)
                .openOfferType(openOfferType)
                .unassigned(unassigned)
                .unassignedSkillLevel(unassignedSkillLevel)
                .status(status)
                .lateMinutes(lateMinutes)
                .breaks(breaks)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

}
