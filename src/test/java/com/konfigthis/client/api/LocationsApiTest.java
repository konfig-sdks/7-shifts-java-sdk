/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.LocationsCreateRequest;
import com.konfigthis.client.model.LocationsCreateResponse;
import com.konfigthis.client.model.LocationsGetLocationResponse;
import com.konfigthis.client.model.LocationsListGetResponse;
import com.konfigthis.client.model.LocationsUpdateLocationByIdRequest;
import com.konfigthis.client.model.LocationsUpdateLocationByIdResponse;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LocationsApi
 */
@Disabled
public class LocationsApiTest {

    private static LocationsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new LocationsApi(apiClient);
    }

    /**
     * Create Location
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        String name = null;
        String country = null;
        Long companyId = null;
        String formattedAddress = null;
        String state = null;
        String city = null;
        String latitude = null;
        String longitude = null;
        String placeId = null;
        String timezone = null;
        Boolean holidayPay = null;
        String sunHoursClose = null;
        String monHoursClose = null;
        String tueHoursClose = null;
        String wedHoursClose = null;
        String thuHoursClose = null;
        String friHoursClose = null;
        String satHoursClose = null;
        String sunHoursOpen = null;
        String monHoursOpen = null;
        String tueHoursOpen = null;
        String wedHoursOpen = null;
        String thuHoursOpen = null;
        String friHoursOpen = null;
        String satHoursOpen = null;
        Boolean sunIsClosed = null;
        Boolean monIsClosed = null;
        Boolean tueIsClosed = null;
        Boolean wedIsClosed = null;
        Boolean thuIsClosed = null;
        Boolean friIsClosed = null;
        Boolean satIsClosed = null;
        Boolean enableShiftFeedback = null;
        Boolean shiftFeedback = null;
        String coupon = null;
        String stripeTokenId = null;
        Integer copyFromId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        LocationsCreateResponse response = api.create(name, country, companyId)
                .formattedAddress(formattedAddress)
                .state(state)
                .city(city)
                .latitude(latitude)
                .longitude(longitude)
                .placeId(placeId)
                .timezone(timezone)
                .holidayPay(holidayPay)
                .sunHoursClose(sunHoursClose)
                .monHoursClose(monHoursClose)
                .tueHoursClose(tueHoursClose)
                .wedHoursClose(wedHoursClose)
                .thuHoursClose(thuHoursClose)
                .friHoursClose(friHoursClose)
                .satHoursClose(satHoursClose)
                .sunHoursOpen(sunHoursOpen)
                .monHoursOpen(monHoursOpen)
                .tueHoursOpen(tueHoursOpen)
                .wedHoursOpen(wedHoursOpen)
                .thuHoursOpen(thuHoursOpen)
                .friHoursOpen(friHoursOpen)
                .satHoursOpen(satHoursOpen)
                .sunIsClosed(sunIsClosed)
                .monIsClosed(monIsClosed)
                .tueIsClosed(tueIsClosed)
                .wedIsClosed(wedIsClosed)
                .thuIsClosed(thuIsClosed)
                .friIsClosed(friIsClosed)
                .satIsClosed(satIsClosed)
                .enableShiftFeedback(enableShiftFeedback)
                .shiftFeedback(shiftFeedback)
                .coupon(coupon)
                .stripeTokenId(stripeTokenId)
                .copyFromId(copyFromId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Location
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLocationTest() throws ApiException {
        Long companyId = null;
        Long locationId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        LocationsGetLocationResponse response = api.getLocation(companyId, locationId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * List Locations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGetTest() throws ApiException {
        Long companyId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        String modifiedSince = null;
        Boolean deleted = null;
        String cursor = null;
        Long limit = null;
        LocationsListGetResponse response = api.listGet(companyId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .modifiedSince(modifiedSince)
                .deleted(deleted)
                .cursor(cursor)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Location
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeLocationByIdTest() throws ApiException {
        Long companyId = null;
        Long locationId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        api.removeLocationById(companyId, locationId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Location
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLocationByIdTest() throws ApiException {
        Long companyId = null;
        Long locationId = null;
        String name = null;
        String city = null;
        String country = null;
        String state = null;
        Boolean shiftFeedback = null;
        String formattedAddress = null;
        Double lat = null;
        Double lng = null;
        String placeId = null;
        String timezone = null;
        String hash = null;
        Boolean departmentBasedBudget = null;
        Boolean holidayPay = null;
        String autoSendLogBookTime = null;
        String sunHoursClose = null;
        String monHoursClose = null;
        String tueHoursClose = null;
        String wedHoursClose = null;
        String thuHoursClose = null;
        String friHoursClose = null;
        String satHoursClose = null;
        String sunHoursOpen = null;
        String monHoursOpen = null;
        String tueHoursOpen = null;
        String wedHoursOpen = null;
        String thuHoursOpen = null;
        String friHoursOpen = null;
        String satHoursOpen = null;
        Boolean sunIsClosed = null;
        Boolean monIsClosed = null;
        Boolean tueIsClosed = null;
        Boolean wedIsClosed = null;
        Boolean thuIsClosed = null;
        Boolean friIsClosed = null;
        Boolean satIsClosed = null;
        String message = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        LocationsUpdateLocationByIdResponse response = api.updateLocationById(companyId, locationId)
                .name(name)
                .city(city)
                .country(country)
                .state(state)
                .shiftFeedback(shiftFeedback)
                .formattedAddress(formattedAddress)
                .lat(lat)
                .lng(lng)
                .placeId(placeId)
                .timezone(timezone)
                .hash(hash)
                .departmentBasedBudget(departmentBasedBudget)
                .holidayPay(holidayPay)
                .autoSendLogBookTime(autoSendLogBookTime)
                .sunHoursClose(sunHoursClose)
                .monHoursClose(monHoursClose)
                .tueHoursClose(tueHoursClose)
                .wedHoursClose(wedHoursClose)
                .thuHoursClose(thuHoursClose)
                .friHoursClose(friHoursClose)
                .satHoursClose(satHoursClose)
                .sunHoursOpen(sunHoursOpen)
                .monHoursOpen(monHoursOpen)
                .tueHoursOpen(tueHoursOpen)
                .wedHoursOpen(wedHoursOpen)
                .thuHoursOpen(thuHoursOpen)
                .friHoursOpen(friHoursOpen)
                .satHoursOpen(satHoursOpen)
                .sunIsClosed(sunIsClosed)
                .monIsClosed(monIsClosed)
                .tueIsClosed(tueIsClosed)
                .wedIsClosed(wedIsClosed)
                .thuIsClosed(thuIsClosed)
                .friIsClosed(friIsClosed)
                .satIsClosed(satIsClosed)
                .message(message)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

}
