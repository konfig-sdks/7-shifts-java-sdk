/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AvailabilityCreateNewRequest;
import com.konfigthis.client.model.AvailabilityCreateNewResponse;
import com.konfigthis.client.model.AvailabilityCreateReasonRequest;
import com.konfigthis.client.model.AvailabilityCreateReasonResponse;
import com.konfigthis.client.model.AvailabilityGetByIdResponse;
import com.konfigthis.client.model.AvailabilityListAvailabilitiesResponse;
import com.konfigthis.client.model.AvailabilityListReasonsResponse;
import com.konfigthis.client.model.AvailabilityUpdateByIdRequest;
import com.konfigthis.client.model.AvailabilityUpdateByIdResponse;
import com.konfigthis.client.model.AvailabilityUpdateReasonByIdRequest;
import com.konfigthis.client.model.AvailabilityUpdateReasonByIdResponse;
import com.konfigthis.client.model.AvailabilityUpdateStatusRequest;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AvailabilityApi
 */
@Disabled
public class AvailabilityApiTest {

    private static AvailabilityApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AvailabilityApi(apiClient);
    }

    /**
     * Create Availability
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewTest() throws ApiException {
        Integer userId = null;
        Boolean repeat = null;
        Integer mon = null;
        String monFrom = null;
        String monTo = null;
        String monComments = null;
        String monReason = null;
        Integer tue = null;
        String tueFrom = null;
        String tueTo = null;
        String tueComments = null;
        String tueReason = null;
        Integer wed = null;
        String wedFrom = null;
        String wedTo = null;
        String wedComments = null;
        String wedReason = null;
        Integer thu = null;
        String thuFrom = null;
        String thuTo = null;
        String thuComments = null;
        String thuReason = null;
        Integer fri = null;
        String friFrom = null;
        String friTo = null;
        String friComments = null;
        String friReason = null;
        Integer sat = null;
        String satFrom = null;
        String satTo = null;
        String satComments = null;
        String satReason = null;
        Integer sun = null;
        String sunFrom = null;
        String sunTo = null;
        String sunComments = null;
        String sunReason = null;
        Long companyId = null;
        String week = null;
        String weekTo = null;
        AvailabilityCreateNewResponse response = api.createNew(userId, repeat, mon, monFrom, monTo, monComments, monReason, tue, tueFrom, tueTo, tueComments, tueReason, wed, wedFrom, wedTo, wedComments, wedReason, thu, thuFrom, thuTo, thuComments, thuReason, fri, friFrom, friTo, friComments, friReason, sat, satFrom, satTo, satComments, satReason, sun, sunFrom, sunTo, sunComments, sunReason, companyId)
                .week(week)
                .weekTo(weekTo)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Availability Reason
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReasonTest() throws ApiException {
        String reason = null;
        Long companyId = null;
        Boolean commentsRequired = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        AvailabilityCreateReasonResponse response = api.createReason(reason, companyId)
                .commentsRequired(commentsRequired)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Availability Reason
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteReasonTest() throws ApiException {
        Long companyId = null;
        Long availabilityReasonId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        api.deleteReason(companyId, availabilityReasonId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Availability
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        Long companyId = null;
        Long availabilityId = null;
        AvailabilityGetByIdResponse response = api.getById(companyId, availabilityId)
                .execute();
        // TODO: test validations
    }

    /**
     * List Availabilities
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAvailabilitiesTest() throws ApiException {
        Long companyId = null;
        String cursor = null;
        Long limit = null;
        Long locationId = null;
        Long userId = null;
        Long status = null;
        Boolean repeating = null;
        String weekGte = null;
        String weekToIncludeRepeatingGte = null;
        String orderField = null;
        String orderDir = null;
        AvailabilityListAvailabilitiesResponse response = api.listAvailabilities(companyId)
                .cursor(cursor)
                .limit(limit)
                .locationId(locationId)
                .userId(userId)
                .status(status)
                .repeating(repeating)
                .weekGte(weekGte)
                .weekToIncludeRepeatingGte(weekToIncludeRepeatingGte)
                .orderField(orderField)
                .orderDir(orderDir)
                .execute();
        // TODO: test validations
    }

    /**
     * List Availability Reasons
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listReasonsTest() throws ApiException {
        Long companyId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        String cursor = null;
        Long limit = null;
        AvailabilityListReasonsResponse response = api.listReasons(companyId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .cursor(cursor)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Availability
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeByIdTest() throws ApiException {
        Long companyId = null;
        Long availabilityId = null;
        api.removeById(companyId, availabilityId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Availability
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByIdTest() throws ApiException {
        Long companyId = null;
        Long availabilityId = null;
        String week = null;
        String weekTo = null;
        Boolean repeat = null;
        Integer mon = null;
        String monFrom = null;
        String monTo = null;
        String monComments = null;
        String monReason = null;
        Integer tue = null;
        String tueFrom = null;
        String tueTo = null;
        String tueComments = null;
        String tueReason = null;
        Integer wed = null;
        String wedFrom = null;
        String wedTo = null;
        String wedComments = null;
        String wedReason = null;
        Integer thu = null;
        String thuFrom = null;
        String thuTo = null;
        String thuComments = null;
        String thuReason = null;
        Integer fri = null;
        String friFrom = null;
        String friTo = null;
        String friComments = null;
        String friReason = null;
        Integer sat = null;
        String satFrom = null;
        String satTo = null;
        String satComments = null;
        String satReason = null;
        Integer sun = null;
        String sunFrom = null;
        String sunTo = null;
        String sunComments = null;
        String sunReason = null;
        AvailabilityUpdateByIdResponse response = api.updateById(companyId, availabilityId)
                .week(week)
                .weekTo(weekTo)
                .repeat(repeat)
                .mon(mon)
                .monFrom(monFrom)
                .monTo(monTo)
                .monComments(monComments)
                .monReason(monReason)
                .tue(tue)
                .tueFrom(tueFrom)
                .tueTo(tueTo)
                .tueComments(tueComments)
                .tueReason(tueReason)
                .wed(wed)
                .wedFrom(wedFrom)
                .wedTo(wedTo)
                .wedComments(wedComments)
                .wedReason(wedReason)
                .thu(thu)
                .thuFrom(thuFrom)
                .thuTo(thuTo)
                .thuComments(thuComments)
                .thuReason(thuReason)
                .fri(fri)
                .friFrom(friFrom)
                .friTo(friTo)
                .friComments(friComments)
                .friReason(friReason)
                .sat(sat)
                .satFrom(satFrom)
                .satTo(satTo)
                .satComments(satComments)
                .satReason(satReason)
                .sun(sun)
                .sunFrom(sunFrom)
                .sunTo(sunTo)
                .sunComments(sunComments)
                .sunReason(sunReason)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Availability Reason
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateReasonByIdTest() throws ApiException {
        String reason = null;
        Long companyId = null;
        Long availabilityReasonId = null;
        Boolean commentsRequired = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        AvailabilityUpdateReasonByIdResponse response = api.updateReasonById(reason, companyId, availabilityReasonId)
                .commentsRequired(commentsRequired)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Availability Status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStatusTest() throws ApiException {
        String status = null;
        Long companyId = null;
        Long availabilityId = null;
        String message = null;
        api.updateStatus(status, companyId, availabilityId)
                .message(message)
                .execute();
        // TODO: test validations
    }

}
