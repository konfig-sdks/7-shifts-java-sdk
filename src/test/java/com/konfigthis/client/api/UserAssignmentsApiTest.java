/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.util.UUID;
import com.konfigthis.client.model.UserAssignmentsCreateDepartmentAssignmentRequest;
import com.konfigthis.client.model.UserAssignmentsCreateDepartmentAssignmentResponse;
import com.konfigthis.client.model.UserAssignmentsCreateLocationAssignmentRequest;
import com.konfigthis.client.model.UserAssignmentsCreateLocationAssignmentResponse;
import com.konfigthis.client.model.UserAssignmentsCreateRoleAssignmentRequest;
import com.konfigthis.client.model.UserAssignmentsCreateRoleAssignmentResponse;
import com.konfigthis.client.model.UserAssignmentsListDepartmentAssignmentsResponse;
import com.konfigthis.client.model.UserAssignmentsListLocationAssignmentsResponse;
import com.konfigthis.client.model.UserAssignmentsListResponse;
import com.konfigthis.client.model.UserAssignmentsListRoleAssignmentsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserAssignmentsApi
 */
@Disabled
public class UserAssignmentsApiTest {

    private static UserAssignmentsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new UserAssignmentsApi(apiClient);
    }

    /**
     * Create Department Assignment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDepartmentAssignmentTest() throws ApiException {
        Long departmentId = null;
        Long companyId = null;
        Long userId = null;
        Boolean appearOnSchedule = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        UserAssignmentsCreateDepartmentAssignmentResponse response = api.createDepartmentAssignment(departmentId, companyId, userId)
                .appearOnSchedule(appearOnSchedule)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Location Assignments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLocationAssignmentTest() throws ApiException {
        Long locationId = null;
        Long companyId = null;
        Long userId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        UserAssignmentsCreateLocationAssignmentResponse response = api.createLocationAssignment(locationId, companyId, userId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Role Assignment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRoleAssignmentTest() throws ApiException {
        Integer roleId = null;
        Long companyId = null;
        Long userId = null;
        Boolean primary = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        UserAssignmentsCreateRoleAssignmentResponse response = api.createRoleAssignment(roleId, companyId, userId)
                .primary(primary)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Role Assignment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRoleAssignmentTest() throws ApiException {
        Long companyId = null;
        Long userId = null;
        Long roleId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        api.deleteRoleAssignment(companyId, userId, roleId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * List Assignments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        Long companyId = null;
        Long userId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        UserAssignmentsListResponse response = api.list(companyId, userId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * List Department Assignments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDepartmentAssignmentsTest() throws ApiException {
        Long companyId = null;
        Long userId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        UserAssignmentsListDepartmentAssignmentsResponse response = api.listDepartmentAssignments(companyId, userId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * List Location Assignments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLocationAssignmentsTest() throws ApiException {
        Long companyId = null;
        Long userId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        UserAssignmentsListLocationAssignmentsResponse response = api.listLocationAssignments(companyId, userId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * List Role Assignments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRoleAssignmentsTest() throws ApiException {
        Long companyId = null;
        Long userId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        UserAssignmentsListRoleAssignmentsResponse response = api.listRoleAssignments(companyId, userId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Department Assignment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeDepartmentAssignmentTest() throws ApiException {
        Long companyId = null;
        Long userId = null;
        Long departmentId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        api.removeDepartmentAssignment(companyId, userId, departmentId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Location Assignment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeLocationAssignmentTest() throws ApiException {
        Long companyId = null;
        Long userId = null;
        Long locationId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        api.removeLocationAssignment(companyId, userId, locationId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

}
