/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.TimePunchesCreateRequest;
import com.konfigthis.client.model.TimePunchesCreateRequestBreaksInner;
import com.konfigthis.client.model.TimePunchesCreateResponse;
import com.konfigthis.client.model.TimePunchesGetTimePunchResponse;
import com.konfigthis.client.model.TimePunchesListResponse;
import com.konfigthis.client.model.TimePunchesUpdateByIdRequest;
import com.konfigthis.client.model.TimePunchesUpdateByIdRequestBreaksInner;
import com.konfigthis.client.model.TimePunchesUpdateByIdResponse;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TimePunchesApi
 */
@Disabled
public class TimePunchesApiTest {

    private static TimePunchesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TimePunchesApi(apiClient);
    }

    /**
     * Create Time Punch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        Integer locationId = null;
        Integer userId = null;
        OffsetDateTime clockedIn = null;
        Long companyId = null;
        Integer departmentId = null;
        Integer roleId = null;
        OffsetDateTime clockedOut = null;
        String notes = null;
        Integer tips = null;
        List<TimePunchesCreateRequestBreaksInner> breaks = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        TimePunchesCreateResponse response = api.create(locationId, userId, clockedIn, companyId)
                .departmentId(departmentId)
                .roleId(roleId)
                .clockedOut(clockedOut)
                .notes(notes)
                .tips(tips)
                .breaks(breaks)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Time Punch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteByIdTest() throws ApiException {
        Long companyId = null;
        Long timePunchId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        api.deleteById(companyId, timePunchId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Time Punch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimePunchTest() throws ApiException {
        Long companyId = null;
        Long timePunchId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        TimePunchesGetTimePunchResponse response = api.getTimePunch(companyId, timePunchId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * List Time Punches
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        Long companyId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        Integer locationId = null;
        Integer departmentId = null;
        Integer roleId = null;
        Integer userId = null;
        Boolean approved = null;
        Integer limit = null;
        OffsetDateTime modifiedSince = null;
        OffsetDateTime clockedInLte = null;
        OffsetDateTime clockedInGte = null;
        OffsetDateTime clockedOutLte = null;
        OffsetDateTime clockedOutGte = null;
        Boolean includeDeleted = null;
        Boolean deleted = null;
        Boolean localizeSearchTime = null;
        String cursor = null;
        String sortBy = null;
        TimePunchesListResponse response = api.list(companyId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .locationId(locationId)
                .departmentId(departmentId)
                .roleId(roleId)
                .userId(userId)
                .approved(approved)
                .limit(limit)
                .modifiedSince(modifiedSince)
                .clockedInLte(clockedInLte)
                .clockedInGte(clockedInGte)
                .clockedOutLte(clockedOutLte)
                .clockedOutGte(clockedOutGte)
                .includeDeleted(includeDeleted)
                .deleted(deleted)
                .localizeSearchTime(localizeSearchTime)
                .cursor(cursor)
                .sortBy(sortBy)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Time Punch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByIdTest() throws ApiException {
        Long companyId = null;
        Long timePunchId = null;
        Integer departmentId = null;
        Integer roleId = null;
        OffsetDateTime clockedIn = null;
        OffsetDateTime clockedOut = null;
        String notes = null;
        Integer tips = null;
        List<TimePunchesUpdateByIdRequestBreaksInner> breaks = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        TimePunchesUpdateByIdResponse response = api.updateById(companyId, timePunchId)
                .departmentId(departmentId)
                .roleId(roleId)
                .clockedIn(clockedIn)
                .clockedOut(clockedOut)
                .notes(notes)
                .tips(tips)
                .breaks(breaks)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

}
