/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.TaskManagementClearTaskRequest;
import com.konfigthis.client.model.TaskManagementClearTaskResponse;
import com.konfigthis.client.model.TaskManagementCreateTaskListTemplateRequest;
import com.konfigthis.client.model.TaskManagementCreateTaskListTemplateRequestAssignmentsInner;
import com.konfigthis.client.model.TaskManagementCreateTaskListTemplateRequestTaskTemplatesInner;
import com.konfigthis.client.model.TaskManagementCreateTaskListTemplateRequestTimeFrame;
import com.konfigthis.client.model.TaskManagementCreateTaskListTemplateResponse;
import com.konfigthis.client.model.TaskManagementCreateTaskTagsRequest;
import com.konfigthis.client.model.TaskManagementCreateTaskTagsRequestTagsInner;
import com.konfigthis.client.model.TaskManagementDeleteTaskTagsRequest;
import com.konfigthis.client.model.TaskManagementEditTaskListTemplateRequest;
import com.konfigthis.client.model.TaskManagementEditTaskListTemplateRequestTaskTemplatesInner;
import com.konfigthis.client.model.TaskManagementEditTaskListTemplateRequestTimeFrame;
import com.konfigthis.client.model.TaskManagementEditTaskListTemplateResponse;
import com.konfigthis.client.model.TaskManagementGetSettingsResponse;
import com.konfigthis.client.model.TaskManagementGetTaskListResponse;
import com.konfigthis.client.model.TaskManagementGetTaskListTemplateResponse;
import com.konfigthis.client.model.TaskManagementGetTaskListTemplates200Response;
import com.konfigthis.client.model.TaskManagementGetTaskListTemplatesResponse;
import com.konfigthis.client.model.TaskManagementGetTaskListsResponse;
import com.konfigthis.client.model.TaskManagementListTaskListsSummary200Response;
import com.konfigthis.client.model.TaskManagementListTaskListsSummaryResponse;
import com.konfigthis.client.model.TaskManagementMarkCompleteRequest;
import com.konfigthis.client.model.TaskManagementMarkCompleteResponse;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TaskManagementApi
 */
@Disabled
public class TaskManagementApiTest {

    private static TaskManagementApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TaskManagementApi(apiClient);
    }

    /**
     * Clear task
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clearTaskTest() throws ApiException {
        Integer userId = null;
        Long companyId = null;
        Long listId = null;
        Long taskId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        TaskManagementClearTaskResponse response = api.clearTask(userId, companyId, listId, taskId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Task List Template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTaskListTemplateTest() throws ApiException {
        String title = null;
        String recurrence = null;
        List<TaskManagementCreateTaskListTemplateRequestAssignmentsInner> assignments = null;
        Long companyId = null;
        String description = null;
        String due = null;
        TaskManagementCreateTaskListTemplateRequestTimeFrame timeFrame = null;
        List<TaskManagementCreateTaskListTemplateRequestTaskTemplatesInner> taskTemplates = null;
        Integer status = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        TaskManagementCreateTaskListTemplateResponse response = api.createTaskListTemplate(title, recurrence, assignments, companyId)
                .description(description)
                .due(due)
                .timeFrame(timeFrame)
                .taskTemplates(taskTemplates)
                .status(status)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Task Tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTaskTagsTest() throws ApiException {
        List<TaskManagementCreateTaskTagsRequestTagsInner> tags = null;
        Integer companyId = null;
        Long companyId = null;
        String xApiVersion = null;
        api.createTaskTags(tags, companyId, companyId)
                .xApiVersion(xApiVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Task List Template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTaskListTemplateTest() throws ApiException {
        Long companyId = null;
        String uuid = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        api.deleteTaskListTemplate(companyId, uuid)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Task Tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTaskTagsTest() throws ApiException {
        Integer companyId = null;
        List<String> uuids = null;
        Long companyId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        api.deleteTaskTags(companyId, uuids, companyId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * edit task list template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editTaskListTemplateTest() throws ApiException {
        Long companyId = null;
        String uuid = null;
        String title = null;
        String description = null;
        Integer status = null;
        List<TaskManagementEditTaskListTemplateRequestTaskTemplatesInner> taskTemplates = null;
        String recurrence = null;
        List<TaskManagementCreateTaskListTemplateRequestAssignmentsInner> assignments = null;
        String due = null;
        TaskManagementEditTaskListTemplateRequestTimeFrame timeFrame = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        TaskManagementEditTaskListTemplateResponse response = api.editTaskListTemplate(companyId, uuid)
                .title(title)
                .description(description)
                .status(status)
                .taskTemplates(taskTemplates)
                .recurrence(recurrence)
                .assignments(assignments)
                .due(due)
                .timeFrame(timeFrame)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets task management settings for a company
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSettingsTest() throws ApiException {
        Long companyId = null;
        String xApiVersion = null;
        TaskManagementGetSettingsResponse response = api.getSettings(companyId)
                .xApiVersion(xApiVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Task List
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaskListTest() throws ApiException {
        Long companyId = null;
        Long listId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        Long userId = null;
        TaskManagementGetTaskListResponse response = api.getTaskList(companyId, listId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .userId(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Task List Template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaskListTemplateTest() throws ApiException {
        Long companyId = null;
        String uuid = null;
        String xApiVersion = null;
        TaskManagementGetTaskListTemplateResponse response = api.getTaskListTemplate(companyId, uuid)
                .xApiVersion(xApiVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Get task list templates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaskListTemplatesTest() throws ApiException {
        Long companyId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        Long locationId = null;
        Long departmentId = null;
        Long roleId = null;
        String cursor = null;
        Long limit = null;
        TaskManagementGetTaskListTemplates200Response response = api.getTaskListTemplates(companyId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .locationId(locationId)
                .departmentId(departmentId)
                .roleId(roleId)
                .cursor(cursor)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * List Task Lists
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaskListsTest() throws ApiException {
        Long companyId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        Long userId = null;
        Long locationId = null;
        String uuid = null;
        String activeOnDate = null;
        TaskManagementGetTaskListsResponse response = api.getTaskLists(companyId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .userId(userId)
                .locationId(locationId)
                .uuid(uuid)
                .activeOnDate(activeOnDate)
                .execute();
        // TODO: test validations
    }

    /**
     * List Task Lists Summary
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTaskListsSummaryTest() throws ApiException {
        Long companyId = null;
        Long locationId = null;
        String date = null;
        TaskManagementListTaskListsSummary200Response response = api.listTaskListsSummary(companyId, locationId, date)
                .execute();
        // TODO: test validations
    }

    /**
     * Complete Task
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markCompleteTest() throws ApiException {
        Integer userId = null;
        Long companyId = null;
        Long listId = null;
        Long taskId = null;
        Object completionValue = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        TaskManagementMarkCompleteResponse response = api.markComplete(userId, companyId, listId, taskId)
                .completionValue(completionValue)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

}
