/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.ReceiptsCreateReceiptRequest;
import com.konfigthis.client.model.ReceiptsCreateReceiptRequestAllOfReceiptLines;
import com.konfigthis.client.model.ReceiptsCreateReceiptRequestAllOfTipDetails;
import com.konfigthis.client.model.ReceiptsCreateReceiptResponse;
import com.konfigthis.client.model.ReceiptsGetReceiptResponse;
import com.konfigthis.client.model.ReceiptsGetSummaryResponse;
import com.konfigthis.client.model.ReceiptsListResponse;
import com.konfigthis.client.model.ReceiptsUpdateReceiptRequest;
import com.konfigthis.client.model.ReceiptsUpdateReceiptRequestReceiptLinesInner;
import com.konfigthis.client.model.ReceiptsUpdateReceiptRequestTipDetailsInner;
import com.konfigthis.client.model.ReceiptsUpdateReceiptResponse;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReceiptsApi
 */
@Disabled
public class ReceiptsApiTest {

    private static ReceiptsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ReceiptsApi(apiClient);
    }

    /**
     * Create Receipt
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReceiptTest() throws ApiException {
        Long companyId = null;
        Integer locationId = null;
        OffsetDateTime receiptDate = null;
        Integer netTotal = null;
        Integer grossTotal = null;
        Integer totalReceiptDiscounts = null;
        Integer tips = null;
        String externalUserId = null;
        String revenueCenter = null;
        List<ReceiptsCreateReceiptRequestAllOfReceiptLines> receiptLines = null;
        List<ReceiptsCreateReceiptRequestAllOfTipDetails> tipDetails = null;
        String status = null;
        String orderType = null;
        String diningOption = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        ReceiptsCreateReceiptResponse response = api.createReceipt(companyId)
                .locationId(locationId)
                .receiptDate(receiptDate)
                .netTotal(netTotal)
                .grossTotal(grossTotal)
                .totalReceiptDiscounts(totalReceiptDiscounts)
                .tips(tips)
                .externalUserId(externalUserId)
                .revenueCenter(revenueCenter)
                .receiptLines(receiptLines)
                .tipDetails(tipDetails)
                .status(status)
                .orderType(orderType)
                .diningOption(diningOption)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Receipt
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReceiptTest() throws ApiException {
        Long companyId = null;
        UUID receiptId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        ReceiptsGetReceiptResponse response = api.getReceipt(companyId, receiptId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Receipts Summary
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSummaryTest() throws ApiException {
        Long companyId = null;
        Long locationId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        OffsetDateTime receiptDateGte = null;
        OffsetDateTime receiptDateLte = null;
        OffsetDateTime modifiedSince = null;
        ReceiptsGetSummaryResponse response = api.getSummary(companyId, locationId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .receiptDateGte(receiptDateGte)
                .receiptDateLte(receiptDateLte)
                .modifiedSince(modifiedSince)
                .execute();
        // TODO: test validations
    }

    /**
     * List Receipts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        Long companyId = null;
        Long locationId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        OffsetDateTime receiptDateGte = null;
        OffsetDateTime receiptDateLte = null;
        OffsetDateTime modifiedSince = null;
        String status = null;
        String externalUserId = null;
        String cursor = null;
        Long limit = null;
        ReceiptsListResponse response = api.list(companyId, locationId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .receiptDateGte(receiptDateGte)
                .receiptDateLte(receiptDateLte)
                .modifiedSince(modifiedSince)
                .status(status)
                .externalUserId(externalUserId)
                .cursor(cursor)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Receipt
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateReceiptTest() throws ApiException {
        Integer netTotal = null;
        Long companyId = null;
        String receiptId = null;
        OffsetDateTime receiptDate = null;
        Integer grossTotal = null;
        Integer totalReceiptDiscounts = null;
        Integer tips = null;
        String externalUserId = null;
        String revenueCenter = null;
        List<ReceiptsUpdateReceiptRequestReceiptLinesInner> receiptLines = null;
        List<ReceiptsUpdateReceiptRequestTipDetailsInner> tipDetails = null;
        String status = null;
        String orderType = null;
        String diningOption = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        ReceiptsUpdateReceiptResponse response = api.updateReceipt(netTotal, companyId, receiptId)
                .receiptDate(receiptDate)
                .grossTotal(grossTotal)
                .totalReceiptDiscounts(totalReceiptDiscounts)
                .tips(tips)
                .externalUserId(externalUserId)
                .revenueCenter(revenueCenter)
                .receiptLines(receiptLines)
                .tipDetails(tipDetails)
                .status(status)
                .orderType(orderType)
                .diningOption(diningOption)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

}
