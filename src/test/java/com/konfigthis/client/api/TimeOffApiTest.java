/*
 * 7shifts API
 * 7shifts is a team management software designed for restaurants. We help managers and operators spend less time and effort scheduling their staff, reduce their monthly labor costs and improve team communication. The result is simplified team management, one shift at a time.  7shifts also offers free mobile apps (iOS and Android) allowing managers and employees to have everything at their fingertips.  Start your free trial or request a demo at www.7shifts.com.
 *
 * The version of the OpenAPI document: 2023-05-01
 * Contact: api-support@7shifts.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.TimeOffApproveRequest200Response;
import com.konfigthis.client.model.TimeOffApproveRequestRequest;
import com.konfigthis.client.model.TimeOffApproveRequestResponse;
import com.konfigthis.client.model.TimeOffCreateRequest200Response;
import com.konfigthis.client.model.TimeOffCreateRequestRequest;
import com.konfigthis.client.model.TimeOffCreateRequestRequestHoursInner;
import com.konfigthis.client.model.TimeOffCreateRequestResponse;
import com.konfigthis.client.model.TimeOffDeclineRequest200Response;
import com.konfigthis.client.model.TimeOffDeclineRequestRequest;
import com.konfigthis.client.model.TimeOffDeclineRequestResponse;
import com.konfigthis.client.model.TimeOffGetSettings200Response;
import com.konfigthis.client.model.TimeOffGetSettingsResponse;
import com.konfigthis.client.model.TimeOffGetTimeOffById200Response;
import com.konfigthis.client.model.TimeOffGetTimeOffByIdResponse;
import com.konfigthis.client.model.TimeOffGetTotalHours200Response;
import com.konfigthis.client.model.TimeOffGetTotalHoursResponse;
import com.konfigthis.client.model.TimeOffList200Response;
import com.konfigthis.client.model.TimeOffListResponse;
import com.konfigthis.client.model.TimeOffRemoveResponse;
import com.konfigthis.client.model.TimeOffSetTimeOffSettings200Response;
import com.konfigthis.client.model.TimeOffSetTimeOffSettingsRequest;
import com.konfigthis.client.model.TimeOffSetTimeOffSettingsResponse;
import com.konfigthis.client.model.TimeOffUpdateTimeOffById200Response;
import com.konfigthis.client.model.TimeOffUpdateTimeOffByIdRequest;
import com.konfigthis.client.model.TimeOffUpdateTimeOffByIdResponse;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TimeOffApi
 */
@Disabled
public class TimeOffApiTest {

    private static TimeOffApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TimeOffApi(apiClient);
    }

    /**
     * Approve Time Off Request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void approveRequestTest() throws ApiException {
        Long timeOffId = null;
        String statusActionMessage = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        TimeOffApproveRequest200Response response = api.approveRequest(timeOffId)
                .statusActionMessage(statusActionMessage)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Create time off
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRequestTest() throws ApiException {
        Integer userId = null;
        Integer companyId = null;
        String fromDate = null;
        String toDate = null;
        Boolean partial = null;
        Integer status = null;
        String category = null;
        String partialFrom = null;
        String partialTo = null;
        String comments = null;
        List<TimeOffCreateRequestRequestHoursInner> hours = null;
        Integer statusActionUserId = null;
        String statusActionMessage = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        TimeOffCreateRequest200Response response = api.createRequest(userId, companyId, fromDate, toDate, partial, status, category)
                .partialFrom(partialFrom)
                .partialTo(partialTo)
                .comments(comments)
                .hours(hours)
                .statusActionUserId(statusActionUserId)
                .statusActionMessage(statusActionMessage)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Decline Time Off Request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void declineRequestTest() throws ApiException {
        Long timeOffId = null;
        String statusActionMessage = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        TimeOffDeclineRequest200Response response = api.declineRequest(timeOffId)
                .statusActionMessage(statusActionMessage)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Time Off Settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSettingsTest() throws ApiException {
        Long companyId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        TimeOffGetSettings200Response response = api.getSettings(companyId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Time Off
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeOffByIdTest() throws ApiException {
        Long timeOffId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        TimeOffGetTimeOffById200Response response = api.getTimeOffById(timeOffId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve Time Off Hours
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTotalHoursTest() throws ApiException {
        Long companyId = null;
        List<Integer> employeeId = null;
        String dateStart = null;
        String dateEnd = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        TimeOffGetTotalHours200Response response = api.getTotalHours(companyId, employeeId, dateStart, dateEnd)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * List Time Off
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        Long companyId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        Long locationId = null;
        Long userId = null;
        Long status = null;
        String category = null;
        String toDateGte = null;
        String sortBy = null;
        String sortDir = null;
        String cursor = null;
        Long limit = null;
        TimeOffList200Response response = api.list(companyId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .locationId(locationId)
                .userId(userId)
                .status(status)
                .category(category)
                .toDateGte(toDateGte)
                .sortBy(sortBy)
                .sortDir(sortDir)
                .cursor(cursor)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Time Off
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTest() throws ApiException {
        Long timeOffId = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        api.remove(timeOffId)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Time Off Settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setTimeOffSettingsTest() throws ApiException {
        Long companyId = null;
        Boolean paidTimeOff = null;
        Boolean sickTimeOff = null;
        Boolean timeOffRequestComment = null;
        Double timeOffRequestNotice = null;
        TimeOffSetTimeOffSettings200Response response = api.setTimeOffSettings(companyId)
                .paidTimeOff(paidTimeOff)
                .sickTimeOff(sickTimeOff)
                .timeOffRequestComment(timeOffRequestComment)
                .timeOffRequestNotice(timeOffRequestNotice)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Time Off
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTimeOffByIdTest() throws ApiException {
        Long timeOffId = null;
        Integer userId = null;
        String fromDate = null;
        String toDate = null;
        Boolean partial = null;
        String partialFrom = null;
        String partialTo = null;
        String comments = null;
        Integer status = null;
        String statusActionMessage = null;
        String category = null;
        List<TimeOffCreateRequestRequestHoursInner> hours = null;
        String xApiVersion = null;
        UUID xCompanyGuid = null;
        TimeOffUpdateTimeOffById200Response response = api.updateTimeOffById(timeOffId)
                .userId(userId)
                .fromDate(fromDate)
                .toDate(toDate)
                .partial(partial)
                .partialFrom(partialFrom)
                .partialTo(partialTo)
                .comments(comments)
                .status(status)
                .statusActionMessage(statusActionMessage)
                .category(category)
                .hours(hours)
                .xApiVersion(xApiVersion)
                .xCompanyGuid(xCompanyGuid)
                .execute();
        // TODO: test validations
    }

}
